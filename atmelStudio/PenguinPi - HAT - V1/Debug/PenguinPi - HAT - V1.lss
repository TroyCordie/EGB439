
PenguinPi - HAT - V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00003c62  00003cf6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ea  00800140  00800140  00003d36  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003d36  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003d94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00003dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000385a  00000000  00000000  00003ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e9b  00000000  00000000  00007856  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002181  00000000  00000000  000086f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007f4  00000000  00000000  0000a874  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bcc  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000376b  00000000  00000000  0000bc34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  0000f39f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__ctors_end>
       4:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
       8:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
       c:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__vector_3>
      10:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__vector_4>
      14:	0c 94 85 07 	jmp	0xf0a	; 0xf0a <__vector_5>
      18:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      1c:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      20:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      24:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__vector_9>
      28:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      2c:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      30:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      34:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      38:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      3c:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      40:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      44:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      48:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <__vector_18>
      4c:	0c 94 00 04 	jmp	0x800	; 0x800 <__vector_19>
      50:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      54:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__vector_21>
      58:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      5c:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      60:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      64:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      68:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      6c:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__vector_27>
      70:	0c 94 2a 04 	jmp	0x854	; 0x854 <__vector_28>
      74:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <__vector_29>
      78:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      7c:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      80:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      84:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      88:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      8c:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      90:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      94:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      98:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      9c:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      a0:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      a4:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      a8:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      ac:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      b0:	0c 94 87 03 	jmp	0x70e	; 0x70e <__bad_interrupt>
      b4:	43 0b       	sbc	r20, r19
      b6:	77 0b       	sbc	r23, r23
      b8:	a4 0b       	sbc	r26, r20
      ba:	bf 0b       	sbc	r27, r31
      bc:	ee 0b       	sbc	r30, r30
      be:	26 0c       	add	r2, r6
      c0:	4d 0c       	add	r4, r13
      c2:	66 0d       	add	r22, r6
      c4:	66 0d       	add	r22, r6
      c6:	66 0d       	add	r22, r6
      c8:	66 0d       	add	r22, r6
      ca:	66 0d       	add	r22, r6
      cc:	66 0d       	add	r22, r6
      ce:	66 0d       	add	r22, r6
      d0:	66 0d       	add	r22, r6
      d2:	66 0d       	add	r22, r6
      d4:	66 0d       	add	r22, r6
      d6:	66 0d       	add	r22, r6
      d8:	66 0d       	add	r22, r6
      da:	66 0d       	add	r22, r6
      dc:	66 0d       	add	r22, r6
      de:	66 0d       	add	r22, r6
      e0:	66 0d       	add	r22, r6
      e2:	66 0d       	add	r22, r6
      e4:	66 0d       	add	r22, r6
      e6:	66 0d       	add	r22, r6
      e8:	66 0d       	add	r22, r6
      ea:	66 0d       	add	r22, r6
      ec:	66 0d       	add	r22, r6
      ee:	66 0d       	add	r22, r6
      f0:	66 0d       	add	r22, r6
      f2:	66 0d       	add	r22, r6
      f4:	66 0d       	add	r22, r6
      f6:	66 0d       	add	r22, r6
      f8:	66 0d       	add	r22, r6
      fa:	66 0d       	add	r22, r6
      fc:	66 0d       	add	r22, r6
      fe:	66 0d       	add	r22, r6
     100:	66 0d       	add	r22, r6
     102:	66 0d       	add	r22, r6
     104:	66 0d       	add	r22, r6
     106:	66 0d       	add	r22, r6
     108:	66 0d       	add	r22, r6
     10a:	66 0d       	add	r22, r6
     10c:	66 0d       	add	r22, r6
     10e:	66 0d       	add	r22, r6
     110:	66 0d       	add	r22, r6
     112:	66 0d       	add	r22, r6
     114:	66 0d       	add	r22, r6
     116:	66 0d       	add	r22, r6
     118:	66 0d       	add	r22, r6
     11a:	66 0d       	add	r22, r6
     11c:	66 0d       	add	r22, r6
     11e:	66 0d       	add	r22, r6
     120:	66 0d       	add	r22, r6
     122:	66 0d       	add	r22, r6
     124:	66 0d       	add	r22, r6
     126:	66 0d       	add	r22, r6
     128:	66 0d       	add	r22, r6
     12a:	66 0d       	add	r22, r6
     12c:	66 0d       	add	r22, r6
     12e:	66 0d       	add	r22, r6
     130:	66 0d       	add	r22, r6
     132:	66 0d       	add	r22, r6
     134:	66 0d       	add	r22, r6
     136:	66 0d       	add	r22, r6
     138:	66 0d       	add	r22, r6
     13a:	66 0d       	add	r22, r6
     13c:	66 0d       	add	r22, r6
     13e:	66 0d       	add	r22, r6
     140:	66 0d       	add	r22, r6
     142:	66 0d       	add	r22, r6
     144:	66 0d       	add	r22, r6
     146:	66 0d       	add	r22, r6
     148:	66 0d       	add	r22, r6
     14a:	66 0d       	add	r22, r6
     14c:	66 0d       	add	r22, r6
     14e:	66 0d       	add	r22, r6
     150:	66 0d       	add	r22, r6
     152:	66 0d       	add	r22, r6
     154:	66 0d       	add	r22, r6
     156:	66 0d       	add	r22, r6
     158:	66 0d       	add	r22, r6
     15a:	66 0d       	add	r22, r6
     15c:	66 0d       	add	r22, r6
     15e:	66 0d       	add	r22, r6
     160:	66 0d       	add	r22, r6
     162:	66 0d       	add	r22, r6
     164:	66 0d       	add	r22, r6
     166:	66 0d       	add	r22, r6
     168:	66 0d       	add	r22, r6
     16a:	66 0d       	add	r22, r6
     16c:	66 0d       	add	r22, r6
     16e:	66 0d       	add	r22, r6
     170:	66 0d       	add	r22, r6
     172:	66 0d       	add	r22, r6
     174:	66 0d       	add	r22, r6
     176:	66 0d       	add	r22, r6
     178:	66 0d       	add	r22, r6
     17a:	66 0d       	add	r22, r6
     17c:	66 0d       	add	r22, r6
     17e:	66 0d       	add	r22, r6
     180:	66 0d       	add	r22, r6
     182:	66 0d       	add	r22, r6
     184:	66 0d       	add	r22, r6
     186:	66 0d       	add	r22, r6
     188:	66 0d       	add	r22, r6
     18a:	66 0d       	add	r22, r6
     18c:	66 0d       	add	r22, r6
     18e:	66 0d       	add	r22, r6
     190:	66 0d       	add	r22, r6
     192:	66 0d       	add	r22, r6
     194:	66 0d       	add	r22, r6
     196:	66 0d       	add	r22, r6
     198:	66 0d       	add	r22, r6
     19a:	66 0d       	add	r22, r6
     19c:	66 0d       	add	r22, r6
     19e:	66 0d       	add	r22, r6
     1a0:	66 0d       	add	r22, r6
     1a2:	66 0d       	add	r22, r6
     1a4:	66 0d       	add	r22, r6
     1a6:	66 0d       	add	r22, r6
     1a8:	66 0d       	add	r22, r6
     1aa:	66 0d       	add	r22, r6
     1ac:	66 0d       	add	r22, r6
     1ae:	66 0d       	add	r22, r6
     1b0:	66 0d       	add	r22, r6
     1b2:	66 0d       	add	r22, r6
     1b4:	68 0c       	add	r6, r8
     1b6:	88 0c       	add	r8, r8
     1b8:	a8 0c       	add	r10, r8
     1ba:	c5 0c       	add	r12, r5
     1bc:	f1 0c       	add	r15, r1
     1be:	1d 0d       	add	r17, r13
     1c0:	49 0d       	add	r20, r9

000001c2 <__trampolines_end>:
     1c2:	6e 61       	ori	r22, 0x1E	; 30
     1c4:	6e 00       	.word	0x006e	; ????

000001c6 <__c.2240>:
     1c6:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1d6:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1e6:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1f6:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     206:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     216:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     226:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     236:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     246:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     256:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     266:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     276:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     286:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     296:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2a6:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2b6:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002c4 <__c.2812>:
     2c4:	45 52 52 4f 52 3a 20 55 6e 6b 6e 6f 77 6e 20 4f     ERROR: Unknown O
     2d4:	70 43 6f 64 65 0a 00                                pCode..

000002db <__c.2790>:
     2db:	45 52 52 4f 52 3a 20 55 6e 6b 6e 6f 77 6e 20 4f     ERROR: Unknown O
     2eb:	70 43 6f 64 65 0a 00                                pCode..

000002f2 <__c.2783>:
     2f2:	45 52 52 4f 52 3a 20 49 6e 63 6f 72 72 65 63 74     ERROR: Incorrect
     302:	20 54 79 70 65 0a 00                                 Type..

00000309 <__c.2771>:
     309:	45 52 52 4f 52 3a 20 55 6e 6b 6e 6f 77 6e 20 4f     ERROR: Unknown O
     319:	70 43 6f 64 65 0a 00                                pCode..

00000320 <__c.2766>:
     320:	45 52 52 4f 52 3a 20 49 6e 63 6f 72 72 65 63 74     ERROR: Incorrect
     330:	20 54 79 70 65 0a 00                                 Type..

00000337 <__c.2761>:
     337:	45 52 52 4f 52 3a 20 49 6e 63 6f 72 72 65 63 74     ERROR: Incorrect
     347:	20 54 79 70 65 0a 00                                 Type..

0000034e <__c.2753>:
     34e:	45 52 52 4f 52 3a 20 55 6e 6b 6e 6f 77 6e 20 4f     ERROR: Unknown O
     35e:	70 43 6f 64 65 0a 00                                pCode..

00000365 <__c.2747>:
     365:	45 52 52 4f 52 3a 20 49 6e 63 6f 72 72 65 63 74     ERROR: Incorrect
     375:	20 54 79 70 65 0a 00                                 Type..

0000037c <__c.2743>:
     37c:	45 52 52 4f 52 3a 20 49 6e 63 6f 72 72 65 63 74     ERROR: Incorrect
     38c:	20 54 79 70 65 0a 00                                 Type..

00000393 <__c.2738>:
     393:	45 52 52 4f 52 3a 20 49 6e 63 6f 72 72 65 63 74     ERROR: Incorrect
     3a3:	20 54 79 70 65 0a 00                                 Type..

000003aa <__c.2731>:
     3aa:	45 52 52 4f 52 3a 20 55 6e 6b 6e 6f 77 6e 20 4f     ERROR: Unknown O
     3ba:	70 43 6f 64 65 0a 00                                pCode..

000003c1 <__c.2725>:
     3c1:	45 52 52 4f 52 3a 20 49 6e 63 6f 72 72 65 63 74     ERROR: Incorrect
     3d1:	20 54 79 70 65 0a 00                                 Type..

000003d8 <__c.2722>:
     3d8:	45 52 52 4f 52 3a 20 49 6e 63 6f 72 72 65 63 74     ERROR: Incorrect
     3e8:	20 54 79 70 65 0a 00                                 Type..

000003ef <__c.2717>:
     3ef:	45 52 52 4f 52 3a 20 49 6e 63 6f 72 72 65 63 74     ERROR: Incorrect
     3ff:	20 54 79 70 65 0a 00                                 Type..

00000406 <__c.2709>:
     406:	45 52 52 4f 52 3a 20 55 6e 6b 6e 6f 77 6e 20 4f     ERROR: Unknown O
     416:	70 43 6f 64 65 0a 00                                pCode..

0000041d <__c.2700>:
     41d:	45 52 52 4f 52 3a 20 49 6e 63 6f 72 72 65 63 74     ERROR: Incorrect
     42d:	20 54 79 70 65 0a 00                                 Type..

00000434 <__c.2696>:
     434:	45 52 52 4f 52 3a 20 49 6e 63 6f 72 72 65 63 74     ERROR: Incorrect
     444:	20 54 79 70 65 0a 00                                 Type..

0000044b <__c.2692>:
     44b:	45 52 52 4f 52 3a 20 49 6e 63 6f 72 72 65 63 74     ERROR: Incorrect
     45b:	20 54 79 70 65 0a 00                                 Type..

00000462 <__c.2688>:
     462:	45 52 52 4f 52 3a 20 49 6e 63 6f 72 72 65 63 74     ERROR: Incorrect
     472:	20 54 79 70 65 0a 00                                 Type..

00000479 <__c.2684>:
     479:	45 52 52 4f 52 3a 20 49 6e 63 6f 72 72 65 63 74     ERROR: Incorrect
     489:	20 54 79 70 65 0a 00                                 Type..

00000490 <__c.2679>:
     490:	45 52 52 4f 52 3a 20 49 6e 63 6f 72 72 65 63 74     ERROR: Incorrect
     4a0:	20 54 79 70 65 0a 00                                 Type..

000004a7 <__c.2671>:
     4a7:	45 52 52 4f 52 3a 20 55 6e 6b 6e 6f 77 6e 20 4f     ERROR: Unknown O
     4b7:	70 43 6f 64 65 0a 00                                pCode..

000004be <__c.2661>:
     4be:	45 52 52 4f 52 3a 20 49 6e 63 6f 72 72 65 63 74     ERROR: Incorrect
     4ce:	20 54 79 70 65 0a 00                                 Type..

000004d5 <__c.2657>:
     4d5:	45 52 52 4f 52 3a 20 49 6e 63 6f 72 72 65 63 74     ERROR: Incorrect
     4e5:	20 54 79 70 65 0a 00                                 Type..

000004ec <__c.2649>:
     4ec:	45 52 52 4f 52 3a 20 49 6e 63 6f 72 72 65 63 74     ERROR: Incorrect
     4fc:	20 54 79 70 65 0a 00                                 Type..

00000503 <__c.2641>:
     503:	45 52 52 4f 52 3a 20 49 6e 63 6f 72 72 65 63 74     ERROR: Incorrect
     513:	20 54 79 70 65 0a 00                                 Type..

0000051a <__c.2633>:
     51a:	45 52 52 4f 52 3a 20 49 6e 63 6f 72 72 65 63 74     ERROR: Incorrect
     52a:	20 54 79 70 65 0a 00                                 Type..

00000531 <__c.2629>:
     531:	45 52 52 4f 52 3a 20 49 6e 63 6f 72 72 65 63 74     ERROR: Incorrect
     541:	20 54 79 70 65 0a 00                                 Type..

00000548 <__c.2624>:
     548:	45 52 52 4f 52 3a 20 49 6e 63 6f 72 72 65 63 74     ERROR: Incorrect
     558:	20 54 79 70 65 0a 00                                 Type..

0000055f <__c.2616>:
     55f:	45 52 52 4f 52 3a 20 55 6e 6b 6e 6f 77 6e 20 41     ERROR: Unknown A
     56f:	64 64 72 65 73 73 0a 00                             ddress..

00000577 <__c.2598>:
     577:	45 52 52 4f 52 3a 20 43 52 43 20 46 61 69 6c 65     ERROR: CRC Faile
     587:	64 0a 00                                            d..

0000058a <__c.2591>:
     58a:	45 52 52 4f 52 3a 20 44 61 74 61 67 72 61 6d 20     ERROR: Datagram 
     59a:	42 75 66 66 65 72 20 4f 76 65 72 66 6c 6f 77 0a     Buffer Overflow.
	...

000005ab <__c.2547>:
     5ab:	45 52 52 4f 52 3a 20 55 41 52 54 20 42 75 66 66     ERROR: UART Buff
     5bb:	65 72 20 4f 76 65 72 66 6c 6f 77 0a 00              er Overflow..

000005c8 <__c.2545>:
     5c8:	45 52 52 4f 52 3a 20 55 41 52 54 20 42 75 66 66     ERROR: UART Buff
     5d8:	65 72 20 4f 76 65 72 72 75 6e 0a 00                 er Overrun..

000005e4 <__c.2543>:
     5e4:	45 52 52 4f 52 3a 20 42 61 64 20 55 41 52 54 20     ERROR: Bad UART 
     5f4:	46 72 61 6d 65 0a 00                                Frame..

000005fb <__c.2469>:
     5fb:	44 65 76 69 63 65 20 74 75 72 6e 65 64 20 6f 6e     Device turned on
     60b:	0a 00                                               ..

0000060d <__c.2466>:
     60d:	44 65 76 69 63 65 20 52 65 73 65 74 20 66 72 6f     Device Reset fro
     61d:	6d 20 57 61 74 63 68 64 6f 67 20 54 69 6d 65 6f     m Watchdog Timeo
     62d:	75 74 0a 00                                         ut..

00000631 <__c.2463>:
     631:	44 65 76 69 63 65 20 52 65 73 65 74 20 66 72 6f     Device Reset fro
     641:	6d 20 42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65     m Brown Out Dete
     651:	63 74 6f 72 0a 00                                   ctor..

00000657 <__c.2460>:
     657:	44 65 76 69 63 65 20 52 65 73 65 74 20 66 72 6f     Device Reset fro
     667:	6d 20 45 78 74 65 72 6e 61 6c 20 52 65 73 65 74     m External Reset
     677:	0a 00                                               ..

00000679 <__c.2456>:
     679:	44 65 76 69 63 65 20 52 65 73 65 74 20 66 72 6f     Device Reset fro
     689:	6d 20 50 6f 77 65 72 20 4f 6e 20 52 65 73 65 74     m Power On Reset
     699:	0a 00                                               ..

0000069b <__c.2434>:
     69b:	4c 6f 77 20 62 61 74 74 65 72 79 20 73 68 75 74     Low battery shut
     6ab:	64 6f 77 6e 20 72 65 71 75 65 73 74 00              down request.

000006b8 <__c.2431>:
     6b8:	54 68 69 73 20 69 73 20 61 20 73 68 75 74 64 6f     This is a shutdo
     6c8:	77 6e 20 72 65 71 75 65 73 74 00 00                 wn request..

000006d4 <__ctors_end>:
     6d4:	11 24       	eor	r1, r1
     6d6:	1f be       	out	0x3f, r1	; 63
     6d8:	cf ef       	ldi	r28, 0xFF	; 255
     6da:	d8 e0       	ldi	r29, 0x08	; 8
     6dc:	de bf       	out	0x3e, r29	; 62
     6de:	cd bf       	out	0x3d, r28	; 61

000006e0 <__do_copy_data>:
     6e0:	11 e0       	ldi	r17, 0x01	; 1
     6e2:	a0 e0       	ldi	r26, 0x00	; 0
     6e4:	b1 e0       	ldi	r27, 0x01	; 1
     6e6:	e2 e6       	ldi	r30, 0x62	; 98
     6e8:	fc e3       	ldi	r31, 0x3C	; 60
     6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <__do_copy_data+0x10>
     6ec:	05 90       	lpm	r0, Z+
     6ee:	0d 92       	st	X+, r0
     6f0:	a0 34       	cpi	r26, 0x40	; 64
     6f2:	b1 07       	cpc	r27, r17
     6f4:	d9 f7       	brne	.-10     	; 0x6ec <__do_copy_data+0xc>

000006f6 <__do_clear_bss>:
     6f6:	23 e0       	ldi	r18, 0x03	; 3
     6f8:	a0 e4       	ldi	r26, 0x40	; 64
     6fa:	b1 e0       	ldi	r27, 0x01	; 1
     6fc:	01 c0       	rjmp	.+2      	; 0x700 <.do_clear_bss_start>

000006fe <.do_clear_bss_loop>:
     6fe:	1d 92       	st	X+, r1

00000700 <.do_clear_bss_start>:
     700:	aa 32       	cpi	r26, 0x2A	; 42
     702:	b2 07       	cpc	r27, r18
     704:	e1 f7       	brne	.-8      	; 0x6fe <.do_clear_bss_loop>
     706:	0e 94 a3 13 	call	0x2746	; 0x2746 <main>
     70a:	0c 94 2f 1e 	jmp	0x3c5e	; 0x3c5e <_exit>

0000070e <__bad_interrupt>:
     70e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000712 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     712:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     716:	8c e0       	ldi	r24, 0x0C	; 12
     718:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     71c:	08 95       	ret

0000071e <i2c_start_wait>:
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
     722:	ec eb       	ldi	r30, 0xBC	; 188
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	24 ea       	ldi	r18, 0xA4	; 164
     728:	a9 eb       	ldi	r26, 0xB9	; 185
     72a:	b0 e0       	ldi	r27, 0x00	; 0
     72c:	cb eb       	ldi	r28, 0xBB	; 187
     72e:	d0 e0       	ldi	r29, 0x00	; 0
     730:	34 e8       	ldi	r19, 0x84	; 132
     732:	44 e9       	ldi	r20, 0x94	; 148
     734:	20 83       	st	Z, r18
     736:	90 81       	ld	r25, Z
     738:	99 23       	and	r25, r25
     73a:	ec f7       	brge	.-6      	; 0x736 <i2c_start_wait+0x18>
     73c:	9c 91       	ld	r25, X
     73e:	98 7f       	andi	r25, 0xF8	; 248
     740:	98 30       	cpi	r25, 0x08	; 8
     742:	11 f0       	breq	.+4      	; 0x748 <i2c_start_wait+0x2a>
     744:	90 31       	cpi	r25, 0x10	; 16
     746:	b1 f7       	brne	.-20     	; 0x734 <i2c_start_wait+0x16>
     748:	88 83       	st	Y, r24
     74a:	30 83       	st	Z, r19
     74c:	90 81       	ld	r25, Z
     74e:	99 23       	and	r25, r25
     750:	ec f7       	brge	.-6      	; 0x74c <i2c_start_wait+0x2e>
     752:	9c 91       	ld	r25, X
     754:	98 7f       	andi	r25, 0xF8	; 248
     756:	90 32       	cpi	r25, 0x20	; 32
     758:	11 f0       	breq	.+4      	; 0x75e <i2c_start_wait+0x40>
     75a:	98 35       	cpi	r25, 0x58	; 88
     75c:	29 f4       	brne	.+10     	; 0x768 <i2c_start_wait+0x4a>
     75e:	40 83       	st	Z, r20
     760:	90 81       	ld	r25, Z
     762:	94 fd       	sbrc	r25, 4
     764:	fd cf       	rjmp	.-6      	; 0x760 <i2c_start_wait+0x42>
     766:	e6 cf       	rjmp	.-52     	; 0x734 <i2c_start_wait+0x16>
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	08 95       	ret

0000076e <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR0 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     76e:	84 e9       	ldi	r24, 0x94	; 148
     770:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR0 & (1<<TWSTO));
     774:	ec eb       	ldi	r30, 0xBC	; 188
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	80 81       	ld	r24, Z
     77a:	84 fd       	sbrc	r24, 4
     77c:	fd cf       	rjmp	.-6      	; 0x778 <i2c_stop+0xa>

}/* i2c_stop */
     77e:	08 95       	ret

00000780 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR0 = data;
     780:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT) | (1<<TWEN);
     784:	84 e8       	ldi	r24, 0x84	; 132
     786:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR0 & (1<<TWINT)));
     78a:	ec eb       	ldi	r30, 0xBC	; 188
     78c:	f0 e0       	ldi	r31, 0x00	; 0
     78e:	80 81       	ld	r24, Z
     790:	88 23       	and	r24, r24
     792:	ec f7       	brge	.-6      	; 0x78e <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     794:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     798:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	98 32       	cpi	r25, 0x28	; 40
     79e:	09 f4       	brne	.+2      	; 0x7a2 <i2c_write+0x22>
     7a0:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
     7a2:	08 95       	ret

000007a4 <__vector_18>:
void uart1_puts(const char *s )
{
    while (*s) 
      uart1_putc(*s++);

}/* uart1_puts */
     7a4:	1f 92       	push	r1
     7a6:	0f 92       	push	r0
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	0f 92       	push	r0
     7ac:	11 24       	eor	r1, r1
     7ae:	2f 93       	push	r18
     7b0:	8f 93       	push	r24
     7b2:	9f 93       	push	r25
     7b4:	ef 93       	push	r30
     7b6:	ff 93       	push	r31
     7b8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     7bc:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     7c0:	8c 71       	andi	r24, 0x1C	; 28
     7c2:	e0 91 c7 01 	lds	r30, 0x01C7	; 0x8001c7 <UART_RxHead>
     7c6:	ef 5f       	subi	r30, 0xFF	; 255
     7c8:	ef 73       	andi	r30, 0x3F	; 63
     7ca:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <UART_RxTail>
     7ce:	e9 17       	cp	r30, r25
     7d0:	39 f0       	breq	.+14     	; 0x7e0 <__vector_18+0x3c>
     7d2:	e0 93 c7 01 	sts	0x01C7, r30	; 0x8001c7 <UART_RxHead>
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	e6 53       	subi	r30, 0x36	; 54
     7da:	fe 4f       	sbci	r31, 0xFE	; 254
     7dc:	20 83       	st	Z, r18
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__vector_18+0x3e>
     7e0:	82 e0       	ldi	r24, 0x02	; 2
     7e2:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <UART_LastRxError>
     7e6:	89 2b       	or	r24, r25
     7e8:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <UART_LastRxError>
     7ec:	ff 91       	pop	r31
     7ee:	ef 91       	pop	r30
     7f0:	9f 91       	pop	r25
     7f2:	8f 91       	pop	r24
     7f4:	2f 91       	pop	r18
     7f6:	0f 90       	pop	r0
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	0f 90       	pop	r0
     7fc:	1f 90       	pop	r1
     7fe:	18 95       	reti

00000800 <__vector_19>:
     800:	1f 92       	push	r1
     802:	0f 92       	push	r0
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	0f 92       	push	r0
     808:	11 24       	eor	r1, r1
     80a:	8f 93       	push	r24
     80c:	9f 93       	push	r25
     80e:	ef 93       	push	r30
     810:	ff 93       	push	r31
     812:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <UART_TxHead>
     816:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <UART_TxTail>
     81a:	98 17       	cp	r25, r24
     81c:	69 f0       	breq	.+26     	; 0x838 <__vector_19+0x38>
     81e:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <UART_TxTail>
     822:	ef 5f       	subi	r30, 0xFF	; 255
     824:	ef 73       	andi	r30, 0x3F	; 63
     826:	e0 93 c8 01 	sts	0x01C8, r30	; 0x8001c8 <UART_TxTail>
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	e6 5f       	subi	r30, 0xF6	; 246
     82e:	fd 4f       	sbci	r31, 0xFD	; 253
     830:	80 81       	ld	r24, Z
     832:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     836:	05 c0       	rjmp	.+10     	; 0x842 <__vector_19+0x42>
     838:	e1 ec       	ldi	r30, 0xC1	; 193
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	80 81       	ld	r24, Z
     83e:	8f 7d       	andi	r24, 0xDF	; 223
     840:	80 83       	st	Z, r24
     842:	ff 91       	pop	r31
     844:	ef 91       	pop	r30
     846:	9f 91       	pop	r25
     848:	8f 91       	pop	r24
     84a:	0f 90       	pop	r0
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	0f 90       	pop	r0
     850:	1f 90       	pop	r1
     852:	18 95       	reti

00000854 <__vector_28>:
     854:	1f 92       	push	r1
     856:	0f 92       	push	r0
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	0f 92       	push	r0
     85c:	11 24       	eor	r1, r1
     85e:	2f 93       	push	r18
     860:	8f 93       	push	r24
     862:	9f 93       	push	r25
     864:	ef 93       	push	r30
     866:	ff 93       	push	r31
     868:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     86c:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     870:	8c 71       	andi	r24, 0x1C	; 28
     872:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <UART1_RxHead>
     876:	ef 5f       	subi	r30, 0xFF	; 255
     878:	ef 73       	andi	r30, 0x3F	; 63
     87a:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <UART1_RxTail>
     87e:	e9 17       	cp	r30, r25
     880:	39 f0       	breq	.+14     	; 0x890 <__vector_28+0x3c>
     882:	e0 93 42 01 	sts	0x0142, r30	; 0x800142 <UART1_RxHead>
     886:	f0 e0       	ldi	r31, 0x00	; 0
     888:	eb 5b       	subi	r30, 0xBB	; 187
     88a:	fe 4f       	sbci	r31, 0xFE	; 254
     88c:	20 83       	st	Z, r18
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__vector_28+0x3e>
     890:	82 e0       	ldi	r24, 0x02	; 2
     892:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <__data_end>
     896:	89 2b       	or	r24, r25
     898:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
     89c:	ff 91       	pop	r31
     89e:	ef 91       	pop	r30
     8a0:	9f 91       	pop	r25
     8a2:	8f 91       	pop	r24
     8a4:	2f 91       	pop	r18
     8a6:	0f 90       	pop	r0
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	0f 90       	pop	r0
     8ac:	1f 90       	pop	r1
     8ae:	18 95       	reti

000008b0 <__vector_29>:
     8b0:	1f 92       	push	r1
     8b2:	0f 92       	push	r0
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	0f 92       	push	r0
     8b8:	11 24       	eor	r1, r1
     8ba:	8f 93       	push	r24
     8bc:	9f 93       	push	r25
     8be:	ef 93       	push	r30
     8c0:	ff 93       	push	r31
     8c2:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <UART1_TxHead>
     8c6:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <UART1_TxTail>
     8ca:	98 17       	cp	r25, r24
     8cc:	69 f0       	breq	.+26     	; 0x8e8 <__vector_29+0x38>
     8ce:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <UART1_TxTail>
     8d2:	ef 5f       	subi	r30, 0xFF	; 255
     8d4:	ef 73       	andi	r30, 0x3F	; 63
     8d6:	e0 93 43 01 	sts	0x0143, r30	; 0x800143 <UART1_TxTail>
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	eb 57       	subi	r30, 0x7B	; 123
     8de:	fe 4f       	sbci	r31, 0xFE	; 254
     8e0:	80 81       	ld	r24, Z
     8e2:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     8e6:	05 c0       	rjmp	.+10     	; 0x8f2 <__vector_29+0x42>
     8e8:	e9 ec       	ldi	r30, 0xC9	; 201
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	80 81       	ld	r24, Z
     8ee:	8f 7d       	andi	r24, 0xDF	; 223
     8f0:	80 83       	st	Z, r24
     8f2:	ff 91       	pop	r31
     8f4:	ef 91       	pop	r30
     8f6:	9f 91       	pop	r25
     8f8:	8f 91       	pop	r24
     8fa:	0f 90       	pop	r0
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	0f 90       	pop	r0
     900:	1f 90       	pop	r1
     902:	18 95       	reti

00000904 <uart1_init>:
     904:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <UART1_TxHead>
     908:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <UART1_TxTail>
     90c:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <UART1_RxHead>
     910:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <UART1_RxTail>
     914:	99 23       	and	r25, r25
     916:	1c f4       	brge	.+6      	; 0x91e <uart1_init+0x1a>
     918:	22 e0       	ldi	r18, 0x02	; 2
     91a:	20 93 c8 00 	sts	0x00C8, r18	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     91e:	90 78       	andi	r25, 0x80	; 128
     920:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     924:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     928:	88 e9       	ldi	r24, 0x98	; 152
     92a:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     92e:	86 e0       	ldi	r24, 0x06	; 6
     930:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
     934:	08 95       	ret

00000936 <uart1_getc>:
     936:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <UART1_RxHead>
     93a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <UART1_RxTail>
     93e:	98 17       	cp	r25, r24
     940:	a9 f0       	breq	.+42     	; 0x96c <uart1_getc+0x36>
     942:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <UART1_RxTail>
     946:	9f 5f       	subi	r25, 0xFF	; 255
     948:	9f 73       	andi	r25, 0x3F	; 63
     94a:	e9 2f       	mov	r30, r25
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	eb 5b       	subi	r30, 0xBB	; 187
     950:	fe 4f       	sbci	r31, 0xFE	; 254
     952:	20 81       	ld	r18, Z
     954:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
     958:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <UART1_RxTail>
     95c:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__data_end>
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	98 2f       	mov	r25, r24
     964:	88 27       	eor	r24, r24
     966:	82 0f       	add	r24, r18
     968:	91 1d       	adc	r25, r1
     96a:	08 95       	ret
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	91 e0       	ldi	r25, 0x01	; 1
     970:	08 95       	ret

00000972 <uart1_putc>:
     972:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <UART1_TxHead>
     976:	2f 5f       	subi	r18, 0xFF	; 255
     978:	2f 73       	andi	r18, 0x3F	; 63
     97a:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <UART1_TxTail>
     97e:	29 17       	cp	r18, r25
     980:	e1 f3       	breq	.-8      	; 0x97a <uart1_putc+0x8>
     982:	e2 2f       	mov	r30, r18
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	eb 57       	subi	r30, 0x7B	; 123
     988:	fe 4f       	sbci	r31, 0xFE	; 254
     98a:	80 83       	st	Z, r24
     98c:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <UART1_TxHead>
     990:	e9 ec       	ldi	r30, 0xC9	; 201
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	80 81       	ld	r24, Z
     996:	80 62       	ori	r24, 0x20	; 32
     998:	80 83       	st	Z, r24
     99a:	08 95       	ret

0000099c <uart1_puts_p>:
Purpose:  transmit string from program memory to UART1
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart1_puts_p(const char *progmem_s )
{
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
     9a0:	ec 01       	movw	r28, r24
     9a2:	21 96       	adiw	r28, 0x01	; 1
     9a4:	fc 01       	movw	r30, r24
     9a6:	84 91       	lpm	r24, Z
     9a8:	88 23       	and	r24, r24
     9aa:	39 f0       	breq	.+14     	; 0x9ba <uart1_puts_p+0x1e>
      uart1_putc(c);
     9ac:	0e 94 b9 04 	call	0x972	; 0x972 <uart1_putc>
**************************************************************************/
void uart1_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
     9b0:	fe 01       	movw	r30, r28
     9b2:	84 91       	lpm	r24, Z
     9b4:	21 96       	adiw	r28, 0x01	; 1
     9b6:	81 11       	cpse	r24, r1
     9b8:	f9 cf       	rjmp	.-14     	; 0x9ac <uart1_puts_p+0x10>
      uart1_putc(c);

}/* uart1_puts_p */
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	08 95       	ret

000009c0 <__vector_4>:
}

uint8_t *float2char(float f){
	floatChar.f = f;
	return floatChar.c;
}
     9c0:	1f 92       	push	r1
     9c2:	0f 92       	push	r0
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	0f 92       	push	r0
     9c8:	11 24       	eor	r1, r1
     9ca:	2f 93       	push	r18
     9cc:	3f 93       	push	r19
     9ce:	4f 93       	push	r20
     9d0:	5f 93       	push	r21
     9d2:	6f 93       	push	r22
     9d4:	8f 93       	push	r24
     9d6:	9f 93       	push	r25
     9d8:	af 93       	push	r26
     9da:	bf 93       	push	r27
     9dc:	ef 93       	push	r30
     9de:	ff 93       	push	r31
     9e0:	26 b1       	in	r18, 0x06	; 6
     9e2:	22 fb       	bst	r18, 2
     9e4:	88 27       	eor	r24, r24
     9e6:	80 f9       	bld	r24, 0
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	36 b1       	in	r19, 0x06	; 6
     9ec:	20 91 5d 02 	lds	r18, 0x025D	; 0x80025d <motorA+0x4>
     9f0:	21 11       	cpse	r18, r1
     9f2:	3b c0       	rjmp	.+118    	; 0xa6a <__vector_4+0xaa>
     9f4:	20 91 59 02 	lds	r18, 0x0259	; 0x800259 <motorA>
     9f8:	28 17       	cp	r18, r24
     9fa:	09 f4       	brne	.+2      	; 0x9fe <__vector_4+0x3e>
     9fc:	9f c0       	rjmp	.+318    	; 0xb3c <__vector_4+0x17c>
     9fe:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <motorA+0x9>
     a02:	21 30       	cpi	r18, 0x01	; 1
     a04:	59 f4       	brne	.+22     	; 0xa1c <__vector_4+0x5c>
     a06:	e9 e5       	ldi	r30, 0x59	; 89
     a08:	f2 e0       	ldi	r31, 0x02	; 2
     a0a:	22 81       	ldd	r18, Z+2	; 0x02
     a0c:	33 81       	ldd	r19, Z+3	; 0x03
     a0e:	2f 5f       	subi	r18, 0xFF	; 255
     a10:	3f 4f       	sbci	r19, 0xFF	; 255
     a12:	33 83       	std	Z+3, r19	; 0x03
     a14:	22 83       	std	Z+2, r18	; 0x02
     a16:	21 e0       	ldi	r18, 0x01	; 1
     a18:	22 87       	std	Z+10, r18	; 0x0a
     a1a:	24 c0       	rjmp	.+72     	; 0xa64 <__vector_4+0xa4>
     a1c:	2f 3f       	cpi	r18, 0xFF	; 255
     a1e:	59 f4       	brne	.+22     	; 0xa36 <__vector_4+0x76>
     a20:	e9 e5       	ldi	r30, 0x59	; 89
     a22:	f2 e0       	ldi	r31, 0x02	; 2
     a24:	22 81       	ldd	r18, Z+2	; 0x02
     a26:	33 81       	ldd	r19, Z+3	; 0x03
     a28:	21 50       	subi	r18, 0x01	; 1
     a2a:	31 09       	sbc	r19, r1
     a2c:	33 83       	std	Z+3, r19	; 0x03
     a2e:	22 83       	std	Z+2, r18	; 0x02
     a30:	2f ef       	ldi	r18, 0xFF	; 255
     a32:	22 87       	std	Z+10, r18	; 0x0a
     a34:	17 c0       	rjmp	.+46     	; 0xa64 <__vector_4+0xa4>
     a36:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <motorA+0xa>
     a3a:	21 30       	cpi	r18, 0x01	; 1
     a3c:	49 f4       	brne	.+18     	; 0xa50 <__vector_4+0x90>
     a3e:	e9 e5       	ldi	r30, 0x59	; 89
     a40:	f2 e0       	ldi	r31, 0x02	; 2
     a42:	22 81       	ldd	r18, Z+2	; 0x02
     a44:	33 81       	ldd	r19, Z+3	; 0x03
     a46:	2f 5f       	subi	r18, 0xFF	; 255
     a48:	3f 4f       	sbci	r19, 0xFF	; 255
     a4a:	33 83       	std	Z+3, r19	; 0x03
     a4c:	22 83       	std	Z+2, r18	; 0x02
     a4e:	0a c0       	rjmp	.+20     	; 0xa64 <__vector_4+0xa4>
     a50:	2f 3f       	cpi	r18, 0xFF	; 255
     a52:	41 f4       	brne	.+16     	; 0xa64 <__vector_4+0xa4>
     a54:	e9 e5       	ldi	r30, 0x59	; 89
     a56:	f2 e0       	ldi	r31, 0x02	; 2
     a58:	22 81       	ldd	r18, Z+2	; 0x02
     a5a:	33 81       	ldd	r19, Z+3	; 0x03
     a5c:	21 50       	subi	r18, 0x01	; 1
     a5e:	31 09       	sbc	r19, r1
     a60:	33 83       	std	Z+3, r19	; 0x03
     a62:	22 83       	std	Z+2, r18	; 0x02
     a64:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <motorA>
     a68:	69 c0       	rjmp	.+210    	; 0xb3c <__vector_4+0x17c>
     a6a:	33 fb       	bst	r19, 3
     a6c:	33 27       	eor	r19, r19
     a6e:	30 f9       	bld	r19, 0
     a70:	21 30       	cpi	r18, 0x01	; 1
     a72:	31 f5       	brne	.+76     	; 0xac0 <__vector_4+0x100>
     a74:	a9 e5       	ldi	r26, 0x59	; 89
     a76:	b2 e0       	ldi	r27, 0x02	; 2
     a78:	2c 91       	ld	r18, X
     a7a:	11 96       	adiw	r26, 0x01	; 1
     a7c:	6c 91       	ld	r22, X
     a7e:	11 97       	sbiw	r26, 0x01	; 1
     a80:	12 96       	adiw	r26, 0x02	; 2
     a82:	4d 91       	ld	r20, X+
     a84:	5c 91       	ld	r21, X
     a86:	13 97       	sbiw	r26, 0x03	; 3
     a88:	22 0f       	add	r18, r18
     a8a:	26 2b       	or	r18, r22
     a8c:	fc 01       	movw	r30, r24
     a8e:	ff 27       	eor	r31, r31
     a90:	ee 0f       	add	r30, r30
     a92:	ff 1f       	adc	r31, r31
     a94:	e3 2b       	or	r30, r19
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	64 e0       	ldi	r22, 0x04	; 4
     a9a:	26 9f       	mul	r18, r22
     a9c:	e0 0d       	add	r30, r0
     a9e:	f1 1d       	adc	r31, r1
     aa0:	11 24       	eor	r1, r1
     aa2:	e0 5d       	subi	r30, 0xD0	; 208
     aa4:	fe 4f       	sbci	r31, 0xFE	; 254
     aa6:	90 81       	ld	r25, Z
     aa8:	49 0f       	add	r20, r25
     aaa:	51 1d       	adc	r21, r1
     aac:	97 fd       	sbrc	r25, 7
     aae:	5a 95       	dec	r21
     ab0:	13 96       	adiw	r26, 0x03	; 3
     ab2:	5c 93       	st	X, r21
     ab4:	4e 93       	st	-X, r20
     ab6:	12 97       	sbiw	r26, 0x02	; 2
     ab8:	8c 93       	st	X, r24
     aba:	11 96       	adiw	r26, 0x01	; 1
     abc:	3c 93       	st	X, r19
     abe:	3e c0       	rjmp	.+124    	; 0xb3c <__vector_4+0x17c>
     ac0:	22 30       	cpi	r18, 0x02	; 2
     ac2:	c9 f5       	brne	.+114    	; 0xb36 <__vector_4+0x176>
     ac4:	83 27       	eor	r24, r19
     ac6:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <motorA>
     aca:	98 17       	cp	r25, r24
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__vector_4+0x17c>
     ace:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <motorA+0x9>
     ad2:	91 30       	cpi	r25, 0x01	; 1
     ad4:	51 f4       	brne	.+20     	; 0xaea <__vector_4+0x12a>
     ad6:	e9 e5       	ldi	r30, 0x59	; 89
     ad8:	f2 e0       	ldi	r31, 0x02	; 2
     ada:	22 81       	ldd	r18, Z+2	; 0x02
     adc:	33 81       	ldd	r19, Z+3	; 0x03
     ade:	2f 5f       	subi	r18, 0xFF	; 255
     ae0:	3f 4f       	sbci	r19, 0xFF	; 255
     ae2:	33 83       	std	Z+3, r19	; 0x03
     ae4:	22 83       	std	Z+2, r18	; 0x02
     ae6:	92 87       	std	Z+10, r25	; 0x0a
     ae8:	23 c0       	rjmp	.+70     	; 0xb30 <__vector_4+0x170>
     aea:	9f 3f       	cpi	r25, 0xFF	; 255
     aec:	51 f4       	brne	.+20     	; 0xb02 <__vector_4+0x142>
     aee:	e9 e5       	ldi	r30, 0x59	; 89
     af0:	f2 e0       	ldi	r31, 0x02	; 2
     af2:	22 81       	ldd	r18, Z+2	; 0x02
     af4:	33 81       	ldd	r19, Z+3	; 0x03
     af6:	21 50       	subi	r18, 0x01	; 1
     af8:	31 09       	sbc	r19, r1
     afa:	33 83       	std	Z+3, r19	; 0x03
     afc:	22 83       	std	Z+2, r18	; 0x02
     afe:	92 87       	std	Z+10, r25	; 0x0a
     b00:	17 c0       	rjmp	.+46     	; 0xb30 <__vector_4+0x170>
     b02:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <motorA+0xa>
     b06:	91 30       	cpi	r25, 0x01	; 1
     b08:	49 f4       	brne	.+18     	; 0xb1c <__vector_4+0x15c>
     b0a:	e9 e5       	ldi	r30, 0x59	; 89
     b0c:	f2 e0       	ldi	r31, 0x02	; 2
     b0e:	22 81       	ldd	r18, Z+2	; 0x02
     b10:	33 81       	ldd	r19, Z+3	; 0x03
     b12:	2f 5f       	subi	r18, 0xFF	; 255
     b14:	3f 4f       	sbci	r19, 0xFF	; 255
     b16:	33 83       	std	Z+3, r19	; 0x03
     b18:	22 83       	std	Z+2, r18	; 0x02
     b1a:	0a c0       	rjmp	.+20     	; 0xb30 <__vector_4+0x170>
     b1c:	9f 3f       	cpi	r25, 0xFF	; 255
     b1e:	41 f4       	brne	.+16     	; 0xb30 <__vector_4+0x170>
     b20:	e9 e5       	ldi	r30, 0x59	; 89
     b22:	f2 e0       	ldi	r31, 0x02	; 2
     b24:	22 81       	ldd	r18, Z+2	; 0x02
     b26:	33 81       	ldd	r19, Z+3	; 0x03
     b28:	21 50       	subi	r18, 0x01	; 1
     b2a:	31 09       	sbc	r19, r1
     b2c:	33 83       	std	Z+3, r19	; 0x03
     b2e:	22 83       	std	Z+2, r18	; 0x02
     b30:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <motorA>
     b34:	03 c0       	rjmp	.+6      	; 0xb3c <__vector_4+0x17c>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <motorA+0x4>
     b3c:	e5 ee       	ldi	r30, 0xE5	; 229
     b3e:	f2 e0       	ldi	r31, 0x02	; 2
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	80 83       	st	Z, r24
     b44:	84 e6       	ldi	r24, 0x64	; 100
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	94 83       	std	Z+4, r25	; 0x04
     b4a:	83 83       	std	Z+3, r24	; 0x03
     b4c:	ff 91       	pop	r31
     b4e:	ef 91       	pop	r30
     b50:	bf 91       	pop	r27
     b52:	af 91       	pop	r26
     b54:	9f 91       	pop	r25
     b56:	8f 91       	pop	r24
     b58:	6f 91       	pop	r22
     b5a:	5f 91       	pop	r21
     b5c:	4f 91       	pop	r20
     b5e:	3f 91       	pop	r19
     b60:	2f 91       	pop	r18
     b62:	0f 90       	pop	r0
     b64:	0f be       	out	0x3f, r0	; 63
     b66:	0f 90       	pop	r0
     b68:	1f 90       	pop	r1
     b6a:	18 95       	reti

00000b6c <__vector_27>:
     b6c:	1f 92       	push	r1
     b6e:	0f 92       	push	r0
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	0f 92       	push	r0
     b74:	11 24       	eor	r1, r1
     b76:	2f 93       	push	r18
     b78:	3f 93       	push	r19
     b7a:	4f 93       	push	r20
     b7c:	5f 93       	push	r21
     b7e:	6f 93       	push	r22
     b80:	8f 93       	push	r24
     b82:	9f 93       	push	r25
     b84:	af 93       	push	r26
     b86:	bf 93       	push	r27
     b88:	ef 93       	push	r30
     b8a:	ff 93       	push	r31
     b8c:	2c b1       	in	r18, 0x0c	; 12
     b8e:	21 fb       	bst	r18, 1
     b90:	88 27       	eor	r24, r24
     b92:	80 f9       	bld	r24, 0
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	3c b1       	in	r19, 0x0c	; 12
     b98:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <motorB+0x4>
     b9c:	21 11       	cpse	r18, r1
     b9e:	3b c0       	rjmp	.+118    	; 0xc16 <__vector_27+0xaa>
     ba0:	20 91 ea 02 	lds	r18, 0x02EA	; 0x8002ea <motorB>
     ba4:	28 17       	cp	r18, r24
     ba6:	09 f4       	brne	.+2      	; 0xbaa <__vector_27+0x3e>
     ba8:	9d c0       	rjmp	.+314    	; 0xce4 <__vector_27+0x178>
     baa:	20 91 f3 02 	lds	r18, 0x02F3	; 0x8002f3 <motorB+0x9>
     bae:	21 30       	cpi	r18, 0x01	; 1
     bb0:	59 f4       	brne	.+22     	; 0xbc8 <__vector_27+0x5c>
     bb2:	ea ee       	ldi	r30, 0xEA	; 234
     bb4:	f2 e0       	ldi	r31, 0x02	; 2
     bb6:	22 81       	ldd	r18, Z+2	; 0x02
     bb8:	33 81       	ldd	r19, Z+3	; 0x03
     bba:	2f 5f       	subi	r18, 0xFF	; 255
     bbc:	3f 4f       	sbci	r19, 0xFF	; 255
     bbe:	33 83       	std	Z+3, r19	; 0x03
     bc0:	22 83       	std	Z+2, r18	; 0x02
     bc2:	21 e0       	ldi	r18, 0x01	; 1
     bc4:	22 87       	std	Z+10, r18	; 0x0a
     bc6:	24 c0       	rjmp	.+72     	; 0xc10 <__vector_27+0xa4>
     bc8:	2f 3f       	cpi	r18, 0xFF	; 255
     bca:	59 f4       	brne	.+22     	; 0xbe2 <__vector_27+0x76>
     bcc:	ea ee       	ldi	r30, 0xEA	; 234
     bce:	f2 e0       	ldi	r31, 0x02	; 2
     bd0:	22 81       	ldd	r18, Z+2	; 0x02
     bd2:	33 81       	ldd	r19, Z+3	; 0x03
     bd4:	21 50       	subi	r18, 0x01	; 1
     bd6:	31 09       	sbc	r19, r1
     bd8:	33 83       	std	Z+3, r19	; 0x03
     bda:	22 83       	std	Z+2, r18	; 0x02
     bdc:	2f ef       	ldi	r18, 0xFF	; 255
     bde:	22 87       	std	Z+10, r18	; 0x0a
     be0:	17 c0       	rjmp	.+46     	; 0xc10 <__vector_27+0xa4>
     be2:	20 91 f4 02 	lds	r18, 0x02F4	; 0x8002f4 <motorB+0xa>
     be6:	21 30       	cpi	r18, 0x01	; 1
     be8:	49 f4       	brne	.+18     	; 0xbfc <__vector_27+0x90>
     bea:	ea ee       	ldi	r30, 0xEA	; 234
     bec:	f2 e0       	ldi	r31, 0x02	; 2
     bee:	22 81       	ldd	r18, Z+2	; 0x02
     bf0:	33 81       	ldd	r19, Z+3	; 0x03
     bf2:	2f 5f       	subi	r18, 0xFF	; 255
     bf4:	3f 4f       	sbci	r19, 0xFF	; 255
     bf6:	33 83       	std	Z+3, r19	; 0x03
     bf8:	22 83       	std	Z+2, r18	; 0x02
     bfa:	0a c0       	rjmp	.+20     	; 0xc10 <__vector_27+0xa4>
     bfc:	2f 3f       	cpi	r18, 0xFF	; 255
     bfe:	41 f4       	brne	.+16     	; 0xc10 <__vector_27+0xa4>
     c00:	ea ee       	ldi	r30, 0xEA	; 234
     c02:	f2 e0       	ldi	r31, 0x02	; 2
     c04:	22 81       	ldd	r18, Z+2	; 0x02
     c06:	33 81       	ldd	r19, Z+3	; 0x03
     c08:	21 50       	subi	r18, 0x01	; 1
     c0a:	31 09       	sbc	r19, r1
     c0c:	33 83       	std	Z+3, r19	; 0x03
     c0e:	22 83       	std	Z+2, r18	; 0x02
     c10:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <motorB>
     c14:	67 c0       	rjmp	.+206    	; 0xce4 <__vector_27+0x178>
     c16:	31 70       	andi	r19, 0x01	; 1
     c18:	21 30       	cpi	r18, 0x01	; 1
     c1a:	31 f5       	brne	.+76     	; 0xc68 <__vector_27+0xfc>
     c1c:	aa ee       	ldi	r26, 0xEA	; 234
     c1e:	b2 e0       	ldi	r27, 0x02	; 2
     c20:	2c 91       	ld	r18, X
     c22:	11 96       	adiw	r26, 0x01	; 1
     c24:	6c 91       	ld	r22, X
     c26:	11 97       	sbiw	r26, 0x01	; 1
     c28:	12 96       	adiw	r26, 0x02	; 2
     c2a:	4d 91       	ld	r20, X+
     c2c:	5c 91       	ld	r21, X
     c2e:	13 97       	sbiw	r26, 0x03	; 3
     c30:	22 0f       	add	r18, r18
     c32:	26 2b       	or	r18, r22
     c34:	fc 01       	movw	r30, r24
     c36:	ff 27       	eor	r31, r31
     c38:	ee 0f       	add	r30, r30
     c3a:	ff 1f       	adc	r31, r31
     c3c:	e3 2b       	or	r30, r19
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	64 e0       	ldi	r22, 0x04	; 4
     c42:	26 9f       	mul	r18, r22
     c44:	e0 0d       	add	r30, r0
     c46:	f1 1d       	adc	r31, r1
     c48:	11 24       	eor	r1, r1
     c4a:	e0 5e       	subi	r30, 0xE0	; 224
     c4c:	fe 4f       	sbci	r31, 0xFE	; 254
     c4e:	90 81       	ld	r25, Z
     c50:	49 0f       	add	r20, r25
     c52:	51 1d       	adc	r21, r1
     c54:	97 fd       	sbrc	r25, 7
     c56:	5a 95       	dec	r21
     c58:	13 96       	adiw	r26, 0x03	; 3
     c5a:	5c 93       	st	X, r21
     c5c:	4e 93       	st	-X, r20
     c5e:	12 97       	sbiw	r26, 0x02	; 2
     c60:	8c 93       	st	X, r24
     c62:	11 96       	adiw	r26, 0x01	; 1
     c64:	3c 93       	st	X, r19
     c66:	3e c0       	rjmp	.+124    	; 0xce4 <__vector_27+0x178>
     c68:	22 30       	cpi	r18, 0x02	; 2
     c6a:	c9 f5       	brne	.+114    	; 0xcde <__vector_27+0x172>
     c6c:	83 27       	eor	r24, r19
     c6e:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <motorB>
     c72:	98 17       	cp	r25, r24
     c74:	b9 f1       	breq	.+110    	; 0xce4 <__vector_27+0x178>
     c76:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <motorB+0x9>
     c7a:	91 30       	cpi	r25, 0x01	; 1
     c7c:	51 f4       	brne	.+20     	; 0xc92 <__vector_27+0x126>
     c7e:	ea ee       	ldi	r30, 0xEA	; 234
     c80:	f2 e0       	ldi	r31, 0x02	; 2
     c82:	22 81       	ldd	r18, Z+2	; 0x02
     c84:	33 81       	ldd	r19, Z+3	; 0x03
     c86:	2f 5f       	subi	r18, 0xFF	; 255
     c88:	3f 4f       	sbci	r19, 0xFF	; 255
     c8a:	33 83       	std	Z+3, r19	; 0x03
     c8c:	22 83       	std	Z+2, r18	; 0x02
     c8e:	92 87       	std	Z+10, r25	; 0x0a
     c90:	23 c0       	rjmp	.+70     	; 0xcd8 <__vector_27+0x16c>
     c92:	9f 3f       	cpi	r25, 0xFF	; 255
     c94:	51 f4       	brne	.+20     	; 0xcaa <__vector_27+0x13e>
     c96:	ea ee       	ldi	r30, 0xEA	; 234
     c98:	f2 e0       	ldi	r31, 0x02	; 2
     c9a:	22 81       	ldd	r18, Z+2	; 0x02
     c9c:	33 81       	ldd	r19, Z+3	; 0x03
     c9e:	21 50       	subi	r18, 0x01	; 1
     ca0:	31 09       	sbc	r19, r1
     ca2:	33 83       	std	Z+3, r19	; 0x03
     ca4:	22 83       	std	Z+2, r18	; 0x02
     ca6:	92 87       	std	Z+10, r25	; 0x0a
     ca8:	17 c0       	rjmp	.+46     	; 0xcd8 <__vector_27+0x16c>
     caa:	90 91 f4 02 	lds	r25, 0x02F4	; 0x8002f4 <motorB+0xa>
     cae:	91 30       	cpi	r25, 0x01	; 1
     cb0:	49 f4       	brne	.+18     	; 0xcc4 <__vector_27+0x158>
     cb2:	ea ee       	ldi	r30, 0xEA	; 234
     cb4:	f2 e0       	ldi	r31, 0x02	; 2
     cb6:	22 81       	ldd	r18, Z+2	; 0x02
     cb8:	33 81       	ldd	r19, Z+3	; 0x03
     cba:	2f 5f       	subi	r18, 0xFF	; 255
     cbc:	3f 4f       	sbci	r19, 0xFF	; 255
     cbe:	33 83       	std	Z+3, r19	; 0x03
     cc0:	22 83       	std	Z+2, r18	; 0x02
     cc2:	0a c0       	rjmp	.+20     	; 0xcd8 <__vector_27+0x16c>
     cc4:	9f 3f       	cpi	r25, 0xFF	; 255
     cc6:	41 f4       	brne	.+16     	; 0xcd8 <__vector_27+0x16c>
     cc8:	ea ee       	ldi	r30, 0xEA	; 234
     cca:	f2 e0       	ldi	r31, 0x02	; 2
     ccc:	22 81       	ldd	r18, Z+2	; 0x02
     cce:	33 81       	ldd	r19, Z+3	; 0x03
     cd0:	21 50       	subi	r18, 0x01	; 1
     cd2:	31 09       	sbc	r19, r1
     cd4:	33 83       	std	Z+3, r19	; 0x03
     cd6:	22 83       	std	Z+2, r18	; 0x02
     cd8:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <motorB>
     cdc:	03 c0       	rjmp	.+6      	; 0xce4 <__vector_27+0x178>
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <motorB+0x4>
     ce4:	e5 ee       	ldi	r30, 0xE5	; 229
     ce6:	f2 e0       	ldi	r31, 0x02	; 2
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	80 83       	st	Z, r24
     cec:	84 e6       	ldi	r24, 0x64	; 100
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	94 83       	std	Z+4, r25	; 0x04
     cf2:	83 83       	std	Z+3, r24	; 0x03
     cf4:	ff 91       	pop	r31
     cf6:	ef 91       	pop	r30
     cf8:	bf 91       	pop	r27
     cfa:	af 91       	pop	r26
     cfc:	9f 91       	pop	r25
     cfe:	8f 91       	pop	r24
     d00:	6f 91       	pop	r22
     d02:	5f 91       	pop	r21
     d04:	4f 91       	pop	r20
     d06:	3f 91       	pop	r19
     d08:	2f 91       	pop	r18
     d0a:	0f 90       	pop	r0
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	0f 90       	pop	r0
     d10:	1f 90       	pop	r1
     d12:	18 95       	reti

00000d14 <__vector_9>:
     d14:	1f 92       	push	r1
     d16:	0f 92       	push	r0
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	0f 92       	push	r0
     d1c:	11 24       	eor	r1, r1
     d1e:	8f 93       	push	r24
     d20:	9f 93       	push	r25
     d22:	ef 93       	push	r30
     d24:	ff 93       	push	r31
     d26:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <motorControlCount.2413>
     d2a:	81 11       	cpse	r24, r1
     d2c:	04 c0       	rjmp	.+8      	; 0xd36 <__vector_9+0x22>
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <motorControlCount.2413>
     d34:	07 c0       	rjmp	.+14     	; 0xd44 <__vector_9+0x30>
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <motorA+0xf>
     d3c:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <motorB+0xf>
     d40:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <motorControlCount.2413>
     d44:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <ledR+0x3>
     d48:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <ledR+0x4>
     d4c:	89 2b       	or	r24, r25
     d4e:	41 f0       	breq	.+16     	; 0xd60 <__vector_9+0x4c>
     d50:	e5 e2       	ldi	r30, 0x25	; 37
     d52:	f3 e0       	ldi	r31, 0x03	; 3
     d54:	83 81       	ldd	r24, Z+3	; 0x03
     d56:	94 81       	ldd	r25, Z+4	; 0x04
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	94 83       	std	Z+4, r25	; 0x04
     d5c:	83 83       	std	Z+3, r24	; 0x03
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <__vector_9+0x50>
     d60:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <ledR>
     d64:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <ledG+0x3>
     d68:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <ledG+0x4>
     d6c:	89 2b       	or	r24, r25
     d6e:	41 f0       	breq	.+16     	; 0xd80 <__vector_9+0x6c>
     d70:	e5 ee       	ldi	r30, 0xE5	; 229
     d72:	f2 e0       	ldi	r31, 0x02	; 2
     d74:	83 81       	ldd	r24, Z+3	; 0x03
     d76:	94 81       	ldd	r25, Z+4	; 0x04
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	94 83       	std	Z+4, r25	; 0x04
     d7c:	83 83       	std	Z+3, r24	; 0x03
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <__vector_9+0x70>
     d80:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <ledG>
     d84:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <ledB+0x3>
     d88:	90 91 be 02 	lds	r25, 0x02BE	; 0x8002be <ledB+0x4>
     d8c:	89 2b       	or	r24, r25
     d8e:	41 f0       	breq	.+16     	; 0xda0 <__vector_9+0x8c>
     d90:	ea eb       	ldi	r30, 0xBA	; 186
     d92:	f2 e0       	ldi	r31, 0x02	; 2
     d94:	83 81       	ldd	r24, Z+3	; 0x03
     d96:	94 81       	ldd	r25, Z+4	; 0x04
     d98:	01 97       	sbiw	r24, 0x01	; 1
     d9a:	94 83       	std	Z+4, r25	; 0x04
     d9c:	83 83       	std	Z+3, r24	; 0x03
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <__vector_9+0x90>
     da0:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <ledB>
     da4:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <buttonA+0x4>
     da8:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <buttonA+0x5>
     dac:	18 16       	cp	r1, r24
     dae:	19 06       	cpc	r1, r25
     db0:	3c f4       	brge	.+14     	; 0xdc0 <__vector_9+0xac>
     db2:	e3 e5       	ldi	r30, 0x53	; 83
     db4:	f2 e0       	ldi	r31, 0x02	; 2
     db6:	84 81       	ldd	r24, Z+4	; 0x04
     db8:	95 81       	ldd	r25, Z+5	; 0x05
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	95 83       	std	Z+5, r25	; 0x05
     dbe:	84 83       	std	Z+4, r24	; 0x04
     dc0:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <buttonB+0x4>
     dc4:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <buttonB+0x5>
     dc8:	18 16       	cp	r1, r24
     dca:	19 06       	cpc	r1, r25
     dcc:	3c f4       	brge	.+14     	; 0xddc <__vector_9+0xc8>
     dce:	ef ed       	ldi	r30, 0xDF	; 223
     dd0:	f2 e0       	ldi	r31, 0x02	; 2
     dd2:	84 81       	ldd	r24, Z+4	; 0x04
     dd4:	95 81       	ldd	r25, Z+5	; 0x05
     dd6:	01 97       	sbiw	r24, 0x01	; 1
     dd8:	95 83       	std	Z+5, r25	; 0x05
     dda:	84 83       	std	Z+4, r24	; 0x04
     ddc:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <buttonC+0x4>
     de0:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <buttonC+0x5>
     de4:	18 16       	cp	r1, r24
     de6:	19 06       	cpc	r1, r25
     de8:	3c f4       	brge	.+14     	; 0xdf8 <__vector_9+0xe4>
     dea:	eb e7       	ldi	r30, 0x7B	; 123
     dec:	f2 e0       	ldi	r31, 0x02	; 2
     dee:	84 81       	ldd	r24, Z+4	; 0x04
     df0:	95 81       	ldd	r25, Z+5	; 0x05
     df2:	01 97       	sbiw	r24, 0x01	; 1
     df4:	95 83       	std	Z+5, r25	; 0x05
     df6:	84 83       	std	Z+4, r24	; 0x04
     df8:	ff 91       	pop	r31
     dfa:	ef 91       	pop	r30
     dfc:	9f 91       	pop	r25
     dfe:	8f 91       	pop	r24
     e00:	0f 90       	pop	r0
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	0f 90       	pop	r0
     e06:	1f 90       	pop	r1
     e08:	18 95       	reti

00000e0a <__vector_21>:
     e0a:	1f 92       	push	r1
     e0c:	0f 92       	push	r0
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	0f 92       	push	r0
     e12:	11 24       	eor	r1, r1
     e14:	8f 93       	push	r24
     e16:	ef 93       	push	r30
     e18:	ff 93       	push	r31
     e1a:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <vdiv+0xa>
     e1e:	82 30       	cpi	r24, 0x02	; 2
     e20:	58 f0       	brcs	.+22     	; 0xe38 <__vector_21+0x2e>
     e22:	e1 e8       	ldi	r30, 0x81	; 129
     e24:	f2 e0       	ldi	r31, 0x02	; 2
     e26:	82 85       	ldd	r24, Z+10	; 0x0a
     e28:	81 50       	subi	r24, 0x01	; 1
     e2a:	82 87       	std	Z+10, r24	; 0x0a
     e2c:	ea e7       	ldi	r30, 0x7A	; 122
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	80 64       	ori	r24, 0x40	; 64
     e34:	80 83       	st	Z, r24
     e36:	08 c0       	rjmp	.+16     	; 0xe48 <__vector_21+0x3e>
     e38:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <vdiv+0xa>
     e3c:	81 30       	cpi	r24, 0x01	; 1
     e3e:	21 f4       	brne	.+8      	; 0xe48 <__vector_21+0x3e>
     e40:	e1 e8       	ldi	r30, 0x81	; 129
     e42:	f2 e0       	ldi	r31, 0x02	; 2
     e44:	83 87       	std	Z+11, r24	; 0x0b
     e46:	12 86       	std	Z+10, r1	; 0x0a
     e48:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <csense+0xa>
     e4c:	82 30       	cpi	r24, 0x02	; 2
     e4e:	58 f0       	brcs	.+22     	; 0xe66 <__vector_21+0x5c>
     e50:	ee ea       	ldi	r30, 0xAE	; 174
     e52:	f2 e0       	ldi	r31, 0x02	; 2
     e54:	82 85       	ldd	r24, Z+10	; 0x0a
     e56:	81 50       	subi	r24, 0x01	; 1
     e58:	82 87       	std	Z+10, r24	; 0x0a
     e5a:	ea e7       	ldi	r30, 0x7A	; 122
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	80 64       	ori	r24, 0x40	; 64
     e62:	80 83       	st	Z, r24
     e64:	08 c0       	rjmp	.+16     	; 0xe76 <__vector_21+0x6c>
     e66:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <csense+0xa>
     e6a:	81 30       	cpi	r24, 0x01	; 1
     e6c:	21 f4       	brne	.+8      	; 0xe76 <__vector_21+0x6c>
     e6e:	ee ea       	ldi	r30, 0xAE	; 174
     e70:	f2 e0       	ldi	r31, 0x02	; 2
     e72:	83 87       	std	Z+11, r24	; 0x0b
     e74:	12 86       	std	Z+10, r1	; 0x0a
     e76:	ff 91       	pop	r31
     e78:	ef 91       	pop	r30
     e7a:	8f 91       	pop	r24
     e7c:	0f 90       	pop	r0
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	0f 90       	pop	r0
     e82:	1f 90       	pop	r1
     e84:	18 95       	reti

00000e86 <buttonLogic>:
     e86:	fc 01       	movw	r30, r24
     e88:	84 81       	ldd	r24, Z+4	; 0x04
     e8a:	95 81       	ldd	r25, Z+5	; 0x05
     e8c:	89 2b       	or	r24, r25
     e8e:	a1 f4       	brne	.+40     	; 0xeb8 <buttonLogic+0x32>
     e90:	60 83       	st	Z, r22
     e92:	61 11       	cpse	r22, r1
     e94:	05 c0       	rjmp	.+10     	; 0xea0 <buttonLogic+0x1a>
     e96:	91 81       	ldd	r25, Z+1	; 0x01
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	89 27       	eor	r24, r25
     e9c:	81 83       	std	Z+1, r24	; 0x01
     e9e:	08 c0       	rjmp	.+16     	; 0xeb0 <buttonLogic+0x2a>
     ea0:	61 30       	cpi	r22, 0x01	; 1
     ea2:	31 f4       	brne	.+12     	; 0xeb0 <buttonLogic+0x2a>
     ea4:	82 81       	ldd	r24, Z+2	; 0x02
     ea6:	81 30       	cpi	r24, 0x01	; 1
     ea8:	19 f4       	brne	.+6      	; 0xeb0 <buttonLogic+0x2a>
     eaa:	91 81       	ldd	r25, Z+1	; 0x01
     eac:	89 27       	eor	r24, r25
     eae:	81 83       	std	Z+1, r24	; 0x01
     eb0:	84 ef       	ldi	r24, 0xF4	; 244
     eb2:	91 e0       	ldi	r25, 0x01	; 1
     eb4:	95 83       	std	Z+5, r25	; 0x05
     eb6:	84 83       	std	Z+4, r24	; 0x04
     eb8:	08 95       	ret

00000eba <__vector_3>:
     eba:	1f 92       	push	r1
     ebc:	0f 92       	push	r0
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	0f 92       	push	r0
     ec2:	11 24       	eor	r1, r1
     ec4:	2f 93       	push	r18
     ec6:	3f 93       	push	r19
     ec8:	4f 93       	push	r20
     eca:	5f 93       	push	r21
     ecc:	6f 93       	push	r22
     ece:	7f 93       	push	r23
     ed0:	8f 93       	push	r24
     ed2:	9f 93       	push	r25
     ed4:	af 93       	push	r26
     ed6:	bf 93       	push	r27
     ed8:	ef 93       	push	r30
     eda:	ff 93       	push	r31
     edc:	63 b1       	in	r22, 0x03	; 3
     ede:	61 70       	andi	r22, 0x01	; 1
     ee0:	83 e5       	ldi	r24, 0x53	; 83
     ee2:	92 e0       	ldi	r25, 0x02	; 2
     ee4:	0e 94 43 07 	call	0xe86	; 0xe86 <buttonLogic>
     ee8:	ff 91       	pop	r31
     eea:	ef 91       	pop	r30
     eec:	bf 91       	pop	r27
     eee:	af 91       	pop	r26
     ef0:	9f 91       	pop	r25
     ef2:	8f 91       	pop	r24
     ef4:	7f 91       	pop	r23
     ef6:	6f 91       	pop	r22
     ef8:	5f 91       	pop	r21
     efa:	4f 91       	pop	r20
     efc:	3f 91       	pop	r19
     efe:	2f 91       	pop	r18
     f00:	0f 90       	pop	r0
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	0f 90       	pop	r0
     f06:	1f 90       	pop	r1
     f08:	18 95       	reti

00000f0a <__vector_5>:
     f0a:	1f 92       	push	r1
     f0c:	0f 92       	push	r0
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	0f 92       	push	r0
     f12:	11 24       	eor	r1, r1
     f14:	2f 93       	push	r18
     f16:	3f 93       	push	r19
     f18:	4f 93       	push	r20
     f1a:	5f 93       	push	r21
     f1c:	6f 93       	push	r22
     f1e:	7f 93       	push	r23
     f20:	8f 93       	push	r24
     f22:	9f 93       	push	r25
     f24:	af 93       	push	r26
     f26:	bf 93       	push	r27
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	ef 93       	push	r30
     f2e:	ff 93       	push	r31
     f30:	69 b1       	in	r22, 0x09	; 9
     f32:	66 1f       	adc	r22, r22
     f34:	66 27       	eor	r22, r22
     f36:	66 1f       	adc	r22, r22
     f38:	c9 b1       	in	r28, 0x09	; 9
     f3a:	c2 95       	swap	r28
     f3c:	c1 70       	andi	r28, 0x01	; 1
     f3e:	dc 2f       	mov	r29, r28
     f40:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <buttonB>
     f44:	86 17       	cp	r24, r22
     f46:	21 f0       	breq	.+8      	; 0xf50 <__vector_5+0x46>
     f48:	8f ed       	ldi	r24, 0xDF	; 223
     f4a:	92 e0       	ldi	r25, 0x02	; 2
     f4c:	0e 94 43 07 	call	0xe86	; 0xe86 <buttonLogic>
     f50:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <buttonC>
     f54:	8d 17       	cp	r24, r29
     f56:	29 f0       	breq	.+10     	; 0xf62 <__vector_5+0x58>
     f58:	6c 2f       	mov	r22, r28
     f5a:	8b e7       	ldi	r24, 0x7B	; 123
     f5c:	92 e0       	ldi	r25, 0x02	; 2
     f5e:	0e 94 43 07 	call	0xe86	; 0xe86 <buttonLogic>
     f62:	ff 91       	pop	r31
     f64:	ef 91       	pop	r30
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	bf 91       	pop	r27
     f6c:	af 91       	pop	r26
     f6e:	9f 91       	pop	r25
     f70:	8f 91       	pop	r24
     f72:	7f 91       	pop	r23
     f74:	6f 91       	pop	r22
     f76:	5f 91       	pop	r21
     f78:	4f 91       	pop	r20
     f7a:	3f 91       	pop	r19
     f7c:	2f 91       	pop	r18
     f7e:	0f 90       	pop	r0
     f80:	0f be       	out	0x3f, r0	; 63
     f82:	0f 90       	pop	r0
     f84:	1f 90       	pop	r1
     f86:	18 95       	reti

00000f88 <init_structs>:
     f88:	cf 92       	push	r12
     f8a:	df 92       	push	r13
     f8c:	ef 92       	push	r14
     f8e:	ff 92       	push	r15
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	e9 e5       	ldi	r30, 0x59	; 89
     f96:	f2 e0       	ldi	r31, 0x02	; 2
     f98:	c0 e0       	ldi	r28, 0x00	; 0
     f9a:	d3 e2       	ldi	r29, 0x23	; 35
     f9c:	d1 8b       	std	Z+17, r29	; 0x11
     f9e:	c0 8b       	std	Z+16, r28	; 0x10
     fa0:	13 8a       	std	Z+19, r1	; 0x13
     fa2:	12 8a       	std	Z+18, r1	; 0x12
     fa4:	a0 e0       	ldi	r26, 0x00	; 0
     fa6:	b1 e0       	ldi	r27, 0x01	; 1
     fa8:	b5 8b       	std	Z+21, r27	; 0x15
     faa:	a4 8b       	std	Z+20, r26	; 0x14
     fac:	23 e0       	ldi	r18, 0x03	; 3
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	35 8f       	std	Z+29, r19	; 0x1d
     fb2:	24 8f       	std	Z+28, r18	; 0x1c
     fb4:	4f ef       	ldi	r20, 0xFF	; 255
     fb6:	5f ef       	ldi	r21, 0xFF	; 255
     fb8:	6f ef       	ldi	r22, 0xFF	; 255
     fba:	7f e3       	ldi	r23, 0x3F	; 63
     fbc:	46 8f       	std	Z+30, r20	; 0x1e
     fbe:	57 8f       	std	Z+31, r21	; 0x1f
     fc0:	60 a3       	std	Z+32, r22	; 0x20
     fc2:	71 a3       	std	Z+33, r23	; 0x21
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	84 83       	std	Z+4, r24	; 0x04
     fc8:	ea ee       	ldi	r30, 0xEA	; 234
     fca:	f2 e0       	ldi	r31, 0x02	; 2
     fcc:	d1 8b       	std	Z+17, r29	; 0x11
     fce:	c0 8b       	std	Z+16, r28	; 0x10
     fd0:	13 8a       	std	Z+19, r1	; 0x13
     fd2:	12 8a       	std	Z+18, r1	; 0x12
     fd4:	b5 8b       	std	Z+21, r27	; 0x15
     fd6:	a4 8b       	std	Z+20, r26	; 0x14
     fd8:	35 8f       	std	Z+29, r19	; 0x1d
     fda:	24 8f       	std	Z+28, r18	; 0x1c
     fdc:	46 8f       	std	Z+30, r20	; 0x1e
     fde:	57 8f       	std	Z+31, r21	; 0x1f
     fe0:	60 a3       	std	Z+32, r22	; 0x20
     fe2:	71 a3       	std	Z+33, r23	; 0x21
     fe4:	84 83       	std	Z+4, r24	; 0x04
     fe6:	ed e8       	ldi	r30, 0x8D	; 141
     fe8:	f2 e0       	ldi	r31, 0x02	; 2
     fea:	0f 2e       	mov	r0, r31
     fec:	fa e5       	ldi	r31, 0x5A	; 90
     fee:	cf 2e       	mov	r12, r31
     ff0:	d1 2c       	mov	r13, r1
     ff2:	e1 2c       	mov	r14, r1
     ff4:	f1 2c       	mov	r15, r1
     ff6:	f0 2d       	mov	r31, r0
     ff8:	c1 82       	std	Z+1, r12	; 0x01
     ffa:	d2 82       	std	Z+2, r13	; 0x02
     ffc:	e3 82       	std	Z+3, r14	; 0x03
     ffe:	f4 82       	std	Z+4, r15	; 0x04
    1000:	15 82       	std	Z+5, r1	; 0x05
    1002:	16 82       	std	Z+6, r1	; 0x06
    1004:	17 82       	std	Z+7, r1	; 0x07
    1006:	10 86       	std	Z+8, r1	; 0x08
    1008:	44 eb       	ldi	r20, 0xB4	; 180
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	41 87       	std	Z+9, r20	; 0x09
    1012:	52 87       	std	Z+10, r21	; 0x0a
    1014:	63 87       	std	Z+11, r22	; 0x0b
    1016:	74 87       	std	Z+12, r23	; 0x0c
    1018:	2c ed       	ldi	r18, 0xDC	; 220
    101a:	35 e0       	ldi	r19, 0x05	; 5
    101c:	36 87       	std	Z+14, r19	; 0x0e
    101e:	25 87       	std	Z+13, r18	; 0x0d
    1020:	88 eb       	ldi	r24, 0xB8	; 184
    1022:	9b e0       	ldi	r25, 0x0B	; 11
    1024:	90 8b       	std	Z+16, r25	; 0x10
    1026:	87 87       	std	Z+15, r24	; 0x0f
    1028:	ec e0       	ldi	r30, 0x0C	; 12
    102a:	f3 e0       	ldi	r31, 0x03	; 3
    102c:	c1 82       	std	Z+1, r12	; 0x01
    102e:	d2 82       	std	Z+2, r13	; 0x02
    1030:	e3 82       	std	Z+3, r14	; 0x03
    1032:	f4 82       	std	Z+4, r15	; 0x04
    1034:	15 82       	std	Z+5, r1	; 0x05
    1036:	16 82       	std	Z+6, r1	; 0x06
    1038:	17 82       	std	Z+7, r1	; 0x07
    103a:	10 86       	std	Z+8, r1	; 0x08
    103c:	41 87       	std	Z+9, r20	; 0x09
    103e:	52 87       	std	Z+10, r21	; 0x0a
    1040:	63 87       	std	Z+11, r22	; 0x0b
    1042:	74 87       	std	Z+12, r23	; 0x0c
    1044:	36 87       	std	Z+14, r19	; 0x0e
    1046:	25 87       	std	Z+13, r18	; 0x0d
    1048:	90 8b       	std	Z+16, r25	; 0x10
    104a:	87 87       	std	Z+15, r24	; 0x0f
    104c:	ee e9       	ldi	r30, 0x9E	; 158
    104e:	f2 e0       	ldi	r31, 0x02	; 2
    1050:	80 e4       	ldi	r24, 0x40	; 64
    1052:	80 83       	st	Z, r24
    1054:	12 82       	std	Z+2, r1	; 0x02
    1056:	13 82       	std	Z+3, r1	; 0x03
    1058:	14 82       	std	Z+4, r1	; 0x04
    105a:	11 82       	std	Z+1, r1	; 0x01
    105c:	c3 e5       	ldi	r28, 0x53	; 83
    105e:	d2 e0       	ldi	r29, 0x02	; 2
    1060:	1a 82       	std	Y+2, r1	; 0x02
    1062:	af ed       	ldi	r26, 0xDF	; 223
    1064:	b2 e0       	ldi	r27, 0x02	; 2
    1066:	12 96       	adiw	r26, 0x02	; 2
    1068:	1c 92       	st	X, r1
    106a:	12 97       	sbiw	r26, 0x02	; 2
    106c:	eb e7       	ldi	r30, 0x7B	; 123
    106e:	f2 e0       	ldi	r31, 0x02	; 2
    1070:	12 82       	std	Z+2, r1	; 0x02
    1072:	1b 82       	std	Y+3, r1	; 0x03
    1074:	13 96       	adiw	r26, 0x03	; 3
    1076:	1c 92       	st	X, r1
    1078:	13 82       	std	Z+3, r1	; 0x03
    107a:	e1 e8       	ldi	r30, 0x81	; 129
    107c:	f2 e0       	ldi	r31, 0x02	; 2
    107e:	12 86       	std	Z+10, r1	; 0x0a
    1080:	82 ee       	ldi	r24, 0xE2	; 226
    1082:	95 e2       	ldi	r25, 0x25	; 37
    1084:	a0 e8       	ldi	r26, 0x80	; 128
    1086:	b1 e4       	ldi	r27, 0x41	; 65
    1088:	86 83       	std	Z+6, r24	; 0x06
    108a:	97 83       	std	Z+7, r25	; 0x07
    108c:	a0 87       	std	Z+8, r26	; 0x08
    108e:	b1 87       	std	Z+9, r27	; 0x09
    1090:	ee ea       	ldi	r30, 0xAE	; 174
    1092:	f2 e0       	ldi	r31, 0x02	; 2
    1094:	12 86       	std	Z+10, r1	; 0x0a
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	90 e4       	ldi	r25, 0x40	; 64
    109a:	ae e4       	ldi	r26, 0x4E	; 78
    109c:	b0 e4       	ldi	r27, 0x40	; 64
    109e:	86 83       	std	Z+6, r24	; 0x06
    10a0:	97 83       	std	Z+7, r25	; 0x07
    10a2:	a0 87       	std	Z+8, r26	; 0x08
    10a4:	b1 87       	std	Z+9, r27	; 0x09
    10a6:	ed e1       	ldi	r30, 0x1D	; 29
    10a8:	f3 e0       	ldi	r31, 0x03	; 3
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	a0 ed       	ldi	r26, 0xD0	; 208
    10b0:	b0 e4       	ldi	r27, 0x40	; 64
    10b2:	80 83       	st	Z, r24
    10b4:	91 83       	std	Z+1, r25	; 0x01
    10b6:	a2 83       	std	Z+2, r26	; 0x02
    10b8:	b3 83       	std	Z+3, r27	; 0x03
    10ba:	15 82       	std	Z+5, r1	; 0x05
    10bc:	14 82       	std	Z+4, r1	; 0x04
    10be:	88 e8       	ldi	r24, 0x88	; 136
    10c0:	93 e1       	ldi	r25, 0x13	; 19
    10c2:	97 83       	std	Z+7, r25	; 0x07
    10c4:	86 83       	std	Z+6, r24	; 0x06
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	ff 90       	pop	r15
    10cc:	ef 90       	pop	r14
    10ce:	df 90       	pop	r13
    10d0:	cf 90       	pop	r12
    10d2:	08 95       	ret

000010d4 <init>:
    10d4:	e4 e6       	ldi	r30, 0x64	; 100
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	86 70       	andi	r24, 0x06	; 6
    10dc:	80 83       	st	Z, r24
    10de:	84 b1       	in	r24, 0x04	; 4
    10e0:	86 60       	ori	r24, 0x06	; 6
    10e2:	84 b9       	out	0x04, r24	; 4
    10e4:	87 b1       	in	r24, 0x07	; 7
    10e6:	83 60       	ori	r24, 0x03	; 3
    10e8:	87 b9       	out	0x07, r24	; 7
    10ea:	e0 e8       	ldi	r30, 0x80	; 128
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	82 6a       	ori	r24, 0xA2	; 162
    10f2:	80 83       	st	Z, r24
    10f4:	e1 e8       	ldi	r30, 0x81	; 129
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	89 61       	ori	r24, 0x19	; 25
    10fc:	80 83       	st	Z, r24
    10fe:	8f ef       	ldi	r24, 0xFF	; 255
    1100:	9f ef       	ldi	r25, 0xFF	; 255
    1102:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    1106:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    110a:	87 b1       	in	r24, 0x07	; 7
    110c:	83 7f       	andi	r24, 0xF3	; 243
    110e:	87 b9       	out	0x07, r24	; 7
    1110:	88 b1       	in	r24, 0x08	; 8
    1112:	8c 60       	ori	r24, 0x0C	; 12
    1114:	88 b9       	out	0x08, r24	; 8
    1116:	8c e0       	ldi	r24, 0x0C	; 12
    1118:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
    111c:	e8 e6       	ldi	r30, 0x68	; 104
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	82 60       	ori	r24, 0x02	; 2
    1124:	80 83       	st	Z, r24
    1126:	8d b1       	in	r24, 0x0d	; 13
    1128:	8c 7f       	andi	r24, 0xFC	; 252
    112a:	8d b9       	out	0x0d, r24	; 13
    112c:	8e b1       	in	r24, 0x0e	; 14
    112e:	83 60       	ori	r24, 0x03	; 3
    1130:	8e b9       	out	0x0e, r24	; 14
    1132:	83 e0       	ldi	r24, 0x03	; 3
    1134:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    1138:	80 81       	ld	r24, Z
    113a:	88 60       	ori	r24, 0x08	; 8
    113c:	80 83       	st	Z, r24
    113e:	8a b1       	in	r24, 0x0a	; 10
    1140:	83 60       	ori	r24, 0x03	; 3
    1142:	8a b9       	out	0x0a, r24	; 10
    1144:	a0 e9       	ldi	r26, 0x90	; 144
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	8c 91       	ld	r24, X
    114a:	82 68       	ori	r24, 0x82	; 130
    114c:	8c 93       	st	X, r24
    114e:	a1 e9       	ldi	r26, 0x91	; 145
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	8c 91       	ld	r24, X
    1154:	8a 61       	ori	r24, 0x1A	; 26
    1156:	8c 93       	st	X, r24
    1158:	20 e3       	ldi	r18, 0x30	; 48
    115a:	35 e7       	ldi	r19, 0x75	; 117
    115c:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
    1160:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
    1164:	a0 ea       	ldi	r26, 0xA0	; 160
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	8c 91       	ld	r24, X
    116a:	82 68       	ori	r24, 0x82	; 130
    116c:	8c 93       	st	X, r24
    116e:	a1 ea       	ldi	r26, 0xA1	; 161
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	8c 91       	ld	r24, X
    1174:	8a 61       	ori	r24, 0x1A	; 26
    1176:	8c 93       	st	X, r24
    1178:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    117c:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1180:	84 b5       	in	r24, 0x24	; 36
    1182:	83 6f       	ori	r24, 0xF3	; 243
    1184:	84 bd       	out	0x24, r24	; 36
    1186:	85 b5       	in	r24, 0x25	; 37
    1188:	83 60       	ori	r24, 0x03	; 3
    118a:	85 bd       	out	0x25, r24	; 37
    118c:	a0 eb       	ldi	r26, 0xB0	; 176
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	8c 91       	ld	r24, X
    1192:	83 63       	ori	r24, 0x33	; 51
    1194:	8c 93       	st	X, r24
    1196:	a1 eb       	ldi	r26, 0xB1	; 177
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	8c 91       	ld	r24, X
    119c:	81 60       	ori	r24, 0x01	; 1
    119e:	8c 93       	st	X, r24
    11a0:	20 98       	cbi	0x04, 0	; 4
    11a2:	ab e6       	ldi	r26, 0x6B	; 107
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	8c 91       	ld	r24, X
    11a8:	81 60       	ori	r24, 0x01	; 1
    11aa:	8c 93       	st	X, r24
    11ac:	57 98       	cbi	0x0a, 7	; 10
    11ae:	ad e6       	ldi	r26, 0x6D	; 109
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	8c 91       	ld	r24, X
    11b4:	80 68       	ori	r24, 0x80	; 128
    11b6:	8c 93       	st	X, r24
    11b8:	54 98       	cbi	0x0a, 4	; 10
    11ba:	8c 91       	ld	r24, X
    11bc:	80 61       	ori	r24, 0x10	; 16
    11be:	8c 93       	st	X, r24
    11c0:	80 81       	ld	r24, Z
    11c2:	85 60       	ori	r24, 0x05	; 5
    11c4:	80 83       	st	Z, r24
    11c6:	25 9a       	sbi	0x04, 5	; 4
    11c8:	2d 9a       	sbi	0x05, 5	; 5
    11ca:	e0 e7       	ldi	r30, 0x70	; 112
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	81 60       	ori	r24, 0x01	; 1
    11d2:	80 83       	st	Z, r24
    11d4:	86 e4       	ldi	r24, 0x46	; 70
    11d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    11da:	8e e8       	ldi	r24, 0x8E	; 142
    11dc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    11e0:	80 ec       	ldi	r24, 0xC0	; 192
    11e2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    11e6:	8c e0       	ldi	r24, 0x0C	; 12
    11e8:	90 e8       	ldi	r25, 0x80	; 128
    11ea:	0e 94 82 04 	call	0x904	; 0x904 <uart1_init>
    11ee:	0e 94 89 03 	call	0x712	; 0x712 <i2c_init>
    11f2:	78 94       	sei
    11f4:	08 95       	ret

000011f6 <detect_reset>:
    11f6:	84 b7       	in	r24, 0x34	; 52
    11f8:	14 be       	out	0x34, r1	; 52
    11fa:	82 30       	cpi	r24, 0x02	; 2
    11fc:	71 f0       	breq	.+28     	; 0x121a <detect_reset+0x24>
    11fe:	18 f4       	brcc	.+6      	; 0x1206 <detect_reset+0x10>
    1200:	81 30       	cpi	r24, 0x01	; 1
    1202:	31 f0       	breq	.+12     	; 0x1210 <detect_reset+0x1a>
    1204:	19 c0       	rjmp	.+50     	; 0x1238 <detect_reset+0x42>
    1206:	84 30       	cpi	r24, 0x04	; 4
    1208:	69 f0       	breq	.+26     	; 0x1224 <detect_reset+0x2e>
    120a:	88 30       	cpi	r24, 0x08	; 8
    120c:	81 f0       	breq	.+32     	; 0x122e <detect_reset+0x38>
    120e:	14 c0       	rjmp	.+40     	; 0x1238 <detect_reset+0x42>
    1210:	89 e7       	ldi	r24, 0x79	; 121
    1212:	96 e0       	ldi	r25, 0x06	; 6
    1214:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    1218:	08 95       	ret
    121a:	87 e5       	ldi	r24, 0x57	; 87
    121c:	96 e0       	ldi	r25, 0x06	; 6
    121e:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    1222:	08 95       	ret
    1224:	81 e3       	ldi	r24, 0x31	; 49
    1226:	96 e0       	ldi	r25, 0x06	; 6
    1228:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    122c:	08 95       	ret
    122e:	8d e0       	ldi	r24, 0x0D	; 13
    1230:	96 e0       	ldi	r25, 0x06	; 6
    1232:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    1236:	08 95       	ret
    1238:	8b ef       	ldi	r24, 0xFB	; 251
    123a:	95 e0       	ldi	r25, 0x05	; 5
    123c:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    1240:	08 95       	ret

00001242 <LEDOff>:
    1242:	8f 3f       	cpi	r24, 0xFF	; 255
    1244:	21 f4       	brne	.+8      	; 0x124e <LEDOff+0xc>
    1246:	8a b1       	in	r24, 0x0a	; 10
    1248:	87 79       	andi	r24, 0x97	; 151
    124a:	8a b9       	out	0x0a, r24	; 10
    124c:	08 95       	ret
    124e:	4a b1       	in	r20, 0x0a	; 10
    1250:	21 e0       	ldi	r18, 0x01	; 1
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	b9 01       	movw	r22, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <LEDOff+0x1a>
    1258:	66 0f       	add	r22, r22
    125a:	77 1f       	adc	r23, r23
    125c:	8a 95       	dec	r24
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <LEDOff+0x16>
    1260:	cb 01       	movw	r24, r22
    1262:	80 95       	com	r24
    1264:	84 23       	and	r24, r20
    1266:	8a b9       	out	0x0a, r24	; 10
    1268:	08 95       	ret

0000126a <LEDOn>:
    126a:	8f 3f       	cpi	r24, 0xFF	; 255
    126c:	21 f4       	brne	.+8      	; 0x1276 <LEDOn+0xc>
    126e:	8a b1       	in	r24, 0x0a	; 10
    1270:	88 66       	ori	r24, 0x68	; 104
    1272:	8a b9       	out	0x0a, r24	; 10
    1274:	08 95       	ret
    1276:	4a b1       	in	r20, 0x0a	; 10
    1278:	21 e0       	ldi	r18, 0x01	; 1
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	b9 01       	movw	r22, r18
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <LEDOn+0x1a>
    1280:	66 0f       	add	r22, r22
    1282:	77 1f       	adc	r23, r23
    1284:	8a 95       	dec	r24
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <LEDOn+0x16>
    1288:	cb 01       	movw	r24, r22
    128a:	84 2b       	or	r24, r20
    128c:	8a b9       	out	0x0a, r24	; 10
    128e:	08 95       	ret

00001290 <redLEDPercent>:
    1290:	99 e2       	ldi	r25, 0x29	; 41
    1292:	89 9f       	mul	r24, r25
    1294:	91 2d       	mov	r25, r1
    1296:	11 24       	eor	r1, r1
    1298:	92 95       	swap	r25
    129a:	9f 70       	andi	r25, 0x0F	; 15
    129c:	24 e6       	ldi	r18, 0x64	; 100
    129e:	92 9f       	mul	r25, r18
    12a0:	80 19       	sub	r24, r0
    12a2:	11 24       	eor	r1, r1
    12a4:	81 11       	cpse	r24, r1
    12a6:	04 c0       	rjmp	.+8      	; 0x12b0 <redLEDPercent+0x20>
    12a8:	86 e0       	ldi	r24, 0x06	; 6
    12aa:	0e 94 21 09 	call	0x1242	; 0x1242 <LEDOff>
    12ae:	08 95       	ret
    12b0:	56 9a       	sbi	0x0a, 6	; 10
    12b2:	2c ed       	ldi	r18, 0xDC	; 220
    12b4:	82 9f       	mul	r24, r18
    12b6:	c0 01       	movw	r24, r0
    12b8:	11 24       	eor	r1, r1
    12ba:	64 e6       	ldi	r22, 0x64	; 100
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <__divmodhi4>
    12c2:	67 bd       	out	0x27, r22	; 39
    12c4:	08 95       	ret

000012c6 <greenLEDPercent>:
    12c6:	99 e2       	ldi	r25, 0x29	; 41
    12c8:	89 9f       	mul	r24, r25
    12ca:	91 2d       	mov	r25, r1
    12cc:	11 24       	eor	r1, r1
    12ce:	92 95       	swap	r25
    12d0:	9f 70       	andi	r25, 0x0F	; 15
    12d2:	24 e6       	ldi	r18, 0x64	; 100
    12d4:	92 9f       	mul	r25, r18
    12d6:	80 19       	sub	r24, r0
    12d8:	11 24       	eor	r1, r1
    12da:	81 11       	cpse	r24, r1
    12dc:	04 c0       	rjmp	.+8      	; 0x12e6 <greenLEDPercent+0x20>
    12de:	85 e0       	ldi	r24, 0x05	; 5
    12e0:	0e 94 21 09 	call	0x1242	; 0x1242 <LEDOff>
    12e4:	08 95       	ret
    12e6:	55 9a       	sbi	0x0a, 5	; 10
    12e8:	28 e7       	ldi	r18, 0x78	; 120
    12ea:	82 9f       	mul	r24, r18
    12ec:	c0 01       	movw	r24, r0
    12ee:	11 24       	eor	r1, r1
    12f0:	64 e6       	ldi	r22, 0x64	; 100
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <__divmodhi4>
    12f8:	68 bd       	out	0x28, r22	; 40
    12fa:	08 95       	ret

000012fc <blueLEDPercent>:
    12fc:	99 e2       	ldi	r25, 0x29	; 41
    12fe:	89 9f       	mul	r24, r25
    1300:	91 2d       	mov	r25, r1
    1302:	11 24       	eor	r1, r1
    1304:	92 95       	swap	r25
    1306:	9f 70       	andi	r25, 0x0F	; 15
    1308:	24 e6       	ldi	r18, 0x64	; 100
    130a:	92 9f       	mul	r25, r18
    130c:	80 19       	sub	r24, r0
    130e:	11 24       	eor	r1, r1
    1310:	81 11       	cpse	r24, r1
    1312:	04 c0       	rjmp	.+8      	; 0x131c <blueLEDPercent+0x20>
    1314:	83 e0       	ldi	r24, 0x03	; 3
    1316:	0e 94 21 09 	call	0x1242	; 0x1242 <LEDOff>
    131a:	08 95       	ret
    131c:	53 9a       	sbi	0x0a, 3	; 10
    131e:	2c e8       	ldi	r18, 0x8C	; 140
    1320:	82 9f       	mul	r24, r18
    1322:	c0 01       	movw	r24, r0
    1324:	11 24       	eor	r1, r1
    1326:	64 e6       	ldi	r22, 0x64	; 100
    1328:	70 e0       	ldi	r23, 0x00	; 0
    132a:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <__divmodhi4>
    132e:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    1332:	08 95       	ret

00001334 <displayBase10>:
    1334:	dc 01       	movw	r26, r24
    1336:	77 23       	and	r23, r23
    1338:	dc f4       	brge	.+54     	; 0x1370 <displayBase10+0x3c>
    133a:	61 3f       	cpi	r22, 0xF1	; 241
    133c:	8f ef       	ldi	r24, 0xFF	; 255
    133e:	78 07       	cpc	r23, r24
    1340:	34 f4       	brge	.+12     	; 0x134e <displayBase10+0x1a>
    1342:	88 e0       	ldi	r24, 0x08	; 8
    1344:	8c 93       	st	X, r24
    1346:	8b e2       	ldi	r24, 0x2B	; 43
    1348:	11 96       	adiw	r26, 0x01	; 1
    134a:	8c 93       	st	X, r24
    134c:	08 95       	ret
    134e:	88 e0       	ldi	r24, 0x08	; 8
    1350:	8c 93       	st	X, r24
    1352:	cb 01       	movw	r24, r22
    1354:	99 23       	and	r25, r25
    1356:	24 f4       	brge	.+8      	; 0x1360 <displayBase10+0x2c>
    1358:	88 27       	eor	r24, r24
    135a:	99 27       	eor	r25, r25
    135c:	86 1b       	sub	r24, r22
    135e:	97 0b       	sbc	r25, r23
    1360:	fc 01       	movw	r30, r24
    1362:	e0 50       	subi	r30, 0x00	; 0
    1364:	ff 4f       	sbci	r31, 0xFF	; 255
    1366:	80 81       	ld	r24, Z
    1368:	80 68       	ori	r24, 0x80	; 128
    136a:	11 96       	adiw	r26, 0x01	; 1
    136c:	8c 93       	st	X, r24
    136e:	08 95       	ret
    1370:	16 16       	cp	r1, r22
    1372:	17 06       	cpc	r1, r23
    1374:	8c f0       	brlt	.+34     	; 0x1398 <displayBase10+0x64>
    1376:	77 27       	eor	r23, r23
    1378:	fb 01       	movw	r30, r22
    137a:	ee 0f       	add	r30, r30
    137c:	ff 1f       	adc	r31, r31
    137e:	66 0f       	add	r22, r22
    1380:	77 1f       	adc	r23, r23
    1382:	66 0f       	add	r22, r22
    1384:	77 1f       	adc	r23, r23
    1386:	66 0f       	add	r22, r22
    1388:	77 1f       	adc	r23, r23
    138a:	e6 0f       	add	r30, r22
    138c:	f7 1f       	adc	r31, r23
    138e:	e0 5f       	subi	r30, 0xF0	; 240
    1390:	fe 4f       	sbci	r31, 0xFE	; 254
    1392:	80 81       	ld	r24, Z
    1394:	8c 93       	st	X, r24
    1396:	08 95       	ret
    1398:	6b 30       	cpi	r22, 0x0B	; 11
    139a:	71 05       	cpc	r23, r1
    139c:	dc f0       	brlt	.+54     	; 0x13d4 <displayBase10+0xa0>
    139e:	9d ec       	ldi	r25, 0xCD	; 205
    13a0:	69 9f       	mul	r22, r25
    13a2:	91 2d       	mov	r25, r1
    13a4:	11 24       	eor	r1, r1
    13a6:	96 95       	lsr	r25
    13a8:	96 95       	lsr	r25
    13aa:	96 95       	lsr	r25
    13ac:	e9 2f       	mov	r30, r25
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	e0 5f       	subi	r30, 0xF0	; 240
    13b2:	fe 4f       	sbci	r31, 0xFE	; 254
    13b4:	80 81       	ld	r24, Z
    13b6:	8c 93       	st	X, r24
    13b8:	99 0f       	add	r25, r25
    13ba:	89 2f       	mov	r24, r25
    13bc:	88 0f       	add	r24, r24
    13be:	88 0f       	add	r24, r24
    13c0:	98 0f       	add	r25, r24
    13c2:	69 1b       	sub	r22, r25
    13c4:	e6 2f       	mov	r30, r22
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	e0 50       	subi	r30, 0x00	; 0
    13ca:	ff 4f       	sbci	r31, 0xFF	; 255
    13cc:	80 81       	ld	r24, Z
    13ce:	80 68       	ori	r24, 0x80	; 128
    13d0:	11 96       	adiw	r26, 0x01	; 1
    13d2:	8c 93       	st	X, r24
    13d4:	08 95       	ret

000013d6 <i2cWritenBytes>:
    13d6:	ef 92       	push	r14
    13d8:	ff 92       	push	r15
    13da:	0f 93       	push	r16
    13dc:	1f 93       	push	r17
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	7c 01       	movw	r14, r24
    13e4:	86 2f       	mov	r24, r22
    13e6:	c4 2f       	mov	r28, r20
    13e8:	12 2f       	mov	r17, r18
    13ea:	0e 94 8f 03 	call	0x71e	; 0x71e <i2c_start_wait>
    13ee:	8c 2f       	mov	r24, r28
    13f0:	0e 94 c0 03 	call	0x780	; 0x780 <i2c_write>
    13f4:	11 23       	and	r17, r17
    13f6:	71 f0       	breq	.+28     	; 0x1414 <i2cWritenBytes+0x3e>
    13f8:	e7 01       	movw	r28, r14
    13fa:	11 50       	subi	r17, 0x01	; 1
    13fc:	01 2f       	mov	r16, r17
    13fe:	10 e0       	ldi	r17, 0x00	; 0
    1400:	0f 5f       	subi	r16, 0xFF	; 255
    1402:	1f 4f       	sbci	r17, 0xFF	; 255
    1404:	0e 0d       	add	r16, r14
    1406:	1f 1d       	adc	r17, r15
    1408:	89 91       	ld	r24, Y+
    140a:	0e 94 c0 03 	call	0x780	; 0x780 <i2c_write>
    140e:	c0 17       	cp	r28, r16
    1410:	d1 07       	cpc	r29, r17
    1412:	d1 f7       	brne	.-12     	; 0x1408 <i2cWritenBytes+0x32>
    1414:	0e 94 b7 03 	call	0x76e	; 0x76e <i2c_stop>
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	1f 91       	pop	r17
    1420:	0f 91       	pop	r16
    1422:	ff 90       	pop	r15
    1424:	ef 90       	pop	r14
    1426:	08 95       	ret

00001428 <init_display>:
    1428:	0f 93       	push	r16
    142a:	1f 93       	push	r17
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	00 d0       	rcall	.+0      	; 0x1432 <init_display+0xa>
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	19 82       	std	Y+1, r1	; 0x01
    1438:	1a 82       	std	Y+2, r1	; 0x02
    143a:	0e e9       	ldi	r16, 0x9E	; 158
    143c:	12 e0       	ldi	r17, 0x02	; 2
    143e:	22 e0       	ldi	r18, 0x02	; 2
    1440:	46 e0       	ldi	r20, 0x06	; 6
    1442:	f8 01       	movw	r30, r16
    1444:	60 81       	ld	r22, Z
    1446:	ce 01       	movw	r24, r28
    1448:	01 96       	adiw	r24, 0x01	; 1
    144a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <i2cWritenBytes>
    144e:	22 e0       	ldi	r18, 0x02	; 2
    1450:	42 e0       	ldi	r20, 0x02	; 2
    1452:	f8 01       	movw	r30, r16
    1454:	60 81       	ld	r22, Z
    1456:	ce 01       	movw	r24, r28
    1458:	01 96       	adiw	r24, 0x01	; 1
    145a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <i2cWritenBytes>
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	df 91       	pop	r29
    1464:	cf 91       	pop	r28
    1466:	1f 91       	pop	r17
    1468:	0f 91       	pop	r16
    146a:	08 95       	ret

0000146c <update_dd7s>:
    146c:	0f 93       	push	r16
    146e:	1f 93       	push	r17
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
    1474:	00 d0       	rcall	.+0      	; 0x1476 <update_dd7s+0xa>
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
    147a:	8c 01       	movw	r16, r24
    147c:	19 82       	std	Y+1, r1	; 0x01
    147e:	1a 82       	std	Y+2, r1	; 0x02
    1480:	fc 01       	movw	r30, r24
    1482:	62 81       	ldd	r22, Z+2	; 0x02
    1484:	6f 3f       	cpi	r22, 0xFF	; 255
    1486:	29 f0       	breq	.+10     	; 0x1492 <update_dd7s+0x26>
    1488:	70 e0       	ldi	r23, 0x00	; 0
    148a:	ce 01       	movw	r24, r28
    148c:	01 96       	adiw	r24, 0x01	; 1
    148e:	0e 94 9a 09 	call	0x1334	; 0x1334 <displayBase10>
    1492:	22 e0       	ldi	r18, 0x02	; 2
    1494:	42 e0       	ldi	r20, 0x02	; 2
    1496:	f8 01       	movw	r30, r16
    1498:	60 81       	ld	r22, Z
    149a:	ce 01       	movw	r24, r28
    149c:	01 96       	adiw	r24, 0x01	; 1
    149e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <i2cWritenBytes>
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	1f 91       	pop	r17
    14ac:	0f 91       	pop	r16
    14ae:	08 95       	ret

000014b0 <crc8>:
    14b0:	66 23       	and	r22, r22
    14b2:	d9 f0       	breq	.+54     	; 0x14ea <crc8+0x3a>
    14b4:	fc 01       	movw	r30, r24
    14b6:	61 50       	subi	r22, 0x01	; 1
    14b8:	26 2f       	mov	r18, r22
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	2f 5f       	subi	r18, 0xFF	; 255
    14be:	3f 4f       	sbci	r19, 0xFF	; 255
    14c0:	ac 01       	movw	r20, r24
    14c2:	42 0f       	add	r20, r18
    14c4:	53 1f       	adc	r21, r19
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	38 e0       	ldi	r19, 0x08	; 8
    14ca:	2e ea       	ldi	r18, 0xAE	; 174
    14cc:	91 91       	ld	r25, Z+
    14ce:	89 27       	eor	r24, r25
    14d0:	93 2f       	mov	r25, r19
    14d2:	80 ff       	sbrs	r24, 0
    14d4:	03 c0       	rjmp	.+6      	; 0x14dc <crc8+0x2c>
    14d6:	86 95       	lsr	r24
    14d8:	82 27       	eor	r24, r18
    14da:	01 c0       	rjmp	.+2      	; 0x14de <crc8+0x2e>
    14dc:	86 95       	lsr	r24
    14de:	91 50       	subi	r25, 0x01	; 1
    14e0:	c1 f7       	brne	.-16     	; 0x14d2 <crc8+0x22>
    14e2:	e4 17       	cp	r30, r20
    14e4:	f5 07       	cpc	r31, r21
    14e6:	91 f7       	brne	.-28     	; 0x14cc <crc8+0x1c>
    14e8:	08 95       	ret
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	08 95       	ret

000014ee <checkBuffer>:
    14ee:	0e 94 9b 04 	call	0x936	; 0x936 <uart1_getc>
    14f2:	90 fd       	sbrc	r25, 0
    14f4:	30 c0       	rjmp	.+96     	; 0x1556 <checkBuffer+0x68>
    14f6:	94 ff       	sbrs	r25, 4
    14f8:	0e c0       	rjmp	.+28     	; 0x1516 <checkBuffer+0x28>
    14fa:	84 ee       	ldi	r24, 0xE4	; 228
    14fc:	95 e0       	ldi	r25, 0x05	; 5
    14fe:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    1502:	ea eb       	ldi	r30, 0xBA	; 186
    1504:	f2 e0       	ldi	r31, 0x02	; 2
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	80 83       	st	Z, r24
    150a:	88 ee       	ldi	r24, 0xE8	; 232
    150c:	93 e0       	ldi	r25, 0x03	; 3
    150e:	94 83       	std	Z+4, r25	; 0x04
    1510:	83 83       	std	Z+3, r24	; 0x03
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	08 95       	ret
    1516:	93 ff       	sbrs	r25, 3
    1518:	0e c0       	rjmp	.+28     	; 0x1536 <checkBuffer+0x48>
    151a:	88 ec       	ldi	r24, 0xC8	; 200
    151c:	95 e0       	ldi	r25, 0x05	; 5
    151e:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    1522:	ea eb       	ldi	r30, 0xBA	; 186
    1524:	f2 e0       	ldi	r31, 0x02	; 2
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	80 83       	st	Z, r24
    152a:	88 ee       	ldi	r24, 0xE8	; 232
    152c:	93 e0       	ldi	r25, 0x03	; 3
    152e:	94 83       	std	Z+4, r25	; 0x04
    1530:	83 83       	std	Z+3, r24	; 0x03
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	08 95       	ret
    1536:	91 ff       	sbrs	r25, 1
    1538:	0f c0       	rjmp	.+30     	; 0x1558 <checkBuffer+0x6a>
    153a:	8b ea       	ldi	r24, 0xAB	; 171
    153c:	95 e0       	ldi	r25, 0x05	; 5
    153e:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    1542:	ea eb       	ldi	r30, 0xBA	; 186
    1544:	f2 e0       	ldi	r31, 0x02	; 2
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	80 83       	st	Z, r24
    154a:	88 ee       	ldi	r24, 0xE8	; 232
    154c:	93 e0       	ldi	r25, 0x03	; 3
    154e:	94 83       	std	Z+4, r25	; 0x04
    1550:	83 83       	std	Z+3, r24	; 0x03
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	08 95       	ret
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	08 95       	ret

0000155a <readFloat>:
    155a:	dc 01       	movw	r26, r24
    155c:	e3 e5       	ldi	r30, 0x53	; 83
    155e:	f2 e0       	ldi	r31, 0x02	; 2
    1560:	2f e4       	ldi	r18, 0x4F	; 79
    1562:	32 e0       	ldi	r19, 0x02	; 2
    1564:	8d 91       	ld	r24, X+
    1566:	82 93       	st	-Z, r24
    1568:	e2 17       	cp	r30, r18
    156a:	f3 07       	cpc	r31, r19
    156c:	d9 f7       	brne	.-10     	; 0x1564 <readFloat+0xa>
    156e:	60 91 4f 02 	lds	r22, 0x024F	; 0x80024f <floatChar>
    1572:	70 91 50 02 	lds	r23, 0x0250	; 0x800250 <floatChar+0x1>
    1576:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <floatChar+0x2>
    157a:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <floatChar+0x3>
    157e:	08 95       	ret

00001580 <uart1putcs>:

void uart1putcs(uint8_t *datagram){
    1580:	0f 93       	push	r16
    1582:	1f 93       	push	r17
    1584:	cf 93       	push	r28
    1586:	8c 01       	movw	r16, r24
	uart1_putc(STARTBYTE);
    1588:	81 e1       	ldi	r24, 0x11	; 17
    158a:	0e 94 b9 04 	call	0x972	; 0x972 <uart1_putc>
	for(uint8_t i = 0; i < datagram[0]; i++){
    158e:	f8 01       	movw	r30, r16
    1590:	80 81       	ld	r24, Z
    1592:	88 23       	and	r24, r24
    1594:	61 f0       	breq	.+24     	; 0x15ae <uart1putcs+0x2e>
    1596:	c0 e0       	ldi	r28, 0x00	; 0
		uart1_putc(datagram[i]);
    1598:	f8 01       	movw	r30, r16
    159a:	ec 0f       	add	r30, r28
    159c:	f1 1d       	adc	r31, r1
    159e:	80 81       	ld	r24, Z
    15a0:	0e 94 b9 04 	call	0x972	; 0x972 <uart1_putc>
	return floatChar.c;
}

void uart1putcs(uint8_t *datagram){
	uart1_putc(STARTBYTE);
	for(uint8_t i = 0; i < datagram[0]; i++){
    15a4:	cf 5f       	subi	r28, 0xFF	; 255
    15a6:	f8 01       	movw	r30, r16
    15a8:	80 81       	ld	r24, Z
    15aa:	c8 17       	cp	r28, r24
    15ac:	a8 f3       	brcs	.-22     	; 0x1598 <uart1putcs+0x18>
		uart1_putc(datagram[i]);
	}
	//uart1_putc(STOPBYTE);
}
    15ae:	cf 91       	pop	r28
    15b0:	1f 91       	pop	r17
    15b2:	0f 91       	pop	r16
    15b4:	08 95       	ret

000015b6 <formdatagram>:

void formdatagram(uint8_t *datagram, uint8_t address, uint8_t opCode, union dgramMem payl, uint8_t type){
    15b6:	ef 92       	push	r14
    15b8:	0f 93       	push	r16
    15ba:	1f 93       	push	r17
    15bc:	cf 93       	push	r28
    15be:	df 93       	push	r29
    15c0:	fc 01       	movw	r30, r24
    15c2:	8e 2d       	mov	r24, r14
	// datagrams : length, address, opCode, payload[1-4], crc
	datagram[1] = address;
    15c4:	61 83       	std	Z+1, r22	; 0x01
	datagram[2] = opCode; 
    15c6:	42 83       	std	Z+2, r20	; 0x02
	uint8_t paylen;
	switch(type){
    15c8:	83 36       	cpi	r24, 0x63	; 99
    15ca:	59 f0       	breq	.+22     	; 0x15e2 <formdatagram+0x2c>
    15cc:	28 f4       	brcc	.+10     	; 0x15d8 <formdatagram+0x22>
    15ce:	83 34       	cpi	r24, 0x43	; 67
    15d0:	41 f0       	breq	.+16     	; 0x15e2 <formdatagram+0x2c>
    15d2:	89 34       	cpi	r24, 0x49	; 73
    15d4:	49 f0       	breq	.+18     	; 0x15e8 <formdatagram+0x32>
    15d6:	27 c0       	rjmp	.+78     	; 0x1626 <formdatagram+0x70>
    15d8:	86 36       	cpi	r24, 0x66	; 102
    15da:	51 f0       	breq	.+20     	; 0x15f0 <formdatagram+0x3a>
    15dc:	89 36       	cpi	r24, 0x69	; 105
    15de:	21 f0       	breq	.+8      	; 0x15e8 <formdatagram+0x32>
    15e0:	22 c0       	rjmp	.+68     	; 0x1626 <formdatagram+0x70>
		case 'C':
		case 'c':;
			datagram[3] = payl.ch;
    15e2:	03 83       	std	Z+3, r16	; 0x03
			paylen = 1;
    15e4:	61 e0       	ldi	r22, 0x01	; 1
			
		break;
    15e6:	20 c0       	rjmp	.+64     	; 0x1628 <formdatagram+0x72>
		case 'I':
		case 'i':;
			datagram[3] = (payl.in >> 8);
    15e8:	13 83       	std	Z+3, r17	; 0x03
			datagram[4] = payl.in & 0xFF;
    15ea:	04 83       	std	Z+4, r16	; 0x04
			paylen = 2;
    15ec:	62 e0       	ldi	r22, 0x02	; 2
		break;
    15ee:	1c c0       	rjmp	.+56     	; 0x1628 <formdatagram+0x72>
	}
	return floatChar.f;
}

uint8_t *float2char(float f){
	floatChar.f = f;
    15f0:	af e4       	ldi	r26, 0x4F	; 79
    15f2:	b2 e0       	ldi	r27, 0x02	; 2
    15f4:	40 2f       	mov	r20, r16
    15f6:	51 2f       	mov	r21, r17
    15f8:	62 2f       	mov	r22, r18
    15fa:	73 2f       	mov	r23, r19
    15fc:	4d 93       	st	X+, r20
    15fe:	5d 93       	st	X+, r21
    1600:	6d 93       	st	X+, r22
    1602:	7c 93       	st	X, r23
    1604:	13 97       	sbiw	r26, 0x03	; 3
			paylen = 2;
		break;
		case 'f':;
			uint8_t *fl = float2char(payl.fl);
			for(uint8_t i = 0; i < 4; i++){
				datagram[3+i] = fl[3-i];//avr stores as little endian
    1606:	13 96       	adiw	r26, 0x03	; 3
    1608:	8c 91       	ld	r24, X
    160a:	13 97       	sbiw	r26, 0x03	; 3
    160c:	83 83       	std	Z+3, r24	; 0x03
    160e:	12 96       	adiw	r26, 0x02	; 2
    1610:	8c 91       	ld	r24, X
    1612:	12 97       	sbiw	r26, 0x02	; 2
    1614:	84 83       	std	Z+4, r24	; 0x04
    1616:	11 96       	adiw	r26, 0x01	; 1
    1618:	8c 91       	ld	r24, X
    161a:	11 97       	sbiw	r26, 0x01	; 1
    161c:	85 83       	std	Z+5, r24	; 0x05
    161e:	8c 91       	ld	r24, X
    1620:	86 83       	std	Z+6, r24	; 0x06
			}
			paylen = 4;
    1622:	64 e0       	ldi	r22, 0x04	; 4
    1624:	01 c0       	rjmp	.+2      	; 0x1628 <formdatagram+0x72>
		break;
		default:
			paylen = 0;
    1626:	60 e0       	ldi	r22, 0x00	; 0
		break;
	}
	datagram[0] = 4 + paylen;
    1628:	84 e0       	ldi	r24, 0x04	; 4
    162a:	86 0f       	add	r24, r22
    162c:	80 83       	st	Z, r24
	datagram[3+paylen] = crc8(datagram, datagram[0]-1);
    162e:	c6 2f       	mov	r28, r22
    1630:	d0 e0       	ldi	r29, 0x00	; 0
    1632:	23 96       	adiw	r28, 0x03	; 3
    1634:	ce 0f       	add	r28, r30
    1636:	df 1f       	adc	r29, r31
    1638:	6d 5f       	subi	r22, 0xFD	; 253
    163a:	cf 01       	movw	r24, r30
    163c:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <crc8>
    1640:	88 83       	st	Y, r24
}
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	1f 91       	pop	r17
    1648:	0f 91       	pop	r16
    164a:	ef 90       	pop	r14
    164c:	08 95       	ret

0000164e <parseMotorOp>:
		break;
	}
}


void parseMotorOp(uint8_t *datagram, Motor *motor){
    164e:	cf 92       	push	r12
    1650:	df 92       	push	r13
    1652:	ef 92       	push	r14
    1654:	0f 93       	push	r16
    1656:	1f 93       	push	r17
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	00 d0       	rcall	.+0      	; 0x165e <parseMotorOp+0x10>
    165e:	00 d0       	rcall	.+0      	; 0x1660 <parseMotorOp+0x12>
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	6c 01       	movw	r12, r24
    1666:	8b 01       	movw	r16, r22
	switch(datagram[2]){
    1668:	dc 01       	movw	r26, r24
    166a:	12 96       	adiw	r26, 0x02	; 2
    166c:	ec 91       	ld	r30, X
    166e:	4e 2f       	mov	r20, r30
    1670:	50 e0       	ldi	r21, 0x00	; 0
    1672:	fa 01       	movw	r30, r20
    1674:	31 97       	sbiw	r30, 0x01	; 1
    1676:	e7 38       	cpi	r30, 0x87	; 135
    1678:	f1 05       	cpc	r31, r1
    167a:	08 f0       	brcs	.+2      	; 0x167e <parseMotorOp+0x30>
    167c:	27 c2       	rjmp	.+1102   	; 0x1acc <parseMotorOp+0x47e>
    167e:	e6 5a       	subi	r30, 0xA6	; 166
    1680:	ff 4f       	sbci	r31, 0xFF	; 255
    1682:	0c 94 32 1c 	jmp	0x3864	; 0x3864 <__tablejump2__>
		//SETTERS
		case MOTOR_SET_SPEED_DPS:
			if(datagram[0] == 5){
    1686:	fc 01       	movw	r30, r24
    1688:	80 81       	ld	r24, Z
    168a:	85 30       	cpi	r24, 0x05	; 5
    168c:	59 f5       	brne	.+86     	; 0x16e4 <parseMotorOp+0x96>
				int16_t speed = (datagram[3]<<8) | datagram[4];
    168e:	83 81       	ldd	r24, Z+3	; 0x03
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	98 2f       	mov	r25, r24
    1694:	88 27       	eor	r24, r24
    1696:	24 81       	ldd	r18, Z+4	; 0x04
    1698:	82 2b       	or	r24, r18
				motor->setSpeedDPS = abs(speed);
    169a:	9c 01       	movw	r18, r24
    169c:	99 23       	and	r25, r25
    169e:	24 f4       	brge	.+8      	; 0x16a8 <parseMotorOp+0x5a>
    16a0:	22 27       	eor	r18, r18
    16a2:	33 27       	eor	r19, r19
    16a4:	28 1b       	sub	r18, r24
    16a6:	39 0b       	sbc	r19, r25
    16a8:	d8 01       	movw	r26, r16
    16aa:	1c 96       	adiw	r26, 0x0c	; 12
    16ac:	3c 93       	st	X, r19
    16ae:	2e 93       	st	-X, r18
    16b0:	1b 97       	sbiw	r26, 0x0b	; 11
				if(speed > 0) motor->dir = 1;
    16b2:	18 16       	cp	r1, r24
    16b4:	19 06       	cpc	r1, r25
    16b6:	24 f4       	brge	.+8      	; 0x16c0 <parseMotorOp+0x72>
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	19 96       	adiw	r26, 0x09	; 9
    16bc:	8c 93       	st	X, r24
    16be:	09 c0       	rjmp	.+18     	; 0x16d2 <parseMotorOp+0x84>
				else if(speed < 0) motor->dir = -1;
    16c0:	99 23       	and	r25, r25
    16c2:	24 f4       	brge	.+8      	; 0x16cc <parseMotorOp+0x7e>
    16c4:	8f ef       	ldi	r24, 0xFF	; 255
    16c6:	f8 01       	movw	r30, r16
    16c8:	81 87       	std	Z+9, r24	; 0x09
    16ca:	03 c0       	rjmp	.+6      	; 0x16d2 <parseMotorOp+0x84>
				else motor->dir = 0;
    16cc:	d8 01       	movw	r26, r16
    16ce:	19 96       	adiw	r26, 0x09	; 9
    16d0:	1c 92       	st	X, r1
				ledB.state = 1;
    16d2:	ea eb       	ldi	r30, 0xBA	; 186
    16d4:	f2 e0       	ldi	r31, 0x02	; 2
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	80 83       	st	Z, r24
				ledB.count = 1000;
    16da:	88 ee       	ldi	r24, 0xE8	; 232
    16dc:	93 e0       	ldi	r25, 0x03	; 3
    16de:	94 83       	std	Z+4, r25	; 0x04
    16e0:	83 83       	std	Z+3, r24	; 0x03
    16e2:	00 c2       	rjmp	.+1024   	; 0x1ae4 <parseMotorOp+0x496>
			}else{
				uart1_puts_P("ERROR: Incorrect Type\n");
    16e4:	88 e4       	ldi	r24, 0x48	; 72
    16e6:	95 e0       	ldi	r25, 0x05	; 5
    16e8:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    16ec:	fb c1       	rjmp	.+1014   	; 0x1ae4 <parseMotorOp+0x496>
			}
		break;
		case MOTOR_SET_DEGREES:
			if(datagram[0] == 5){
    16ee:	fc 01       	movw	r30, r24
    16f0:	80 81       	ld	r24, Z
    16f2:	85 30       	cpi	r24, 0x05	; 5
    16f4:	21 f5       	brne	.+72     	; 0x173e <parseMotorOp+0xf0>
				motor->position = 0;
    16f6:	d8 01       	movw	r26, r16
    16f8:	13 96       	adiw	r26, 0x03	; 3
    16fa:	1c 92       	st	X, r1
    16fc:	1e 92       	st	-X, r1
    16fe:	12 97       	sbiw	r26, 0x02	; 2
				motor->degrees = 0;
    1700:	18 96       	adiw	r26, 0x08	; 8
    1702:	1c 92       	st	X, r1
    1704:	1e 92       	st	-X, r1
    1706:	17 97       	sbiw	r26, 0x07	; 7
				int16_t degrees = (datagram[3]<<8) | datagram[4];
    1708:	83 81       	ldd	r24, Z+3	; 0x03
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	98 2f       	mov	r25, r24
    170e:	88 27       	eor	r24, r24
    1710:	24 81       	ldd	r18, Z+4	; 0x04
    1712:	82 2b       	or	r24, r18
				motor->setDegrees = degrees;
    1714:	1e 96       	adiw	r26, 0x0e	; 14
    1716:	9c 93       	st	X, r25
    1718:	8e 93       	st	-X, r24
    171a:	1d 97       	sbiw	r26, 0x0d	; 13
				if(degrees > 0) motor->dir = 1;
    171c:	18 16       	cp	r1, r24
    171e:	19 06       	cpc	r1, r25
    1720:	24 f4       	brge	.+8      	; 0x172a <parseMotorOp+0xdc>
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	19 96       	adiw	r26, 0x09	; 9
    1726:	8c 93       	st	X, r24
    1728:	dd c1       	rjmp	.+954    	; 0x1ae4 <parseMotorOp+0x496>
				else if(degrees < 0) motor->dir = -1;
    172a:	99 23       	and	r25, r25
    172c:	24 f4       	brge	.+8      	; 0x1736 <parseMotorOp+0xe8>
    172e:	8f ef       	ldi	r24, 0xFF	; 255
    1730:	f8 01       	movw	r30, r16
    1732:	81 87       	std	Z+9, r24	; 0x09
    1734:	d7 c1       	rjmp	.+942    	; 0x1ae4 <parseMotorOp+0x496>
				else motor->dir = 0;
    1736:	d8 01       	movw	r26, r16
    1738:	19 96       	adiw	r26, 0x09	; 9
    173a:	1c 92       	st	X, r1
    173c:	d3 c1       	rjmp	.+934    	; 0x1ae4 <parseMotorOp+0x496>
			}else{
				uart1_puts_P("ERROR: Incorrect Type\n");
    173e:	81 e3       	ldi	r24, 0x31	; 49
    1740:	95 e0       	ldi	r25, 0x05	; 5
    1742:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    1746:	ce c1       	rjmp	.+924    	; 0x1ae4 <parseMotorOp+0x496>
			}
		break;
		case MOTOR_SET_DIRECTION:
			if(datagram[0] == 4){
    1748:	fc 01       	movw	r30, r24
    174a:	80 81       	ld	r24, Z
    174c:	84 30       	cpi	r24, 0x04	; 4
    174e:	91 f4       	brne	.+36     	; 0x1774 <parseMotorOp+0x126>
				int8_t direction = datagram[3];
    1750:	83 81       	ldd	r24, Z+3	; 0x03
				if(direction > 0) motor->dir = 1;
    1752:	18 16       	cp	r1, r24
    1754:	2c f4       	brge	.+10     	; 0x1760 <parseMotorOp+0x112>
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	d8 01       	movw	r26, r16
    175a:	19 96       	adiw	r26, 0x09	; 9
    175c:	8c 93       	st	X, r24
    175e:	c2 c1       	rjmp	.+900    	; 0x1ae4 <parseMotorOp+0x496>
				else if(direction < 0) motor->dir = -1;
    1760:	88 23       	and	r24, r24
    1762:	24 f4       	brge	.+8      	; 0x176c <parseMotorOp+0x11e>
    1764:	8f ef       	ldi	r24, 0xFF	; 255
    1766:	f8 01       	movw	r30, r16
    1768:	81 87       	std	Z+9, r24	; 0x09
    176a:	bc c1       	rjmp	.+888    	; 0x1ae4 <parseMotorOp+0x496>
				else motor->dir = 0;
    176c:	d8 01       	movw	r26, r16
    176e:	19 96       	adiw	r26, 0x09	; 9
    1770:	1c 92       	st	X, r1
    1772:	b8 c1       	rjmp	.+880    	; 0x1ae4 <parseMotorOp+0x496>
			}else{
				uart1_puts_P("ERROR: Incorrect Type\n");
    1774:	8a e1       	ldi	r24, 0x1A	; 26
    1776:	95 e0       	ldi	r25, 0x05	; 5
    1778:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    177c:	b3 c1       	rjmp	.+870    	; 0x1ae4 <parseMotorOp+0x496>
			}
		break;
		case MOTOR_SET_GAIN_P:
			if(datagram[0] == 7){
    177e:	fc 01       	movw	r30, r24
    1780:	80 81       	ld	r24, Z
    1782:	87 30       	cpi	r24, 0x07	; 7
    1784:	31 f5       	brne	.+76     	; 0x17d2 <parseMotorOp+0x184>
    1786:	33 96       	adiw	r30, 0x03	; 3
    1788:	de 01       	movw	r26, r28
    178a:	11 96       	adiw	r26, 0x01	; 1
    178c:	87 e0       	ldi	r24, 0x07	; 7
    178e:	c8 0e       	add	r12, r24
    1790:	d1 1c       	adc	r13, r1
				uint8_t flMem[4];
				for(uint8_t i=0; i<4; i++) flMem[i] = datagram[3+i];
    1792:	81 91       	ld	r24, Z+
    1794:	8d 93       	st	X+, r24
    1796:	ec 15       	cp	r30, r12
    1798:	fd 05       	cpc	r31, r13
    179a:	d9 f7       	brne	.-10     	; 0x1792 <parseMotorOp+0x144>
				motor->gainP = readFloat(flMem) * PID_SCALE;
    179c:	ce 01       	movw	r24, r28
    179e:	01 96       	adiw	r24, 0x01	; 1
    17a0:	0e 94 ad 0a 	call	0x155a	; 0x155a <readFloat>
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e0       	ldi	r20, 0x00	; 0
    17aa:	53 e4       	ldi	r21, 0x43	; 67
    17ac:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <__mulsf3>
    17b0:	0e 94 96 1a 	call	0x352c	; 0x352c <__fixsfsi>
    17b4:	d8 01       	movw	r26, r16
    17b6:	51 96       	adiw	r26, 0x11	; 17
    17b8:	7c 93       	st	X, r23
    17ba:	6e 93       	st	-X, r22
    17bc:	50 97       	sbiw	r26, 0x10	; 16
				motor->maxError = INT16_MAX / (motor->gainP + 1);				
    17be:	6f 5f       	subi	r22, 0xFF	; 255
    17c0:	7f 4f       	sbci	r23, 0xFF	; 255
    17c2:	8f ef       	ldi	r24, 0xFF	; 255
    17c4:	9f e7       	ldi	r25, 0x7F	; 127
    17c6:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <__divmodhi4>
    17ca:	f8 01       	movw	r30, r16
    17cc:	75 8f       	std	Z+29, r23	; 0x1d
    17ce:	64 8f       	std	Z+28, r22	; 0x1c
    17d0:	89 c1       	rjmp	.+786    	; 0x1ae4 <parseMotorOp+0x496>
			}else{
				uart1_puts_P("ERROR: Incorrect Type\n");
    17d2:	83 e0       	ldi	r24, 0x03	; 3
    17d4:	95 e0       	ldi	r25, 0x05	; 5
    17d6:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    17da:	84 c1       	rjmp	.+776    	; 0x1ae4 <parseMotorOp+0x496>
			}
		break;
		case MOTOR_SET_GAIN_I:
			if(datagram[0] == 7){
    17dc:	dc 01       	movw	r26, r24
    17de:	8c 91       	ld	r24, X
    17e0:	87 30       	cpi	r24, 0x07	; 7
    17e2:	79 f5       	brne	.+94     	; 0x1842 <parseMotorOp+0x1f4>
    17e4:	f6 01       	movw	r30, r12
    17e6:	33 96       	adiw	r30, 0x03	; 3
    17e8:	de 01       	movw	r26, r28
    17ea:	11 96       	adiw	r26, 0x01	; 1
    17ec:	87 e0       	ldi	r24, 0x07	; 7
    17ee:	c8 0e       	add	r12, r24
    17f0:	d1 1c       	adc	r13, r1
				uint8_t flMem[4];
				for(uint8_t i=0; i<4; i++) flMem[i] = datagram[3+i];
    17f2:	81 91       	ld	r24, Z+
    17f4:	8d 93       	st	X+, r24
    17f6:	ec 15       	cp	r30, r12
    17f8:	fd 05       	cpc	r31, r13
    17fa:	d9 f7       	brne	.-10     	; 0x17f2 <parseMotorOp+0x1a4>
				motor->gainI = readFloat(flMem) * PID_SCALE;
    17fc:	ce 01       	movw	r24, r28
    17fe:	01 96       	adiw	r24, 0x01	; 1
    1800:	0e 94 ad 0a 	call	0x155a	; 0x155a <readFloat>
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	40 e0       	ldi	r20, 0x00	; 0
    180a:	53 e4       	ldi	r21, 0x43	; 67
    180c:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <__mulsf3>
    1810:	0e 94 96 1a 	call	0x352c	; 0x352c <__fixsfsi>
    1814:	d8 01       	movw	r26, r16
    1816:	53 96       	adiw	r26, 0x13	; 19
    1818:	7c 93       	st	X, r23
    181a:	6e 93       	st	-X, r22
    181c:	52 97       	sbiw	r26, 0x12	; 18
				motor->maxErrorSum = (INT32_MAX / 2) / (motor->gainI + 1);
    181e:	6f 5f       	subi	r22, 0xFF	; 255
    1820:	7f 4f       	sbci	r23, 0xFF	; 255
    1822:	9b 01       	movw	r18, r22
    1824:	77 0f       	add	r23, r23
    1826:	44 0b       	sbc	r20, r20
    1828:	55 0b       	sbc	r21, r21
    182a:	6f ef       	ldi	r22, 0xFF	; 255
    182c:	7f ef       	ldi	r23, 0xFF	; 255
    182e:	8f ef       	ldi	r24, 0xFF	; 255
    1830:	9f e3       	ldi	r25, 0x3F	; 63
    1832:	0e 94 13 1c 	call	0x3826	; 0x3826 <__divmodsi4>
    1836:	f8 01       	movw	r30, r16
    1838:	26 8f       	std	Z+30, r18	; 0x1e
    183a:	37 8f       	std	Z+31, r19	; 0x1f
    183c:	40 a3       	std	Z+32, r20	; 0x20
    183e:	51 a3       	std	Z+33, r21	; 0x21
    1840:	51 c1       	rjmp	.+674    	; 0x1ae4 <parseMotorOp+0x496>
			}else{
				uart1_puts_P("ERROR: Incorrect Type\n");
    1842:	8c ee       	ldi	r24, 0xEC	; 236
    1844:	94 e0       	ldi	r25, 0x04	; 4
    1846:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    184a:	4c c1       	rjmp	.+664    	; 0x1ae4 <parseMotorOp+0x496>
			}
		break;
		case MOTOR_SET_GAIN_D:
			if(datagram[0] == 7){
    184c:	dc 01       	movw	r26, r24
    184e:	8c 91       	ld	r24, X
    1850:	87 30       	cpi	r24, 0x07	; 7
    1852:	f1 f4       	brne	.+60     	; 0x1890 <parseMotorOp+0x242>
    1854:	f6 01       	movw	r30, r12
    1856:	33 96       	adiw	r30, 0x03	; 3
    1858:	de 01       	movw	r26, r28
    185a:	11 96       	adiw	r26, 0x01	; 1
    185c:	87 e0       	ldi	r24, 0x07	; 7
    185e:	c8 0e       	add	r12, r24
    1860:	d1 1c       	adc	r13, r1
				uint8_t flMem[4];
				for(uint8_t i=0; i<4; i++) flMem[i] = datagram[3+i];
    1862:	81 91       	ld	r24, Z+
    1864:	8d 93       	st	X+, r24
    1866:	ec 15       	cp	r30, r12
    1868:	fd 05       	cpc	r31, r13
    186a:	d9 f7       	brne	.-10     	; 0x1862 <parseMotorOp+0x214>
				motor->gainD = readFloat(flMem) * PID_SCALE;
    186c:	ce 01       	movw	r24, r28
    186e:	01 96       	adiw	r24, 0x01	; 1
    1870:	0e 94 ad 0a 	call	0x155a	; 0x155a <readFloat>
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e0       	ldi	r20, 0x00	; 0
    187a:	53 e4       	ldi	r21, 0x43	; 67
    187c:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <__mulsf3>
    1880:	0e 94 96 1a 	call	0x352c	; 0x352c <__fixsfsi>
    1884:	d8 01       	movw	r26, r16
    1886:	55 96       	adiw	r26, 0x15	; 21
    1888:	7c 93       	st	X, r23
    188a:	6e 93       	st	-X, r22
    188c:	54 97       	sbiw	r26, 0x14	; 20
    188e:	2a c1       	rjmp	.+596    	; 0x1ae4 <parseMotorOp+0x496>
			}else{
				uart1_puts_P("ERROR: Incorrect Type\n");
    1890:	85 ed       	ldi	r24, 0xD5	; 213
    1892:	94 e0       	ldi	r25, 0x04	; 4
    1894:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    1898:	25 c1       	rjmp	.+586    	; 0x1ae4 <parseMotorOp+0x496>
			}
		break;
		case MOTOR_SET_ENC_MODE:
			if(datagram[0] == 4){
    189a:	fc 01       	movw	r30, r24
    189c:	80 81       	ld	r24, Z
    189e:	84 30       	cpi	r24, 0x04	; 4
    18a0:	91 f4       	brne	.+36     	; 0x18c6 <parseMotorOp+0x278>
				uint8_t mode = datagram[3];
    18a2:	83 81       	ldd	r24, Z+3	; 0x03
				if(mode > 2) motor->encoderMode = 1; //the default
    18a4:	83 30       	cpi	r24, 0x03	; 3
    18a6:	28 f0       	brcs	.+10     	; 0x18b2 <parseMotorOp+0x264>
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	d8 01       	movw	r26, r16
    18ac:	14 96       	adiw	r26, 0x04	; 4
    18ae:	8c 93       	st	X, r24
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <parseMotorOp+0x268>
				else motor->encoderMode = mode;
    18b2:	f8 01       	movw	r30, r16
    18b4:	84 83       	std	Z+4, r24	; 0x04
				//also resets some of the motor struct
				motor->degrees = 0;
    18b6:	d8 01       	movw	r26, r16
    18b8:	18 96       	adiw	r26, 0x08	; 8
    18ba:	1c 92       	st	X, r1
    18bc:	1e 92       	st	-X, r1
    18be:	17 97       	sbiw	r26, 0x07	; 7
				motor->dir = 0;
    18c0:	19 96       	adiw	r26, 0x09	; 9
    18c2:	1c 92       	st	X, r1
    18c4:	0f c1       	rjmp	.+542    	; 0x1ae4 <parseMotorOp+0x496>
			}else{
				uart1_puts_P("ERROR: Incorrect Type\n");
    18c6:	8e eb       	ldi	r24, 0xBE	; 190
    18c8:	94 e0       	ldi	r25, 0x04	; 4
    18ca:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    18ce:	0a c1       	rjmp	.+532    	; 0x1ae4 <parseMotorOp+0x496>
			}
		break;
		
		//GETTERS
		case MOTOR_GET_SPEED_DPS:
			dgrammem.in = motor->speedDPS;
    18d0:	f8 01       	movw	r30, r16
    18d2:	85 81       	ldd	r24, Z+5	; 0x05
    18d4:	96 81       	ldd	r25, Z+6	; 0x06
    18d6:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <dgrammem+0x1>
    18da:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <dgrammem>
			formdatagram(datagramG, datagram[1], MOTOR_SET_SPEED_DPS, dgrammem, 'i');
    18de:	00 91 4b 02 	lds	r16, 0x024B	; 0x80024b <dgrammem>
    18e2:	10 91 4c 02 	lds	r17, 0x024C	; 0x80024c <dgrammem+0x1>
    18e6:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <dgrammem+0x2>
    18ea:	30 91 4e 02 	lds	r19, 0x024E	; 0x80024e <dgrammem+0x3>
    18ee:	0f 2e       	mov	r0, r31
    18f0:	f9 e6       	ldi	r31, 0x69	; 105
    18f2:	ef 2e       	mov	r14, r31
    18f4:	f0 2d       	mov	r31, r0
    18f6:	41 e0       	ldi	r20, 0x01	; 1
    18f8:	d6 01       	movw	r26, r12
    18fa:	11 96       	adiw	r26, 0x01	; 1
    18fc:	6c 91       	ld	r22, X
    18fe:	83 ea       	ldi	r24, 0xA3	; 163
    1900:	92 e0       	ldi	r25, 0x02	; 2
    1902:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <formdatagram>
			uart1putcs(datagramG);
    1906:	83 ea       	ldi	r24, 0xA3	; 163
    1908:	92 e0       	ldi	r25, 0x02	; 2
    190a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uart1putcs>
		break;	
    190e:	ea c0       	rjmp	.+468    	; 0x1ae4 <parseMotorOp+0x496>
		case MOTOR_GET_DEGREES:
			dgrammem.in = motor->degrees;
    1910:	f8 01       	movw	r30, r16
    1912:	87 81       	ldd	r24, Z+7	; 0x07
    1914:	90 85       	ldd	r25, Z+8	; 0x08
    1916:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <dgrammem+0x1>
    191a:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <dgrammem>
			formdatagram(datagramG, datagram[1], MOTOR_SET_DEGREES, dgrammem, 'i');
    191e:	00 91 4b 02 	lds	r16, 0x024B	; 0x80024b <dgrammem>
    1922:	10 91 4c 02 	lds	r17, 0x024C	; 0x80024c <dgrammem+0x1>
    1926:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <dgrammem+0x2>
    192a:	30 91 4e 02 	lds	r19, 0x024E	; 0x80024e <dgrammem+0x3>
    192e:	0f 2e       	mov	r0, r31
    1930:	f9 e6       	ldi	r31, 0x69	; 105
    1932:	ef 2e       	mov	r14, r31
    1934:	f0 2d       	mov	r31, r0
    1936:	42 e0       	ldi	r20, 0x02	; 2
    1938:	d6 01       	movw	r26, r12
    193a:	11 96       	adiw	r26, 0x01	; 1
    193c:	6c 91       	ld	r22, X
    193e:	83 ea       	ldi	r24, 0xA3	; 163
    1940:	92 e0       	ldi	r25, 0x02	; 2
    1942:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <formdatagram>
			uart1putcs(datagramG);
    1946:	83 ea       	ldi	r24, 0xA3	; 163
    1948:	92 e0       	ldi	r25, 0x02	; 2
    194a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uart1putcs>
		break;
    194e:	ca c0       	rjmp	.+404    	; 0x1ae4 <parseMotorOp+0x496>
		case MOTOR_GET_DIRECTION:
			dgrammem.ch = motor->dir;
    1950:	f8 01       	movw	r30, r16
    1952:	81 85       	ldd	r24, Z+9	; 0x09
    1954:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <dgrammem>
			formdatagram(datagramG, datagram[1], MOTOR_SET_DIRECTION, dgrammem, 'c');
    1958:	00 91 4b 02 	lds	r16, 0x024B	; 0x80024b <dgrammem>
    195c:	10 91 4c 02 	lds	r17, 0x024C	; 0x80024c <dgrammem+0x1>
    1960:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <dgrammem+0x2>
    1964:	30 91 4e 02 	lds	r19, 0x024E	; 0x80024e <dgrammem+0x3>
    1968:	0f 2e       	mov	r0, r31
    196a:	f3 e6       	ldi	r31, 0x63	; 99
    196c:	ef 2e       	mov	r14, r31
    196e:	f0 2d       	mov	r31, r0
    1970:	43 e0       	ldi	r20, 0x03	; 3
    1972:	d6 01       	movw	r26, r12
    1974:	11 96       	adiw	r26, 0x01	; 1
    1976:	6c 91       	ld	r22, X
    1978:	83 ea       	ldi	r24, 0xA3	; 163
    197a:	92 e0       	ldi	r25, 0x02	; 2
    197c:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <formdatagram>
			uart1putcs(datagramG);
    1980:	83 ea       	ldi	r24, 0xA3	; 163
    1982:	92 e0       	ldi	r25, 0x02	; 2
    1984:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uart1putcs>
		break;
    1988:	ad c0       	rjmp	.+346    	; 0x1ae4 <parseMotorOp+0x496>
		case MOTOR_GET_GAIN_P:
			dgrammem.fl = motor->gainP/PID_SCALE;
    198a:	f8 01       	movw	r30, r16
    198c:	60 89       	ldd	r22, Z+16	; 0x10
    198e:	71 89       	ldd	r23, Z+17	; 0x11
    1990:	77 23       	and	r23, r23
    1992:	14 f4       	brge	.+4      	; 0x1998 <parseMotorOp+0x34a>
    1994:	61 58       	subi	r22, 0x81	; 129
    1996:	7f 4f       	sbci	r23, 0xFF	; 255
    1998:	66 0f       	add	r22, r22
    199a:	67 2f       	mov	r22, r23
    199c:	66 1f       	adc	r22, r22
    199e:	77 0b       	sbc	r23, r23
    19a0:	07 2e       	mov	r0, r23
    19a2:	00 0c       	add	r0, r0
    19a4:	88 0b       	sbc	r24, r24
    19a6:	99 0b       	sbc	r25, r25
    19a8:	0e 94 ce 1a 	call	0x359c	; 0x359c <__floatsisf>
    19ac:	60 93 4b 02 	sts	0x024B, r22	; 0x80024b <dgrammem>
    19b0:	70 93 4c 02 	sts	0x024C, r23	; 0x80024c <dgrammem+0x1>
    19b4:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <dgrammem+0x2>
    19b8:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <dgrammem+0x3>
			formdatagram(datagramG, datagram[1], MOTOR_SET_GAIN_P, dgrammem, 'f');
    19bc:	8b 01       	movw	r16, r22
    19be:	9c 01       	movw	r18, r24
    19c0:	0f 2e       	mov	r0, r31
    19c2:	f6 e6       	ldi	r31, 0x66	; 102
    19c4:	ef 2e       	mov	r14, r31
    19c6:	f0 2d       	mov	r31, r0
    19c8:	44 e0       	ldi	r20, 0x04	; 4
    19ca:	d6 01       	movw	r26, r12
    19cc:	11 96       	adiw	r26, 0x01	; 1
    19ce:	6c 91       	ld	r22, X
    19d0:	83 ea       	ldi	r24, 0xA3	; 163
    19d2:	92 e0       	ldi	r25, 0x02	; 2
    19d4:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <formdatagram>
			uart1putcs(datagramG);
    19d8:	83 ea       	ldi	r24, 0xA3	; 163
    19da:	92 e0       	ldi	r25, 0x02	; 2
    19dc:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uart1putcs>
		break;	
    19e0:	81 c0       	rjmp	.+258    	; 0x1ae4 <parseMotorOp+0x496>
		case MOTOR_GET_GAIN_I:
			dgrammem.fl = motor->gainI/PID_SCALE;
    19e2:	f8 01       	movw	r30, r16
    19e4:	62 89       	ldd	r22, Z+18	; 0x12
    19e6:	73 89       	ldd	r23, Z+19	; 0x13
    19e8:	77 23       	and	r23, r23
    19ea:	14 f4       	brge	.+4      	; 0x19f0 <parseMotorOp+0x3a2>
    19ec:	61 58       	subi	r22, 0x81	; 129
    19ee:	7f 4f       	sbci	r23, 0xFF	; 255
    19f0:	66 0f       	add	r22, r22
    19f2:	67 2f       	mov	r22, r23
    19f4:	66 1f       	adc	r22, r22
    19f6:	77 0b       	sbc	r23, r23
    19f8:	07 2e       	mov	r0, r23
    19fa:	00 0c       	add	r0, r0
    19fc:	88 0b       	sbc	r24, r24
    19fe:	99 0b       	sbc	r25, r25
    1a00:	0e 94 ce 1a 	call	0x359c	; 0x359c <__floatsisf>
    1a04:	60 93 4b 02 	sts	0x024B, r22	; 0x80024b <dgrammem>
    1a08:	70 93 4c 02 	sts	0x024C, r23	; 0x80024c <dgrammem+0x1>
    1a0c:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <dgrammem+0x2>
    1a10:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <dgrammem+0x3>
			formdatagram(datagramG, datagram[1], MOTOR_SET_GAIN_I, dgrammem, 'f');
    1a14:	8b 01       	movw	r16, r22
    1a16:	9c 01       	movw	r18, r24
    1a18:	0f 2e       	mov	r0, r31
    1a1a:	f6 e6       	ldi	r31, 0x66	; 102
    1a1c:	ef 2e       	mov	r14, r31
    1a1e:	f0 2d       	mov	r31, r0
    1a20:	45 e0       	ldi	r20, 0x05	; 5
    1a22:	d6 01       	movw	r26, r12
    1a24:	11 96       	adiw	r26, 0x01	; 1
    1a26:	6c 91       	ld	r22, X
    1a28:	83 ea       	ldi	r24, 0xA3	; 163
    1a2a:	92 e0       	ldi	r25, 0x02	; 2
    1a2c:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <formdatagram>
			uart1putcs(datagramG);
    1a30:	83 ea       	ldi	r24, 0xA3	; 163
    1a32:	92 e0       	ldi	r25, 0x02	; 2
    1a34:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uart1putcs>
		break;
    1a38:	55 c0       	rjmp	.+170    	; 0x1ae4 <parseMotorOp+0x496>
		case MOTOR_GET_GAIN_D:
			dgrammem.fl = motor->gainD/PID_SCALE;
    1a3a:	f8 01       	movw	r30, r16
    1a3c:	64 89       	ldd	r22, Z+20	; 0x14
    1a3e:	75 89       	ldd	r23, Z+21	; 0x15
    1a40:	77 23       	and	r23, r23
    1a42:	14 f4       	brge	.+4      	; 0x1a48 <parseMotorOp+0x3fa>
    1a44:	61 58       	subi	r22, 0x81	; 129
    1a46:	7f 4f       	sbci	r23, 0xFF	; 255
    1a48:	66 0f       	add	r22, r22
    1a4a:	67 2f       	mov	r22, r23
    1a4c:	66 1f       	adc	r22, r22
    1a4e:	77 0b       	sbc	r23, r23
    1a50:	07 2e       	mov	r0, r23
    1a52:	00 0c       	add	r0, r0
    1a54:	88 0b       	sbc	r24, r24
    1a56:	99 0b       	sbc	r25, r25
    1a58:	0e 94 ce 1a 	call	0x359c	; 0x359c <__floatsisf>
    1a5c:	60 93 4b 02 	sts	0x024B, r22	; 0x80024b <dgrammem>
    1a60:	70 93 4c 02 	sts	0x024C, r23	; 0x80024c <dgrammem+0x1>
    1a64:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <dgrammem+0x2>
    1a68:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <dgrammem+0x3>
			formdatagram(datagramG, datagram[1], MOTOR_SET_GAIN_D, dgrammem, 'f');
    1a6c:	8b 01       	movw	r16, r22
    1a6e:	9c 01       	movw	r18, r24
    1a70:	0f 2e       	mov	r0, r31
    1a72:	f6 e6       	ldi	r31, 0x66	; 102
    1a74:	ef 2e       	mov	r14, r31
    1a76:	f0 2d       	mov	r31, r0
    1a78:	46 e0       	ldi	r20, 0x06	; 6
    1a7a:	d6 01       	movw	r26, r12
    1a7c:	11 96       	adiw	r26, 0x01	; 1
    1a7e:	6c 91       	ld	r22, X
    1a80:	83 ea       	ldi	r24, 0xA3	; 163
    1a82:	92 e0       	ldi	r25, 0x02	; 2
    1a84:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <formdatagram>
			uart1putcs(datagramG);
    1a88:	83 ea       	ldi	r24, 0xA3	; 163
    1a8a:	92 e0       	ldi	r25, 0x02	; 2
    1a8c:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uart1putcs>
		break;
    1a90:	29 c0       	rjmp	.+82     	; 0x1ae4 <parseMotorOp+0x496>
		case MOTOR_GET_ENC_MODE:
			dgrammem.ch = motor->encoderMode;
    1a92:	f8 01       	movw	r30, r16
    1a94:	84 81       	ldd	r24, Z+4	; 0x04
    1a96:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <dgrammem>
			formdatagram(datagramG, datagram[1], MOTOR_SET_ENC_MODE, dgrammem, 'c');
    1a9a:	00 91 4b 02 	lds	r16, 0x024B	; 0x80024b <dgrammem>
    1a9e:	10 91 4c 02 	lds	r17, 0x024C	; 0x80024c <dgrammem+0x1>
    1aa2:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <dgrammem+0x2>
    1aa6:	30 91 4e 02 	lds	r19, 0x024E	; 0x80024e <dgrammem+0x3>
    1aaa:	0f 2e       	mov	r0, r31
    1aac:	f3 e6       	ldi	r31, 0x63	; 99
    1aae:	ef 2e       	mov	r14, r31
    1ab0:	f0 2d       	mov	r31, r0
    1ab2:	47 e0       	ldi	r20, 0x07	; 7
    1ab4:	d6 01       	movw	r26, r12
    1ab6:	11 96       	adiw	r26, 0x01	; 1
    1ab8:	6c 91       	ld	r22, X
    1aba:	83 ea       	ldi	r24, 0xA3	; 163
    1abc:	92 e0       	ldi	r25, 0x02	; 2
    1abe:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <formdatagram>
			uart1putcs(datagramG);
    1ac2:	83 ea       	ldi	r24, 0xA3	; 163
    1ac4:	92 e0       	ldi	r25, 0x02	; 2
    1ac6:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uart1putcs>
		break;
    1aca:	0c c0       	rjmp	.+24     	; 0x1ae4 <parseMotorOp+0x496>
		
		default:
			uart1_puts_P("ERROR: Unknown OpCode\n");
    1acc:	87 ea       	ldi	r24, 0xA7	; 167
    1ace:	94 e0       	ldi	r25, 0x04	; 4
    1ad0:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
			//flash BLUE LED
			ledB.state = 1;
    1ad4:	ea eb       	ldi	r30, 0xBA	; 186
    1ad6:	f2 e0       	ldi	r31, 0x02	; 2
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	80 83       	st	Z, r24
			ledB.count = 1000;
    1adc:	88 ee       	ldi	r24, 0xE8	; 232
    1ade:	93 e0       	ldi	r25, 0x03	; 3
    1ae0:	94 83       	std	Z+4, r25	; 0x04
    1ae2:	83 83       	std	Z+3, r24	; 0x03
		break;		
	}
}
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	1f 91       	pop	r17
    1af2:	0f 91       	pop	r16
    1af4:	ef 90       	pop	r14
    1af6:	df 90       	pop	r13
    1af8:	cf 90       	pop	r12
    1afa:	08 95       	ret

00001afc <parseServoOp>:

void parseServoOp(uint8_t *datagram, Servo *servo){
    1afc:	cf 92       	push	r12
    1afe:	df 92       	push	r13
    1b00:	ef 92       	push	r14
    1b02:	ff 92       	push	r15
    1b04:	0f 93       	push	r16
    1b06:	1f 93       	push	r17
    1b08:	fc 01       	movw	r30, r24
	switch(datagram[2]){
    1b0a:	92 81       	ldd	r25, Z+2	; 0x02
    1b0c:	96 30       	cpi	r25, 0x06	; 6
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <parseServoOp+0x16>
    1b10:	f9 c0       	rjmp	.+498    	; 0x1d04 <parseServoOp+0x208>
    1b12:	88 f4       	brcc	.+34     	; 0x1b36 <parseServoOp+0x3a>
    1b14:	93 30       	cpi	r25, 0x03	; 3
    1b16:	09 f4       	brne	.+2      	; 0x1b1a <parseServoOp+0x1e>
    1b18:	6c c0       	rjmp	.+216    	; 0x1bf2 <parseServoOp+0xf6>
    1b1a:	30 f4       	brcc	.+12     	; 0x1b28 <parseServoOp+0x2c>
    1b1c:	91 30       	cpi	r25, 0x01	; 1
    1b1e:	f9 f0       	breq	.+62     	; 0x1b5e <parseServoOp+0x62>
    1b20:	92 30       	cpi	r25, 0x02	; 2
    1b22:	09 f4       	brne	.+2      	; 0x1b26 <parseServoOp+0x2a>
    1b24:	54 c0       	rjmp	.+168    	; 0x1bce <parseServoOp+0xd2>
    1b26:	ca c1       	rjmp	.+916    	; 0x1ebc <parseServoOp+0x3c0>
    1b28:	94 30       	cpi	r25, 0x04	; 4
    1b2a:	09 f4       	brne	.+2      	; 0x1b2e <parseServoOp+0x32>
    1b2c:	96 c0       	rjmp	.+300    	; 0x1c5a <parseServoOp+0x15e>
    1b2e:	95 30       	cpi	r25, 0x05	; 5
    1b30:	09 f4       	brne	.+2      	; 0x1b34 <parseServoOp+0x38>
    1b32:	c7 c0       	rjmp	.+398    	; 0x1cc2 <parseServoOp+0x1c6>
    1b34:	c3 c1       	rjmp	.+902    	; 0x1ebc <parseServoOp+0x3c0>
    1b36:	93 38       	cpi	r25, 0x83	; 131
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <parseServoOp+0x40>
    1b3a:	40 c1       	rjmp	.+640    	; 0x1dbc <parseServoOp+0x2c0>
    1b3c:	38 f4       	brcc	.+14     	; 0x1b4c <parseServoOp+0x50>
    1b3e:	91 38       	cpi	r25, 0x81	; 129
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <parseServoOp+0x48>
    1b42:	01 c1       	rjmp	.+514    	; 0x1d46 <parseServoOp+0x24a>
    1b44:	92 38       	cpi	r25, 0x82	; 130
    1b46:	09 f4       	brne	.+2      	; 0x1b4a <parseServoOp+0x4e>
    1b48:	1e c1       	rjmp	.+572    	; 0x1d86 <parseServoOp+0x28a>
    1b4a:	b8 c1       	rjmp	.+880    	; 0x1ebc <parseServoOp+0x3c0>
    1b4c:	95 38       	cpi	r25, 0x85	; 133
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <parseServoOp+0x56>
    1b50:	75 c1       	rjmp	.+746    	; 0x1e3c <parseServoOp+0x340>
    1b52:	08 f4       	brcc	.+2      	; 0x1b56 <parseServoOp+0x5a>
    1b54:	53 c1       	rjmp	.+678    	; 0x1dfc <parseServoOp+0x300>
    1b56:	96 38       	cpi	r25, 0x86	; 134
    1b58:	09 f4       	brne	.+2      	; 0x1b5c <parseServoOp+0x60>
    1b5a:	90 c1       	rjmp	.+800    	; 0x1e7c <parseServoOp+0x380>
    1b5c:	af c1       	rjmp	.+862    	; 0x1ebc <parseServoOp+0x3c0>
		//SETTERS
		case SERVO_SET_POSITION:
			if(datagram[0] == 5){
    1b5e:	80 81       	ld	r24, Z
    1b60:	85 30       	cpi	r24, 0x05	; 5
    1b62:	81 f5       	brne	.+96     	; 0x1bc4 <parseServoOp+0xc8>
				int16_t pos = (datagram[3]<<8)|datagram[4];
    1b64:	83 81       	ldd	r24, Z+3	; 0x03
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	98 2f       	mov	r25, r24
    1b6a:	88 27       	eor	r24, r24
    1b6c:	24 81       	ldd	r18, Z+4	; 0x04
    1b6e:	82 2b       	or	r24, r18
				if(pos > servo->maxRange) pos = servo->maxRange;
    1b70:	8c 01       	movw	r16, r24
    1b72:	09 2e       	mov	r0, r25
    1b74:	00 0c       	add	r0, r0
    1b76:	22 0b       	sbc	r18, r18
    1b78:	33 0b       	sbc	r19, r19
    1b7a:	db 01       	movw	r26, r22
    1b7c:	19 96       	adiw	r26, 0x09	; 9
    1b7e:	cd 90       	ld	r12, X+
    1b80:	dd 90       	ld	r13, X+
    1b82:	ed 90       	ld	r14, X+
    1b84:	fc 90       	ld	r15, X
    1b86:	1c 97       	sbiw	r26, 0x0c	; 12
    1b88:	c0 16       	cp	r12, r16
    1b8a:	d1 06       	cpc	r13, r17
    1b8c:	e2 06       	cpc	r14, r18
    1b8e:	f3 06       	cpc	r15, r19
    1b90:	14 f4       	brge	.+4      	; 0x1b96 <parseServoOp+0x9a>
    1b92:	c6 01       	movw	r24, r12
    1b94:	0b c0       	rjmp	.+22     	; 0x1bac <parseServoOp+0xb0>
				else if(pos < servo->minRange) pos = servo->minRange;
    1b96:	fb 01       	movw	r30, r22
    1b98:	c5 80       	ldd	r12, Z+5	; 0x05
    1b9a:	d6 80       	ldd	r13, Z+6	; 0x06
    1b9c:	e7 80       	ldd	r14, Z+7	; 0x07
    1b9e:	f0 84       	ldd	r15, Z+8	; 0x08
    1ba0:	0c 15       	cp	r16, r12
    1ba2:	1d 05       	cpc	r17, r13
    1ba4:	2e 05       	cpc	r18, r14
    1ba6:	3f 05       	cpc	r19, r15
    1ba8:	0c f4       	brge	.+2      	; 0x1bac <parseServoOp+0xb0>
    1baa:	c6 01       	movw	r24, r12
				servo->setPos = pos;
    1bac:	09 2e       	mov	r0, r25
    1bae:	00 0c       	add	r0, r0
    1bb0:	aa 0b       	sbc	r26, r26
    1bb2:	bb 0b       	sbc	r27, r27
    1bb4:	fb 01       	movw	r30, r22
    1bb6:	81 83       	std	Z+1, r24	; 0x01
    1bb8:	92 83       	std	Z+2, r25	; 0x02
    1bba:	a3 83       	std	Z+3, r26	; 0x03
    1bbc:	b4 83       	std	Z+4, r27	; 0x04
				servo->state = 1;
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	80 83       	st	Z, r24
    1bc2:	88 c1       	rjmp	.+784    	; 0x1ed4 <parseServoOp+0x3d8>
			}else{
				uart1_puts_P("ERROR: Incorrect Type\n");
    1bc4:	80 e9       	ldi	r24, 0x90	; 144
    1bc6:	94 e0       	ldi	r25, 0x04	; 4
    1bc8:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    1bcc:	83 c1       	rjmp	.+774    	; 0x1ed4 <parseServoOp+0x3d8>
			}
		break;
		case SERVO_SET_STATE:
			if(datagram[0] == 4){
    1bce:	80 81       	ld	r24, Z
    1bd0:	84 30       	cpi	r24, 0x04	; 4
    1bd2:	51 f4       	brne	.+20     	; 0x1be8 <parseServoOp+0xec>
				int8_t state = datagram[3];
				if(state >= 1) servo->state = 1;
    1bd4:	83 81       	ldd	r24, Z+3	; 0x03
    1bd6:	18 16       	cp	r1, r24
    1bd8:	24 f4       	brge	.+8      	; 0x1be2 <parseServoOp+0xe6>
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	db 01       	movw	r26, r22
    1bde:	8c 93       	st	X, r24
    1be0:	79 c1       	rjmp	.+754    	; 0x1ed4 <parseServoOp+0x3d8>
				else servo->state = 0;
    1be2:	fb 01       	movw	r30, r22
    1be4:	10 82       	st	Z, r1
    1be6:	76 c1       	rjmp	.+748    	; 0x1ed4 <parseServoOp+0x3d8>
			}else{
				uart1_puts_P("ERROR: Incorrect Type\n");
    1be8:	89 e7       	ldi	r24, 0x79	; 121
    1bea:	94 e0       	ldi	r25, 0x04	; 4
    1bec:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    1bf0:	71 c1       	rjmp	.+738    	; 0x1ed4 <parseServoOp+0x3d8>
			}
		break;
		case SERVO_SET_MIN_RANGE:
			if(datagram[0] == 5){
    1bf2:	80 81       	ld	r24, Z
    1bf4:	85 30       	cpi	r24, 0x05	; 5
    1bf6:	61 f5       	brne	.+88     	; 0x1c50 <parseServoOp+0x154>
				int16_t min = (datagram[3]<<8)|datagram[4];
    1bf8:	83 81       	ldd	r24, Z+3	; 0x03
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	98 2f       	mov	r25, r24
    1bfe:	88 27       	eor	r24, r24
    1c00:	24 81       	ldd	r18, Z+4	; 0x04
    1c02:	82 2b       	or	r24, r18
    1c04:	99 23       	and	r25, r25
    1c06:	14 f4       	brge	.+4      	; 0x1c0c <parseServoOp+0x110>
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	89 36       	cpi	r24, 0x69	; 105
    1c0e:	f1 e0       	ldi	r31, 0x01	; 1
    1c10:	9f 07       	cpc	r25, r31
    1c12:	14 f0       	brlt	.+4      	; 0x1c18 <parseServoOp+0x11c>
    1c14:	88 e6       	ldi	r24, 0x68	; 104
    1c16:	91 e0       	ldi	r25, 0x01	; 1
				if(min < 0) min = 0;
				if(min > 360) min = 360;
				if(min > servo->maxRange) min = servo->maxRange;
    1c18:	db 01       	movw	r26, r22
    1c1a:	19 96       	adiw	r26, 0x09	; 9
    1c1c:	0d 91       	ld	r16, X+
    1c1e:	1d 91       	ld	r17, X+
    1c20:	2d 91       	ld	r18, X+
    1c22:	3c 91       	ld	r19, X
    1c24:	1c 97       	sbiw	r26, 0x0c	; 12
    1c26:	6c 01       	movw	r12, r24
    1c28:	09 2e       	mov	r0, r25
    1c2a:	00 0c       	add	r0, r0
    1c2c:	ee 08       	sbc	r14, r14
    1c2e:	ff 08       	sbc	r15, r15
    1c30:	0c 15       	cp	r16, r12
    1c32:	1d 05       	cpc	r17, r13
    1c34:	2e 05       	cpc	r18, r14
    1c36:	3f 05       	cpc	r19, r15
    1c38:	0c f4       	brge	.+2      	; 0x1c3c <parseServoOp+0x140>
    1c3a:	c8 01       	movw	r24, r16
				servo->minRange = min;
    1c3c:	09 2e       	mov	r0, r25
    1c3e:	00 0c       	add	r0, r0
    1c40:	aa 0b       	sbc	r26, r26
    1c42:	bb 0b       	sbc	r27, r27
    1c44:	fb 01       	movw	r30, r22
    1c46:	85 83       	std	Z+5, r24	; 0x05
    1c48:	96 83       	std	Z+6, r25	; 0x06
    1c4a:	a7 83       	std	Z+7, r26	; 0x07
    1c4c:	b0 87       	std	Z+8, r27	; 0x08
    1c4e:	42 c1       	rjmp	.+644    	; 0x1ed4 <parseServoOp+0x3d8>
			}else{
				uart1_puts_P("ERROR: Incorrect Type\n");
    1c50:	82 e6       	ldi	r24, 0x62	; 98
    1c52:	94 e0       	ldi	r25, 0x04	; 4
    1c54:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    1c58:	3d c1       	rjmp	.+634    	; 0x1ed4 <parseServoOp+0x3d8>
			}
		break;
		case SERVO_SET_MAX_RANGE:
			if(datagram[0] == 5){
    1c5a:	80 81       	ld	r24, Z
    1c5c:	85 30       	cpi	r24, 0x05	; 5
    1c5e:	61 f5       	brne	.+88     	; 0x1cb8 <parseServoOp+0x1bc>
				int16_t max = (datagram[3]<<8)|datagram[4];
    1c60:	83 81       	ldd	r24, Z+3	; 0x03
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	98 2f       	mov	r25, r24
    1c66:	88 27       	eor	r24, r24
    1c68:	24 81       	ldd	r18, Z+4	; 0x04
    1c6a:	82 2b       	or	r24, r18
    1c6c:	99 23       	and	r25, r25
    1c6e:	14 f4       	brge	.+4      	; 0x1c74 <parseServoOp+0x178>
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	89 36       	cpi	r24, 0x69	; 105
    1c76:	f1 e0       	ldi	r31, 0x01	; 1
    1c78:	9f 07       	cpc	r25, r31
    1c7a:	14 f0       	brlt	.+4      	; 0x1c80 <parseServoOp+0x184>
    1c7c:	88 e6       	ldi	r24, 0x68	; 104
    1c7e:	91 e0       	ldi	r25, 0x01	; 1
				if(max < 0) max = 0;
				if(max > 360) max = 360;
				if(max < servo->minRange) max = servo->minRange;
    1c80:	db 01       	movw	r26, r22
    1c82:	15 96       	adiw	r26, 0x05	; 5
    1c84:	0d 91       	ld	r16, X+
    1c86:	1d 91       	ld	r17, X+
    1c88:	2d 91       	ld	r18, X+
    1c8a:	3c 91       	ld	r19, X
    1c8c:	18 97       	sbiw	r26, 0x08	; 8
    1c8e:	6c 01       	movw	r12, r24
    1c90:	09 2e       	mov	r0, r25
    1c92:	00 0c       	add	r0, r0
    1c94:	ee 08       	sbc	r14, r14
    1c96:	ff 08       	sbc	r15, r15
    1c98:	c0 16       	cp	r12, r16
    1c9a:	d1 06       	cpc	r13, r17
    1c9c:	e2 06       	cpc	r14, r18
    1c9e:	f3 06       	cpc	r15, r19
    1ca0:	0c f4       	brge	.+2      	; 0x1ca4 <parseServoOp+0x1a8>
    1ca2:	c8 01       	movw	r24, r16
				servo->maxRange = max;
    1ca4:	09 2e       	mov	r0, r25
    1ca6:	00 0c       	add	r0, r0
    1ca8:	aa 0b       	sbc	r26, r26
    1caa:	bb 0b       	sbc	r27, r27
    1cac:	fb 01       	movw	r30, r22
    1cae:	81 87       	std	Z+9, r24	; 0x09
    1cb0:	92 87       	std	Z+10, r25	; 0x0a
    1cb2:	a3 87       	std	Z+11, r26	; 0x0b
    1cb4:	b4 87       	std	Z+12, r27	; 0x0c
    1cb6:	0e c1       	rjmp	.+540    	; 0x1ed4 <parseServoOp+0x3d8>
			}else{
				uart1_puts_P("ERROR: Incorrect Type\n");
    1cb8:	8b e4       	ldi	r24, 0x4B	; 75
    1cba:	94 e0       	ldi	r25, 0x04	; 4
    1cbc:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    1cc0:	09 c1       	rjmp	.+530    	; 0x1ed4 <parseServoOp+0x3d8>
			}
		break;
		case SERVO_SET_MIN_PWM:
			if(datagram[0] == 5){
    1cc2:	80 81       	ld	r24, Z
    1cc4:	85 30       	cpi	r24, 0x05	; 5
    1cc6:	c9 f4       	brne	.+50     	; 0x1cfa <parseServoOp+0x1fe>
				uint16_t min = (datagram[3]<<8)|datagram[4];
    1cc8:	83 81       	ldd	r24, Z+3	; 0x03
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	98 2f       	mov	r25, r24
    1cce:	88 27       	eor	r24, r24
    1cd0:	24 81       	ldd	r18, Z+4	; 0x04
    1cd2:	82 2b       	or	r24, r18
    1cd4:	db 01       	movw	r26, r22
    1cd6:	1f 96       	adiw	r26, 0x0f	; 15
    1cd8:	2d 91       	ld	r18, X+
    1cda:	3c 91       	ld	r19, X
    1cdc:	50 97       	sbiw	r26, 0x10	; 16
    1cde:	21 33       	cpi	r18, 0x31	; 49
    1ce0:	b5 e7       	ldi	r27, 0x75	; 117
    1ce2:	3b 07       	cpc	r19, r27
    1ce4:	10 f0       	brcs	.+4      	; 0x1cea <parseServoOp+0x1ee>
    1ce6:	20 e3       	ldi	r18, 0x30	; 48
    1ce8:	35 e7       	ldi	r19, 0x75	; 117
    1cea:	82 17       	cp	r24, r18
    1cec:	93 07       	cpc	r25, r19
    1cee:	08 f4       	brcc	.+2      	; 0x1cf2 <parseServoOp+0x1f6>
    1cf0:	9c 01       	movw	r18, r24
				if(min < 0) min = 0;
				if(min > 30000) min = 30000;
				if(min > servo->maxPWM) min = servo->maxPWM;
				servo->minPWM = min;
    1cf2:	fb 01       	movw	r30, r22
    1cf4:	36 87       	std	Z+14, r19	; 0x0e
    1cf6:	25 87       	std	Z+13, r18	; 0x0d
    1cf8:	ed c0       	rjmp	.+474    	; 0x1ed4 <parseServoOp+0x3d8>
			}else{
				uart1_puts_P("ERROR: Incorrect Type\n");
    1cfa:	84 e3       	ldi	r24, 0x34	; 52
    1cfc:	94 e0       	ldi	r25, 0x04	; 4
    1cfe:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    1d02:	e8 c0       	rjmp	.+464    	; 0x1ed4 <parseServoOp+0x3d8>
			}
		break;
		case SERVO_SET_MAX_PWM:
			if(datagram[0] == 5){
    1d04:	80 81       	ld	r24, Z
    1d06:	85 30       	cpi	r24, 0x05	; 5
    1d08:	c9 f4       	brne	.+50     	; 0x1d3c <parseServoOp+0x240>
				uint16_t max = (datagram[3]<<8)|datagram[4];
    1d0a:	83 81       	ldd	r24, Z+3	; 0x03
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	98 2f       	mov	r25, r24
    1d10:	88 27       	eor	r24, r24
    1d12:	24 81       	ldd	r18, Z+4	; 0x04
    1d14:	82 2b       	or	r24, r18
    1d16:	81 33       	cpi	r24, 0x31	; 49
    1d18:	f5 e7       	ldi	r31, 0x75	; 117
    1d1a:	9f 07       	cpc	r25, r31
    1d1c:	10 f0       	brcs	.+4      	; 0x1d22 <parseServoOp+0x226>
    1d1e:	80 e3       	ldi	r24, 0x30	; 48
    1d20:	95 e7       	ldi	r25, 0x75	; 117
				if(max < 0) max = 0;
				if(max > 30000) max = 30000;
				if(max < servo->minPWM) max = servo->minPWM;
    1d22:	db 01       	movw	r26, r22
    1d24:	1d 96       	adiw	r26, 0x0d	; 13
    1d26:	2d 91       	ld	r18, X+
    1d28:	3c 91       	ld	r19, X
    1d2a:	1e 97       	sbiw	r26, 0x0e	; 14
    1d2c:	82 17       	cp	r24, r18
    1d2e:	93 07       	cpc	r25, r19
    1d30:	08 f4       	brcc	.+2      	; 0x1d34 <parseServoOp+0x238>
    1d32:	c9 01       	movw	r24, r18
				servo->maxPWM = max;
    1d34:	fb 01       	movw	r30, r22
    1d36:	90 8b       	std	Z+16, r25	; 0x10
    1d38:	87 87       	std	Z+15, r24	; 0x0f
    1d3a:	cc c0       	rjmp	.+408    	; 0x1ed4 <parseServoOp+0x3d8>
			}else{
				uart1_puts_P("ERROR: Incorrect Type\n");
    1d3c:	8d e1       	ldi	r24, 0x1D	; 29
    1d3e:	94 e0       	ldi	r25, 0x04	; 4
    1d40:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    1d44:	c7 c0       	rjmp	.+398    	; 0x1ed4 <parseServoOp+0x3d8>
			}
		break;

		//GETTERS
		case SERVO_GET_POSITION:
			dgrammem.in = servo->setPos;
    1d46:	db 01       	movw	r26, r22
    1d48:	11 96       	adiw	r26, 0x01	; 1
    1d4a:	8d 91       	ld	r24, X+
    1d4c:	9c 91       	ld	r25, X
    1d4e:	12 97       	sbiw	r26, 0x02	; 2
    1d50:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <dgrammem+0x1>
    1d54:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <dgrammem>
			formdatagram(datagramG, datagram[1], SERVO_SET_POSITION, dgrammem, 'i');
    1d58:	00 91 4b 02 	lds	r16, 0x024B	; 0x80024b <dgrammem>
    1d5c:	10 91 4c 02 	lds	r17, 0x024C	; 0x80024c <dgrammem+0x1>
    1d60:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <dgrammem+0x2>
    1d64:	30 91 4e 02 	lds	r19, 0x024E	; 0x80024e <dgrammem+0x3>
    1d68:	0f 2e       	mov	r0, r31
    1d6a:	f9 e6       	ldi	r31, 0x69	; 105
    1d6c:	ef 2e       	mov	r14, r31
    1d6e:	f0 2d       	mov	r31, r0
    1d70:	41 e0       	ldi	r20, 0x01	; 1
    1d72:	61 81       	ldd	r22, Z+1	; 0x01
    1d74:	83 ea       	ldi	r24, 0xA3	; 163
    1d76:	92 e0       	ldi	r25, 0x02	; 2
    1d78:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <formdatagram>
			uart1putcs(datagramG);
    1d7c:	83 ea       	ldi	r24, 0xA3	; 163
    1d7e:	92 e0       	ldi	r25, 0x02	; 2
    1d80:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uart1putcs>
		break;
    1d84:	a7 c0       	rjmp	.+334    	; 0x1ed4 <parseServoOp+0x3d8>
		case SERVO_GET_STATE:
			dgrammem.ch = servo->state;
    1d86:	db 01       	movw	r26, r22
    1d88:	8c 91       	ld	r24, X
    1d8a:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <dgrammem>
			formdatagram(datagramG, datagram[1], SERVO_SET_STATE, dgrammem, 'c');
    1d8e:	00 91 4b 02 	lds	r16, 0x024B	; 0x80024b <dgrammem>
    1d92:	10 91 4c 02 	lds	r17, 0x024C	; 0x80024c <dgrammem+0x1>
    1d96:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <dgrammem+0x2>
    1d9a:	30 91 4e 02 	lds	r19, 0x024E	; 0x80024e <dgrammem+0x3>
    1d9e:	0f 2e       	mov	r0, r31
    1da0:	f3 e6       	ldi	r31, 0x63	; 99
    1da2:	ef 2e       	mov	r14, r31
    1da4:	f0 2d       	mov	r31, r0
    1da6:	42 e0       	ldi	r20, 0x02	; 2
    1da8:	61 81       	ldd	r22, Z+1	; 0x01
    1daa:	83 ea       	ldi	r24, 0xA3	; 163
    1dac:	92 e0       	ldi	r25, 0x02	; 2
    1dae:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <formdatagram>
			uart1putcs(datagramG);
    1db2:	83 ea       	ldi	r24, 0xA3	; 163
    1db4:	92 e0       	ldi	r25, 0x02	; 2
    1db6:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uart1putcs>
		break;
    1dba:	8c c0       	rjmp	.+280    	; 0x1ed4 <parseServoOp+0x3d8>
		case SERVO_GET_MIN_RANGE:
			dgrammem.in = servo->minRange;
    1dbc:	db 01       	movw	r26, r22
    1dbe:	15 96       	adiw	r26, 0x05	; 5
    1dc0:	8d 91       	ld	r24, X+
    1dc2:	9c 91       	ld	r25, X
    1dc4:	16 97       	sbiw	r26, 0x06	; 6
    1dc6:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <dgrammem+0x1>
    1dca:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <dgrammem>
			formdatagram(datagramG, datagram[1], SERVO_SET_MIN_RANGE, dgrammem, 'i');
    1dce:	00 91 4b 02 	lds	r16, 0x024B	; 0x80024b <dgrammem>
    1dd2:	10 91 4c 02 	lds	r17, 0x024C	; 0x80024c <dgrammem+0x1>
    1dd6:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <dgrammem+0x2>
    1dda:	30 91 4e 02 	lds	r19, 0x024E	; 0x80024e <dgrammem+0x3>
    1dde:	0f 2e       	mov	r0, r31
    1de0:	f9 e6       	ldi	r31, 0x69	; 105
    1de2:	ef 2e       	mov	r14, r31
    1de4:	f0 2d       	mov	r31, r0
    1de6:	43 e0       	ldi	r20, 0x03	; 3
    1de8:	61 81       	ldd	r22, Z+1	; 0x01
    1dea:	83 ea       	ldi	r24, 0xA3	; 163
    1dec:	92 e0       	ldi	r25, 0x02	; 2
    1dee:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <formdatagram>
			uart1putcs(datagramG);
    1df2:	83 ea       	ldi	r24, 0xA3	; 163
    1df4:	92 e0       	ldi	r25, 0x02	; 2
    1df6:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uart1putcs>
		break;
    1dfa:	6c c0       	rjmp	.+216    	; 0x1ed4 <parseServoOp+0x3d8>
		case SERVO_GET_MAX_RANGE:
			dgrammem.in = servo->maxRange;
    1dfc:	db 01       	movw	r26, r22
    1dfe:	19 96       	adiw	r26, 0x09	; 9
    1e00:	8d 91       	ld	r24, X+
    1e02:	9c 91       	ld	r25, X
    1e04:	1a 97       	sbiw	r26, 0x0a	; 10
    1e06:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <dgrammem+0x1>
    1e0a:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <dgrammem>
			formdatagram(datagramG, datagram[1], SERVO_SET_MAX_RANGE, dgrammem, 'i');
    1e0e:	00 91 4b 02 	lds	r16, 0x024B	; 0x80024b <dgrammem>
    1e12:	10 91 4c 02 	lds	r17, 0x024C	; 0x80024c <dgrammem+0x1>
    1e16:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <dgrammem+0x2>
    1e1a:	30 91 4e 02 	lds	r19, 0x024E	; 0x80024e <dgrammem+0x3>
    1e1e:	0f 2e       	mov	r0, r31
    1e20:	f9 e6       	ldi	r31, 0x69	; 105
    1e22:	ef 2e       	mov	r14, r31
    1e24:	f0 2d       	mov	r31, r0
    1e26:	44 e0       	ldi	r20, 0x04	; 4
    1e28:	61 81       	ldd	r22, Z+1	; 0x01
    1e2a:	83 ea       	ldi	r24, 0xA3	; 163
    1e2c:	92 e0       	ldi	r25, 0x02	; 2
    1e2e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <formdatagram>
			uart1putcs(datagramG);
    1e32:	83 ea       	ldi	r24, 0xA3	; 163
    1e34:	92 e0       	ldi	r25, 0x02	; 2
    1e36:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uart1putcs>
		break;
    1e3a:	4c c0       	rjmp	.+152    	; 0x1ed4 <parseServoOp+0x3d8>
		case SERVO_GET_MIN_PWM:
			dgrammem.in = servo->minPWM;
    1e3c:	db 01       	movw	r26, r22
    1e3e:	1d 96       	adiw	r26, 0x0d	; 13
    1e40:	8d 91       	ld	r24, X+
    1e42:	9c 91       	ld	r25, X
    1e44:	1e 97       	sbiw	r26, 0x0e	; 14
    1e46:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <dgrammem+0x1>
    1e4a:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <dgrammem>
			formdatagram(datagramG, datagram[1], SERVO_SET_MIN_PWM, dgrammem, 'i');
    1e4e:	00 91 4b 02 	lds	r16, 0x024B	; 0x80024b <dgrammem>
    1e52:	10 91 4c 02 	lds	r17, 0x024C	; 0x80024c <dgrammem+0x1>
    1e56:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <dgrammem+0x2>
    1e5a:	30 91 4e 02 	lds	r19, 0x024E	; 0x80024e <dgrammem+0x3>
    1e5e:	0f 2e       	mov	r0, r31
    1e60:	f9 e6       	ldi	r31, 0x69	; 105
    1e62:	ef 2e       	mov	r14, r31
    1e64:	f0 2d       	mov	r31, r0
    1e66:	45 e0       	ldi	r20, 0x05	; 5
    1e68:	61 81       	ldd	r22, Z+1	; 0x01
    1e6a:	83 ea       	ldi	r24, 0xA3	; 163
    1e6c:	92 e0       	ldi	r25, 0x02	; 2
    1e6e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <formdatagram>
			uart1putcs(datagramG);
    1e72:	83 ea       	ldi	r24, 0xA3	; 163
    1e74:	92 e0       	ldi	r25, 0x02	; 2
    1e76:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uart1putcs>
		break;
    1e7a:	2c c0       	rjmp	.+88     	; 0x1ed4 <parseServoOp+0x3d8>
		case SERVO_GET_MAX_PWM:
			dgrammem.in = servo->maxPWM;
    1e7c:	db 01       	movw	r26, r22
    1e7e:	1f 96       	adiw	r26, 0x0f	; 15
    1e80:	8d 91       	ld	r24, X+
    1e82:	9c 91       	ld	r25, X
    1e84:	50 97       	sbiw	r26, 0x10	; 16
    1e86:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <dgrammem+0x1>
    1e8a:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <dgrammem>
			formdatagram(datagramG, datagram[1], SERVO_SET_MAX_PWM, dgrammem, 'i');
    1e8e:	00 91 4b 02 	lds	r16, 0x024B	; 0x80024b <dgrammem>
    1e92:	10 91 4c 02 	lds	r17, 0x024C	; 0x80024c <dgrammem+0x1>
    1e96:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <dgrammem+0x2>
    1e9a:	30 91 4e 02 	lds	r19, 0x024E	; 0x80024e <dgrammem+0x3>
    1e9e:	0f 2e       	mov	r0, r31
    1ea0:	f9 e6       	ldi	r31, 0x69	; 105
    1ea2:	ef 2e       	mov	r14, r31
    1ea4:	f0 2d       	mov	r31, r0
    1ea6:	46 e0       	ldi	r20, 0x06	; 6
    1ea8:	61 81       	ldd	r22, Z+1	; 0x01
    1eaa:	83 ea       	ldi	r24, 0xA3	; 163
    1eac:	92 e0       	ldi	r25, 0x02	; 2
    1eae:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <formdatagram>
			uart1putcs(datagramG);
    1eb2:	83 ea       	ldi	r24, 0xA3	; 163
    1eb4:	92 e0       	ldi	r25, 0x02	; 2
    1eb6:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uart1putcs>
		break;
    1eba:	0c c0       	rjmp	.+24     	; 0x1ed4 <parseServoOp+0x3d8>

		default:
			uart1_puts_P("ERROR: Unknown OpCode\n");
    1ebc:	86 e0       	ldi	r24, 0x06	; 6
    1ebe:	94 e0       	ldi	r25, 0x04	; 4
    1ec0:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
			//flash BLUE LED
			ledB.state = 1;
    1ec4:	ea eb       	ldi	r30, 0xBA	; 186
    1ec6:	f2 e0       	ldi	r31, 0x02	; 2
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	80 83       	st	Z, r24
			ledB.count = 1000;
    1ecc:	88 ee       	ldi	r24, 0xE8	; 232
    1ece:	93 e0       	ldi	r25, 0x03	; 3
    1ed0:	94 83       	std	Z+4, r25	; 0x04
    1ed2:	83 83       	std	Z+3, r24	; 0x03
		break;
	}
	
}
    1ed4:	1f 91       	pop	r17
    1ed6:	0f 91       	pop	r16
    1ed8:	ff 90       	pop	r15
    1eda:	ef 90       	pop	r14
    1edc:	df 90       	pop	r13
    1ede:	cf 90       	pop	r12
    1ee0:	08 95       	ret

00001ee2 <parseLEDOp>:

void parseLEDOp(uint8_t *datagram, LED *led){
    1ee2:	ef 92       	push	r14
    1ee4:	0f 93       	push	r16
    1ee6:	1f 93       	push	r17
    1ee8:	fc 01       	movw	r30, r24
	switch(datagram[2]){
    1eea:	92 81       	ldd	r25, Z+2	; 0x02
    1eec:	93 30       	cpi	r25, 0x03	; 3
    1eee:	09 f4       	brne	.+2      	; 0x1ef2 <parseLEDOp+0x10>
    1ef0:	44 c0       	rjmp	.+136    	; 0x1f7a <parseLEDOp+0x98>
    1ef2:	28 f4       	brcc	.+10     	; 0x1efe <parseLEDOp+0x1c>
    1ef4:	91 30       	cpi	r25, 0x01	; 1
    1ef6:	69 f0       	breq	.+26     	; 0x1f12 <parseLEDOp+0x30>
    1ef8:	92 30       	cpi	r25, 0x02	; 2
    1efa:	e9 f0       	breq	.+58     	; 0x1f36 <parseLEDOp+0x54>
    1efc:	a7 c0       	rjmp	.+334    	; 0x204c <parseLEDOp+0x16a>
    1efe:	92 38       	cpi	r25, 0x82	; 130
    1f00:	09 f4       	brne	.+2      	; 0x1f04 <parseLEDOp+0x22>
    1f02:	68 c0       	rjmp	.+208    	; 0x1fd4 <parseLEDOp+0xf2>
    1f04:	93 38       	cpi	r25, 0x83	; 131
    1f06:	09 f4       	brne	.+2      	; 0x1f0a <parseLEDOp+0x28>
    1f08:	81 c0       	rjmp	.+258    	; 0x200c <parseLEDOp+0x12a>
    1f0a:	91 38       	cpi	r25, 0x81	; 129
    1f0c:	09 f0       	breq	.+2      	; 0x1f10 <parseLEDOp+0x2e>
    1f0e:	9e c0       	rjmp	.+316    	; 0x204c <parseLEDOp+0x16a>
    1f10:	46 c0       	rjmp	.+140    	; 0x1f9e <parseLEDOp+0xbc>
		//SETTERS
		case LED_SET_STATE:
			if(datagram[0] == 4){
    1f12:	80 81       	ld	r24, Z
    1f14:	84 30       	cpi	r24, 0x04	; 4
    1f16:	51 f4       	brne	.+20     	; 0x1f2c <parseLEDOp+0x4a>
				int8_t state = datagram[3];
				if(state >= 1) led->state = 1;
    1f18:	83 81       	ldd	r24, Z+3	; 0x03
    1f1a:	18 16       	cp	r1, r24
    1f1c:	24 f4       	brge	.+8      	; 0x1f26 <parseLEDOp+0x44>
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	db 01       	movw	r26, r22
    1f22:	8c 93       	st	X, r24
    1f24:	9f c0       	rjmp	.+318    	; 0x2064 <parseLEDOp+0x182>
				else led->state = 0;
    1f26:	fb 01       	movw	r30, r22
    1f28:	10 82       	st	Z, r1
    1f2a:	9c c0       	rjmp	.+312    	; 0x2064 <parseLEDOp+0x182>
			}else{
				uart1_puts_P("ERROR: Incorrect Type\n");
    1f2c:	8f ee       	ldi	r24, 0xEF	; 239
    1f2e:	93 e0       	ldi	r25, 0x03	; 3
    1f30:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    1f34:	97 c0       	rjmp	.+302    	; 0x2064 <parseLEDOp+0x182>
			}
		break;
		case LED_SET_BRIGHTNESS:
			if(datagram[0] == 4){
    1f36:	80 81       	ld	r24, Z
    1f38:	84 30       	cpi	r24, 0x04	; 4
    1f3a:	d1 f4       	brne	.+52     	; 0x1f70 <parseLEDOp+0x8e>
				int8_t brightness = datagram[3];
    1f3c:	83 81       	ldd	r24, Z+3	; 0x03
				if(brightness > 100) led->brightness = 100;
    1f3e:	85 36       	cpi	r24, 0x65	; 101
    1f40:	44 f0       	brlt	.+16     	; 0x1f52 <parseLEDOp+0x70>
    1f42:	84 e6       	ldi	r24, 0x64	; 100
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	db 01       	movw	r26, r22
    1f48:	12 96       	adiw	r26, 0x02	; 2
    1f4a:	9c 93       	st	X, r25
    1f4c:	8e 93       	st	-X, r24
    1f4e:	11 97       	sbiw	r26, 0x01	; 1
    1f50:	89 c0       	rjmp	.+274    	; 0x2064 <parseLEDOp+0x182>
				else if(brightness > 0) led->brightness = brightness;
    1f52:	18 16       	cp	r1, r24
    1f54:	3c f4       	brge	.+14     	; 0x1f64 <parseLEDOp+0x82>
    1f56:	08 2e       	mov	r0, r24
    1f58:	00 0c       	add	r0, r0
    1f5a:	99 0b       	sbc	r25, r25
    1f5c:	fb 01       	movw	r30, r22
    1f5e:	92 83       	std	Z+2, r25	; 0x02
    1f60:	81 83       	std	Z+1, r24	; 0x01
    1f62:	80 c0       	rjmp	.+256    	; 0x2064 <parseLEDOp+0x182>
				else led->brightness = 0;
    1f64:	db 01       	movw	r26, r22
    1f66:	12 96       	adiw	r26, 0x02	; 2
    1f68:	1c 92       	st	X, r1
    1f6a:	1e 92       	st	-X, r1
    1f6c:	11 97       	sbiw	r26, 0x01	; 1
    1f6e:	7a c0       	rjmp	.+244    	; 0x2064 <parseLEDOp+0x182>
			}else{
				uart1_puts_P("ERROR: Incorrect Type\n");
    1f70:	88 ed       	ldi	r24, 0xD8	; 216
    1f72:	93 e0       	ldi	r25, 0x03	; 3
    1f74:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    1f78:	75 c0       	rjmp	.+234    	; 0x2064 <parseLEDOp+0x182>
			}
		break;
		case LED_SET_COUNT:
			if(datagram[0] == 5){
    1f7a:	80 81       	ld	r24, Z
    1f7c:	85 30       	cpi	r24, 0x05	; 5
    1f7e:	51 f4       	brne	.+20     	; 0x1f94 <parseLEDOp+0xb2>
				led->count = (datagram[3]<<8)|datagram[4];
    1f80:	83 81       	ldd	r24, Z+3	; 0x03
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	98 2f       	mov	r25, r24
    1f86:	88 27       	eor	r24, r24
    1f88:	24 81       	ldd	r18, Z+4	; 0x04
    1f8a:	82 2b       	or	r24, r18
    1f8c:	fb 01       	movw	r30, r22
    1f8e:	94 83       	std	Z+4, r25	; 0x04
    1f90:	83 83       	std	Z+3, r24	; 0x03
    1f92:	68 c0       	rjmp	.+208    	; 0x2064 <parseLEDOp+0x182>
			}else{
				uart1_puts_P("ERROR: Incorrect Type\n");
    1f94:	81 ec       	ldi	r24, 0xC1	; 193
    1f96:	93 e0       	ldi	r25, 0x03	; 3
    1f98:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    1f9c:	63 c0       	rjmp	.+198    	; 0x2064 <parseLEDOp+0x182>
			}
		break;

		//GETTERS
		case LED_GET_STATE:
			dgrammem.ch = led->state;
    1f9e:	db 01       	movw	r26, r22
    1fa0:	8c 91       	ld	r24, X
    1fa2:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <dgrammem>
			formdatagram(datagramG, datagram[1], LED_SET_STATE, dgrammem, 'c');
    1fa6:	00 91 4b 02 	lds	r16, 0x024B	; 0x80024b <dgrammem>
    1faa:	10 91 4c 02 	lds	r17, 0x024C	; 0x80024c <dgrammem+0x1>
    1fae:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <dgrammem+0x2>
    1fb2:	30 91 4e 02 	lds	r19, 0x024E	; 0x80024e <dgrammem+0x3>
    1fb6:	0f 2e       	mov	r0, r31
    1fb8:	f3 e6       	ldi	r31, 0x63	; 99
    1fba:	ef 2e       	mov	r14, r31
    1fbc:	f0 2d       	mov	r31, r0
    1fbe:	41 e0       	ldi	r20, 0x01	; 1
    1fc0:	61 81       	ldd	r22, Z+1	; 0x01
    1fc2:	83 ea       	ldi	r24, 0xA3	; 163
    1fc4:	92 e0       	ldi	r25, 0x02	; 2
    1fc6:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <formdatagram>
			uart1putcs(datagramG);
    1fca:	83 ea       	ldi	r24, 0xA3	; 163
    1fcc:	92 e0       	ldi	r25, 0x02	; 2
    1fce:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uart1putcs>
		break;
    1fd2:	48 c0       	rjmp	.+144    	; 0x2064 <parseLEDOp+0x182>
		case LED_GET_BRIGHTNESS:
			dgrammem.ch = led->brightness;
    1fd4:	db 01       	movw	r26, r22
    1fd6:	11 96       	adiw	r26, 0x01	; 1
    1fd8:	8c 91       	ld	r24, X
    1fda:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <dgrammem>
			formdatagram(datagramG, datagram[1], LED_SET_BRIGHTNESS, dgrammem, 'c');
    1fde:	00 91 4b 02 	lds	r16, 0x024B	; 0x80024b <dgrammem>
    1fe2:	10 91 4c 02 	lds	r17, 0x024C	; 0x80024c <dgrammem+0x1>
    1fe6:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <dgrammem+0x2>
    1fea:	30 91 4e 02 	lds	r19, 0x024E	; 0x80024e <dgrammem+0x3>
    1fee:	0f 2e       	mov	r0, r31
    1ff0:	f3 e6       	ldi	r31, 0x63	; 99
    1ff2:	ef 2e       	mov	r14, r31
    1ff4:	f0 2d       	mov	r31, r0
    1ff6:	42 e0       	ldi	r20, 0x02	; 2
    1ff8:	61 81       	ldd	r22, Z+1	; 0x01
    1ffa:	83 ea       	ldi	r24, 0xA3	; 163
    1ffc:	92 e0       	ldi	r25, 0x02	; 2
    1ffe:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <formdatagram>
			uart1putcs(datagramG);
    2002:	83 ea       	ldi	r24, 0xA3	; 163
    2004:	92 e0       	ldi	r25, 0x02	; 2
    2006:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uart1putcs>
		break;
    200a:	2c c0       	rjmp	.+88     	; 0x2064 <parseLEDOp+0x182>
		case LED_GET_COUNT:
			dgrammem.uin = led->count;
    200c:	db 01       	movw	r26, r22
    200e:	13 96       	adiw	r26, 0x03	; 3
    2010:	8d 91       	ld	r24, X+
    2012:	9c 91       	ld	r25, X
    2014:	14 97       	sbiw	r26, 0x04	; 4
    2016:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <dgrammem+0x1>
    201a:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <dgrammem>
			formdatagram(datagramG, datagram[1], LED_SET_COUNT, dgrammem, 'i');
    201e:	00 91 4b 02 	lds	r16, 0x024B	; 0x80024b <dgrammem>
    2022:	10 91 4c 02 	lds	r17, 0x024C	; 0x80024c <dgrammem+0x1>
    2026:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <dgrammem+0x2>
    202a:	30 91 4e 02 	lds	r19, 0x024E	; 0x80024e <dgrammem+0x3>
    202e:	0f 2e       	mov	r0, r31
    2030:	f9 e6       	ldi	r31, 0x69	; 105
    2032:	ef 2e       	mov	r14, r31
    2034:	f0 2d       	mov	r31, r0
    2036:	43 e0       	ldi	r20, 0x03	; 3
    2038:	61 81       	ldd	r22, Z+1	; 0x01
    203a:	83 ea       	ldi	r24, 0xA3	; 163
    203c:	92 e0       	ldi	r25, 0x02	; 2
    203e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <formdatagram>
			uart1putcs(datagramG);
    2042:	83 ea       	ldi	r24, 0xA3	; 163
    2044:	92 e0       	ldi	r25, 0x02	; 2
    2046:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uart1putcs>
		break;
    204a:	0c c0       	rjmp	.+24     	; 0x2064 <parseLEDOp+0x182>

		default:
			uart1_puts_P("ERROR: Unknown OpCode\n");
    204c:	8a ea       	ldi	r24, 0xAA	; 170
    204e:	93 e0       	ldi	r25, 0x03	; 3
    2050:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
			//flash BLUE LED
			ledB.state = 1;
    2054:	ea eb       	ldi	r30, 0xBA	; 186
    2056:	f2 e0       	ldi	r31, 0x02	; 2
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	80 83       	st	Z, r24
			ledB.count = 1000;
    205c:	88 ee       	ldi	r24, 0xE8	; 232
    205e:	93 e0       	ldi	r25, 0x03	; 3
    2060:	94 83       	std	Z+4, r25	; 0x04
    2062:	83 83       	std	Z+3, r24	; 0x03
		break;
	}
}
    2064:	1f 91       	pop	r17
    2066:	0f 91       	pop	r16
    2068:	ef 90       	pop	r14
    206a:	08 95       	ret

0000206c <parseDisplayOp>:

void parseDisplayOp(uint8_t *datagram, Display *display){
    206c:	ef 92       	push	r14
    206e:	0f 93       	push	r16
    2070:	1f 93       	push	r17
    2072:	fc 01       	movw	r30, r24
	switch(datagram[2]){
    2074:	92 81       	ldd	r25, Z+2	; 0x02
    2076:	93 30       	cpi	r25, 0x03	; 3
    2078:	09 f1       	breq	.+66     	; 0x20bc <parseDisplayOp+0x50>
    207a:	28 f4       	brcc	.+10     	; 0x2086 <parseDisplayOp+0x1a>
    207c:	91 30       	cpi	r25, 0x01	; 1
    207e:	69 f0       	breq	.+26     	; 0x209a <parseDisplayOp+0x2e>
    2080:	92 30       	cpi	r25, 0x02	; 2
    2082:	91 f1       	breq	.+100    	; 0x20e8 <parseDisplayOp+0x7c>
    2084:	9c c0       	rjmp	.+312    	; 0x21be <parseDisplayOp+0x152>
    2086:	92 38       	cpi	r25, 0x82	; 130
    2088:	09 f4       	brne	.+2      	; 0x208c <parseDisplayOp+0x20>
    208a:	7d c0       	rjmp	.+250    	; 0x2186 <parseDisplayOp+0x11a>
    208c:	93 38       	cpi	r25, 0x83	; 131
    208e:	09 f4       	brne	.+2      	; 0x2092 <parseDisplayOp+0x26>
    2090:	5e c0       	rjmp	.+188    	; 0x214e <parseDisplayOp+0xe2>
    2092:	91 38       	cpi	r25, 0x81	; 129
    2094:	09 f0       	breq	.+2      	; 0x2098 <parseDisplayOp+0x2c>
    2096:	93 c0       	rjmp	.+294    	; 0x21be <parseDisplayOp+0x152>
    2098:	3e c0       	rjmp	.+124    	; 0x2116 <parseDisplayOp+0xaa>
		//SETTERS
		case DISPLAY_SET_VALUE:
			if(datagram[0] == 4){
    209a:	80 81       	ld	r24, Z
    209c:	84 30       	cpi	r24, 0x04	; 4
    209e:	49 f4       	brne	.+18     	; 0x20b2 <parseDisplayOp+0x46>
				display->value = datagram[3];
    20a0:	83 81       	ldd	r24, Z+3	; 0x03
    20a2:	db 01       	movw	r26, r22
    20a4:	12 96       	adiw	r26, 0x02	; 2
    20a6:	8c 93       	st	X, r24
    20a8:	12 97       	sbiw	r26, 0x02	; 2
				display->draw = 1;
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	11 96       	adiw	r26, 0x01	; 1
    20ae:	8c 93       	st	X, r24
    20b0:	92 c0       	rjmp	.+292    	; 0x21d6 <parseDisplayOp+0x16a>
			}else{
				uart1_puts_P("ERROR: Incorrect Type\n");
    20b2:	83 e9       	ldi	r24, 0x93	; 147
    20b4:	93 e0       	ldi	r25, 0x03	; 3
    20b6:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    20ba:	8d c0       	rjmp	.+282    	; 0x21d6 <parseDisplayOp+0x16a>
			}
		break;
		case DISPLAY_SET_DIGIT_0:
			if(datagram[0] == 4){
    20bc:	80 81       	ld	r24, Z
    20be:	84 30       	cpi	r24, 0x04	; 4
    20c0:	71 f4       	brne	.+28     	; 0x20de <parseDisplayOp+0x72>
				uint8_t digit = datagram[3];
    20c2:	83 81       	ldd	r24, Z+3	; 0x03
				if(digit > 15) display->digit0 = 15;
    20c4:	80 31       	cpi	r24, 0x10	; 16
    20c6:	20 f0       	brcs	.+8      	; 0x20d0 <parseDisplayOp+0x64>
    20c8:	8f e0       	ldi	r24, 0x0F	; 15
    20ca:	fb 01       	movw	r30, r22
    20cc:	83 83       	std	Z+3, r24	; 0x03
    20ce:	03 c0       	rjmp	.+6      	; 0x20d6 <parseDisplayOp+0x6a>
				else if(digit < -15) display->digit0 = -15;
				else display->digit0 = digit;
    20d0:	db 01       	movw	r26, r22
    20d2:	13 96       	adiw	r26, 0x03	; 3
    20d4:	8c 93       	st	X, r24
				display->draw = 1;
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	fb 01       	movw	r30, r22
    20da:	81 83       	std	Z+1, r24	; 0x01
    20dc:	7c c0       	rjmp	.+248    	; 0x21d6 <parseDisplayOp+0x16a>
			}else{
				uart1_puts_P("ERROR: Incorrect Type\n");
    20de:	8c e7       	ldi	r24, 0x7C	; 124
    20e0:	93 e0       	ldi	r25, 0x03	; 3
    20e2:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    20e6:	77 c0       	rjmp	.+238    	; 0x21d6 <parseDisplayOp+0x16a>
			}
		break;
		case DISPLAY_SET_DIGIT_1:
			if(datagram[0] == 4){
    20e8:	80 81       	ld	r24, Z
    20ea:	84 30       	cpi	r24, 0x04	; 4
    20ec:	79 f4       	brne	.+30     	; 0x210c <parseDisplayOp+0xa0>
				uint8_t digit = datagram[3];
    20ee:	83 81       	ldd	r24, Z+3	; 0x03
				if(digit > 15) display->digit1 = 15;
    20f0:	80 31       	cpi	r24, 0x10	; 16
    20f2:	28 f0       	brcs	.+10     	; 0x20fe <parseDisplayOp+0x92>
    20f4:	8f e0       	ldi	r24, 0x0F	; 15
    20f6:	db 01       	movw	r26, r22
    20f8:	14 96       	adiw	r26, 0x04	; 4
    20fa:	8c 93       	st	X, r24
    20fc:	02 c0       	rjmp	.+4      	; 0x2102 <parseDisplayOp+0x96>
				else if(digit < -15) display->digit1 = -15;
				else display->digit1 = digit;
    20fe:	fb 01       	movw	r30, r22
    2100:	84 83       	std	Z+4, r24	; 0x04
				display->draw = 1;
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	db 01       	movw	r26, r22
    2106:	11 96       	adiw	r26, 0x01	; 1
    2108:	8c 93       	st	X, r24
    210a:	65 c0       	rjmp	.+202    	; 0x21d6 <parseDisplayOp+0x16a>
			}else{
				uart1_puts_P("ERROR: Incorrect Type\n");
    210c:	85 e6       	ldi	r24, 0x65	; 101
    210e:	93 e0       	ldi	r25, 0x03	; 3
    2110:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    2114:	60 c0       	rjmp	.+192    	; 0x21d6 <parseDisplayOp+0x16a>
			}
		break;
		
		//GETTERS
		case DISPLAY_GET_VALUE:
			dgrammem.ch = display->value;
    2116:	db 01       	movw	r26, r22
    2118:	12 96       	adiw	r26, 0x02	; 2
    211a:	8c 91       	ld	r24, X
    211c:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <dgrammem>
			formdatagram(datagramG, datagram[1], DISPLAY_SET_VALUE, dgrammem, 'c');
    2120:	00 91 4b 02 	lds	r16, 0x024B	; 0x80024b <dgrammem>
    2124:	10 91 4c 02 	lds	r17, 0x024C	; 0x80024c <dgrammem+0x1>
    2128:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <dgrammem+0x2>
    212c:	30 91 4e 02 	lds	r19, 0x024E	; 0x80024e <dgrammem+0x3>
    2130:	0f 2e       	mov	r0, r31
    2132:	f3 e6       	ldi	r31, 0x63	; 99
    2134:	ef 2e       	mov	r14, r31
    2136:	f0 2d       	mov	r31, r0
    2138:	41 e0       	ldi	r20, 0x01	; 1
    213a:	61 81       	ldd	r22, Z+1	; 0x01
    213c:	83 ea       	ldi	r24, 0xA3	; 163
    213e:	92 e0       	ldi	r25, 0x02	; 2
    2140:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <formdatagram>
			uart1putcs(datagramG);
    2144:	83 ea       	ldi	r24, 0xA3	; 163
    2146:	92 e0       	ldi	r25, 0x02	; 2
    2148:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uart1putcs>
		break;
    214c:	44 c0       	rjmp	.+136    	; 0x21d6 <parseDisplayOp+0x16a>
		case DISPLAY_GET_DIGIT_0:
			dgrammem.ch = display->digit0;
    214e:	db 01       	movw	r26, r22
    2150:	13 96       	adiw	r26, 0x03	; 3
    2152:	8c 91       	ld	r24, X
    2154:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <dgrammem>
			formdatagram(datagramG, datagram[1], DISPLAY_SET_DIGIT_0, dgrammem, 'c');
    2158:	00 91 4b 02 	lds	r16, 0x024B	; 0x80024b <dgrammem>
    215c:	10 91 4c 02 	lds	r17, 0x024C	; 0x80024c <dgrammem+0x1>
    2160:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <dgrammem+0x2>
    2164:	30 91 4e 02 	lds	r19, 0x024E	; 0x80024e <dgrammem+0x3>
    2168:	0f 2e       	mov	r0, r31
    216a:	f3 e6       	ldi	r31, 0x63	; 99
    216c:	ef 2e       	mov	r14, r31
    216e:	f0 2d       	mov	r31, r0
    2170:	43 e0       	ldi	r20, 0x03	; 3
    2172:	61 81       	ldd	r22, Z+1	; 0x01
    2174:	83 ea       	ldi	r24, 0xA3	; 163
    2176:	92 e0       	ldi	r25, 0x02	; 2
    2178:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <formdatagram>
			uart1putcs(datagramG);
    217c:	83 ea       	ldi	r24, 0xA3	; 163
    217e:	92 e0       	ldi	r25, 0x02	; 2
    2180:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uart1putcs>
		break;
    2184:	28 c0       	rjmp	.+80     	; 0x21d6 <parseDisplayOp+0x16a>
		case DISPLAY_GET_DIGIT_1:
			dgrammem.ch = display->digit1;
    2186:	db 01       	movw	r26, r22
    2188:	14 96       	adiw	r26, 0x04	; 4
    218a:	8c 91       	ld	r24, X
    218c:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <dgrammem>
			formdatagram(datagramG, datagram[1], DISPLAY_SET_DIGIT_1, dgrammem, 'c');
    2190:	00 91 4b 02 	lds	r16, 0x024B	; 0x80024b <dgrammem>
    2194:	10 91 4c 02 	lds	r17, 0x024C	; 0x80024c <dgrammem+0x1>
    2198:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <dgrammem+0x2>
    219c:	30 91 4e 02 	lds	r19, 0x024E	; 0x80024e <dgrammem+0x3>
    21a0:	0f 2e       	mov	r0, r31
    21a2:	f3 e6       	ldi	r31, 0x63	; 99
    21a4:	ef 2e       	mov	r14, r31
    21a6:	f0 2d       	mov	r31, r0
    21a8:	42 e0       	ldi	r20, 0x02	; 2
    21aa:	61 81       	ldd	r22, Z+1	; 0x01
    21ac:	83 ea       	ldi	r24, 0xA3	; 163
    21ae:	92 e0       	ldi	r25, 0x02	; 2
    21b0:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <formdatagram>
			uart1putcs(datagramG);
    21b4:	83 ea       	ldi	r24, 0xA3	; 163
    21b6:	92 e0       	ldi	r25, 0x02	; 2
    21b8:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uart1putcs>
		break;
    21bc:	0c c0       	rjmp	.+24     	; 0x21d6 <parseDisplayOp+0x16a>
		
		default:
			uart1_puts_P("ERROR: Unknown OpCode\n");
    21be:	8e e4       	ldi	r24, 0x4E	; 78
    21c0:	93 e0       	ldi	r25, 0x03	; 3
    21c2:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
			//flash BLUE LED
			ledB.state = 1;
    21c6:	ea eb       	ldi	r30, 0xBA	; 186
    21c8:	f2 e0       	ldi	r31, 0x02	; 2
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	80 83       	st	Z, r24
			ledB.count = 1000;
    21ce:	88 ee       	ldi	r24, 0xE8	; 232
    21d0:	93 e0       	ldi	r25, 0x03	; 3
    21d2:	94 83       	std	Z+4, r25	; 0x04
    21d4:	83 83       	std	Z+3, r24	; 0x03
		break;
	}
}
    21d6:	1f 91       	pop	r17
    21d8:	0f 91       	pop	r16
    21da:	ef 90       	pop	r14
    21dc:	08 95       	ret

000021de <parseButtonOp>:

void parseButtonOp(uint8_t *datagram, Button *btn){
    21de:	ef 92       	push	r14
    21e0:	0f 93       	push	r16
    21e2:	1f 93       	push	r17
    21e4:	fc 01       	movw	r30, r24
	switch(datagram[2]){
    21e6:	92 81       	ldd	r25, Z+2	; 0x02
    21e8:	92 30       	cpi	r25, 0x02	; 2
    21ea:	f1 f0       	breq	.+60     	; 0x2228 <parseButtonOp+0x4a>
    21ec:	18 f4       	brcc	.+6      	; 0x21f4 <parseButtonOp+0x16>
    21ee:	91 30       	cpi	r25, 0x01	; 1
    21f0:	39 f0       	breq	.+14     	; 0x2200 <parseButtonOp+0x22>
    21f2:	66 c0       	rjmp	.+204    	; 0x22c0 <parseButtonOp+0xe2>
    21f4:	91 38       	cpi	r25, 0x81	; 129
    21f6:	61 f1       	breq	.+88     	; 0x2250 <parseButtonOp+0x72>
    21f8:	92 38       	cpi	r25, 0x82	; 130
    21fa:	09 f4       	brne	.+2      	; 0x21fe <parseButtonOp+0x20>
    21fc:	45 c0       	rjmp	.+138    	; 0x2288 <parseButtonOp+0xaa>
    21fe:	60 c0       	rjmp	.+192    	; 0x22c0 <parseButtonOp+0xe2>
		//SETTERS
		case BUTTON_SET_PROGRAM_MODE:
			if(datagram[0] == 4){
    2200:	80 81       	ld	r24, Z
    2202:	84 30       	cpi	r24, 0x04	; 4
    2204:	61 f4       	brne	.+24     	; 0x221e <parseButtonOp+0x40>
				uint8_t mode = datagram[3];
    2206:	83 81       	ldd	r24, Z+3	; 0x03
				if(mode == 1) btn->programMode = 1;
    2208:	81 30       	cpi	r24, 0x01	; 1
    220a:	21 f4       	brne	.+8      	; 0x2214 <parseButtonOp+0x36>
    220c:	db 01       	movw	r26, r22
    220e:	13 96       	adiw	r26, 0x03	; 3
    2210:	8c 93       	st	X, r24
    2212:	62 c0       	rjmp	.+196    	; 0x22d8 <parseButtonOp+0xfa>
				else if(mode == 0) btn->programMode = 0;
    2214:	81 11       	cpse	r24, r1
    2216:	60 c0       	rjmp	.+192    	; 0x22d8 <parseButtonOp+0xfa>
    2218:	fb 01       	movw	r30, r22
    221a:	13 82       	std	Z+3, r1	; 0x03
    221c:	5d c0       	rjmp	.+186    	; 0x22d8 <parseButtonOp+0xfa>
			}else{
				uart1_puts_P("ERROR: Incorrect Type\n");
    221e:	87 e3       	ldi	r24, 0x37	; 55
    2220:	93 e0       	ldi	r25, 0x03	; 3
    2222:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    2226:	58 c0       	rjmp	.+176    	; 0x22d8 <parseButtonOp+0xfa>
			}
		break;
		case BUTTON_SET_PIN_MODE:
			if(datagram[0] == 4){
    2228:	80 81       	ld	r24, Z
    222a:	84 30       	cpi	r24, 0x04	; 4
    222c:	61 f4       	brne	.+24     	; 0x2246 <parseButtonOp+0x68>
				uint8_t mode = datagram[3];
    222e:	83 81       	ldd	r24, Z+3	; 0x03
				if(mode == 1) btn->pinMode = 1;
    2230:	81 30       	cpi	r24, 0x01	; 1
    2232:	21 f4       	brne	.+8      	; 0x223c <parseButtonOp+0x5e>
    2234:	db 01       	movw	r26, r22
    2236:	12 96       	adiw	r26, 0x02	; 2
    2238:	8c 93       	st	X, r24
    223a:	4e c0       	rjmp	.+156    	; 0x22d8 <parseButtonOp+0xfa>
				else if(mode == 0) btn->pinMode = 0;
    223c:	81 11       	cpse	r24, r1
    223e:	4c c0       	rjmp	.+152    	; 0x22d8 <parseButtonOp+0xfa>
    2240:	fb 01       	movw	r30, r22
    2242:	12 82       	std	Z+2, r1	; 0x02
    2244:	49 c0       	rjmp	.+146    	; 0x22d8 <parseButtonOp+0xfa>
			}else{
				uart1_puts_P("ERROR: Incorrect Type\n");
    2246:	80 e2       	ldi	r24, 0x20	; 32
    2248:	93 e0       	ldi	r25, 0x03	; 3
    224a:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    224e:	44 c0       	rjmp	.+136    	; 0x22d8 <parseButtonOp+0xfa>
			}
		break;
		
		//GETTERS
		case BUTTON_GET_PROGRAM_MODE:
			dgrammem.ch = btn->programMode;
    2250:	db 01       	movw	r26, r22
    2252:	13 96       	adiw	r26, 0x03	; 3
    2254:	8c 91       	ld	r24, X
    2256:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <dgrammem>
			formdatagram(datagramG, datagram[1], BUTTON_SET_PROGRAM_MODE, dgrammem, 'c');
    225a:	00 91 4b 02 	lds	r16, 0x024B	; 0x80024b <dgrammem>
    225e:	10 91 4c 02 	lds	r17, 0x024C	; 0x80024c <dgrammem+0x1>
    2262:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <dgrammem+0x2>
    2266:	30 91 4e 02 	lds	r19, 0x024E	; 0x80024e <dgrammem+0x3>
    226a:	0f 2e       	mov	r0, r31
    226c:	f3 e6       	ldi	r31, 0x63	; 99
    226e:	ef 2e       	mov	r14, r31
    2270:	f0 2d       	mov	r31, r0
    2272:	41 e0       	ldi	r20, 0x01	; 1
    2274:	61 81       	ldd	r22, Z+1	; 0x01
    2276:	83 ea       	ldi	r24, 0xA3	; 163
    2278:	92 e0       	ldi	r25, 0x02	; 2
    227a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <formdatagram>
			uart1putcs(datagramG);
    227e:	83 ea       	ldi	r24, 0xA3	; 163
    2280:	92 e0       	ldi	r25, 0x02	; 2
    2282:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uart1putcs>
		break;
    2286:	28 c0       	rjmp	.+80     	; 0x22d8 <parseButtonOp+0xfa>
		case BUTTON_GET_PIN_MODE:
			dgrammem.ch = btn->pinMode;
    2288:	db 01       	movw	r26, r22
    228a:	12 96       	adiw	r26, 0x02	; 2
    228c:	8c 91       	ld	r24, X
    228e:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <dgrammem>
			formdatagram(datagramG, datagram[1], BUTTON_SET_PIN_MODE, dgrammem, 'c');
    2292:	00 91 4b 02 	lds	r16, 0x024B	; 0x80024b <dgrammem>
    2296:	10 91 4c 02 	lds	r17, 0x024C	; 0x80024c <dgrammem+0x1>
    229a:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <dgrammem+0x2>
    229e:	30 91 4e 02 	lds	r19, 0x024E	; 0x80024e <dgrammem+0x3>
    22a2:	0f 2e       	mov	r0, r31
    22a4:	f3 e6       	ldi	r31, 0x63	; 99
    22a6:	ef 2e       	mov	r14, r31
    22a8:	f0 2d       	mov	r31, r0
    22aa:	42 e0       	ldi	r20, 0x02	; 2
    22ac:	61 81       	ldd	r22, Z+1	; 0x01
    22ae:	83 ea       	ldi	r24, 0xA3	; 163
    22b0:	92 e0       	ldi	r25, 0x02	; 2
    22b2:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <formdatagram>
			uart1putcs(datagramG);
    22b6:	83 ea       	ldi	r24, 0xA3	; 163
    22b8:	92 e0       	ldi	r25, 0x02	; 2
    22ba:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uart1putcs>
		break;
    22be:	0c c0       	rjmp	.+24     	; 0x22d8 <parseButtonOp+0xfa>
		
		default:
			uart1_puts_P("ERROR: Unknown OpCode\n");
    22c0:	89 e0       	ldi	r24, 0x09	; 9
    22c2:	93 e0       	ldi	r25, 0x03	; 3
    22c4:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
			//flash BLUE LED
			ledB.state = 1;
    22c8:	ea eb       	ldi	r30, 0xBA	; 186
    22ca:	f2 e0       	ldi	r31, 0x02	; 2
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	80 83       	st	Z, r24
			ledB.count = 1000;
    22d0:	88 ee       	ldi	r24, 0xE8	; 232
    22d2:	93 e0       	ldi	r25, 0x03	; 3
    22d4:	94 83       	std	Z+4, r25	; 0x04
    22d6:	83 83       	std	Z+3, r24	; 0x03
		break;
	}
}
    22d8:	1f 91       	pop	r17
    22da:	0f 91       	pop	r16
    22dc:	ef 90       	pop	r14
    22de:	08 95       	ret

000022e0 <parseADCOp>:

void parseADCOp(uint8_t *datagram, AnalogIn *adc){
    22e0:	ef 92       	push	r14
    22e2:	0f 93       	push	r16
    22e4:	1f 93       	push	r17
    22e6:	cf 93       	push	r28
    22e8:	df 93       	push	r29
    22ea:	00 d0       	rcall	.+0      	; 0x22ec <parseADCOp+0xc>
    22ec:	00 d0       	rcall	.+0      	; 0x22ee <parseADCOp+0xe>
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
    22f2:	fc 01       	movw	r30, r24
    22f4:	8b 01       	movw	r16, r22
	switch(datagram[2]){
    22f6:	92 81       	ldd	r25, Z+2	; 0x02
    22f8:	91 38       	cpi	r25, 0x81	; 129
    22fa:	71 f1       	breq	.+92     	; 0x2358 <parseADCOp+0x78>
    22fc:	18 f4       	brcc	.+6      	; 0x2304 <parseADCOp+0x24>
    22fe:	91 30       	cpi	r25, 0x01	; 1
    2300:	41 f0       	breq	.+16     	; 0x2312 <parseADCOp+0x32>
    2302:	84 c0       	rjmp	.+264    	; 0x240c <parseADCOp+0x12c>
    2304:	92 38       	cpi	r25, 0x82	; 130
    2306:	09 f4       	brne	.+2      	; 0x230a <parseADCOp+0x2a>
    2308:	45 c0       	rjmp	.+138    	; 0x2394 <parseADCOp+0xb4>
    230a:	93 38       	cpi	r25, 0x83	; 131
    230c:	09 f4       	brne	.+2      	; 0x2310 <parseADCOp+0x30>
    230e:	60 c0       	rjmp	.+192    	; 0x23d0 <parseADCOp+0xf0>
    2310:	7d c0       	rjmp	.+250    	; 0x240c <parseADCOp+0x12c>
		//SETTERS
		case ADC_SET_SCALE:
			if(datagram[0] == 7){
    2312:	80 81       	ld	r24, Z
    2314:	87 30       	cpi	r24, 0x07	; 7
    2316:	d9 f4       	brne	.+54     	; 0x234e <parseADCOp+0x6e>
    2318:	df 01       	movw	r26, r30
    231a:	13 96       	adiw	r26, 0x03	; 3
    231c:	9e 01       	movw	r18, r28
    231e:	2f 5f       	subi	r18, 0xFF	; 255
    2320:	3f 4f       	sbci	r19, 0xFF	; 255
    2322:	af 01       	movw	r20, r30
    2324:	49 5f       	subi	r20, 0xF9	; 249
    2326:	5f 4f       	sbci	r21, 0xFF	; 255
				uint8_t flMem[4];
				for(uint8_t i=0; i<4; i++) flMem[i] = datagram[3+i];
    2328:	9d 91       	ld	r25, X+
    232a:	f9 01       	movw	r30, r18
    232c:	91 93       	st	Z+, r25
    232e:	9f 01       	movw	r18, r30
    2330:	a4 17       	cp	r26, r20
    2332:	b5 07       	cpc	r27, r21
    2334:	c9 f7       	brne	.-14     	; 0x2328 <parseADCOp+0x48>
				adc->scale = readFloat(flMem);
    2336:	ce 01       	movw	r24, r28
    2338:	01 96       	adiw	r24, 0x01	; 1
    233a:	0e 94 ad 0a 	call	0x155a	; 0x155a <readFloat>
    233e:	d8 01       	movw	r26, r16
    2340:	16 96       	adiw	r26, 0x06	; 6
    2342:	6d 93       	st	X+, r22
    2344:	7d 93       	st	X+, r23
    2346:	8d 93       	st	X+, r24
    2348:	9c 93       	st	X, r25
    234a:	19 97       	sbiw	r26, 0x09	; 9
    234c:	6b c0       	rjmp	.+214    	; 0x2424 <parseADCOp+0x144>
			}else{
				uart1_puts_P("ERROR: Incorrect Type\n");
    234e:	82 ef       	ldi	r24, 0xF2	; 242
    2350:	92 e0       	ldi	r25, 0x02	; 2
    2352:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
    2356:	66 c0       	rjmp	.+204    	; 0x2424 <parseADCOp+0x144>
			}
		break;
		
		//GETTERS
		case ADC_GET_SCALE:
			dgrammem.fl = adc->scale;
    2358:	db 01       	movw	r26, r22
    235a:	16 96       	adiw	r26, 0x06	; 6
    235c:	0d 91       	ld	r16, X+
    235e:	1d 91       	ld	r17, X+
    2360:	2d 91       	ld	r18, X+
    2362:	3c 91       	ld	r19, X
    2364:	19 97       	sbiw	r26, 0x09	; 9
    2366:	00 93 4b 02 	sts	0x024B, r16	; 0x80024b <dgrammem>
    236a:	10 93 4c 02 	sts	0x024C, r17	; 0x80024c <dgrammem+0x1>
    236e:	20 93 4d 02 	sts	0x024D, r18	; 0x80024d <dgrammem+0x2>
    2372:	30 93 4e 02 	sts	0x024E, r19	; 0x80024e <dgrammem+0x3>
			formdatagram(datagramG, datagram[1], ADC_SET_SCALE, dgrammem, 'f');
    2376:	0f 2e       	mov	r0, r31
    2378:	f6 e6       	ldi	r31, 0x66	; 102
    237a:	ef 2e       	mov	r14, r31
    237c:	f0 2d       	mov	r31, r0
    237e:	41 e0       	ldi	r20, 0x01	; 1
    2380:	61 81       	ldd	r22, Z+1	; 0x01
    2382:	83 ea       	ldi	r24, 0xA3	; 163
    2384:	92 e0       	ldi	r25, 0x02	; 2
    2386:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <formdatagram>
			uart1putcs(datagramG);
    238a:	83 ea       	ldi	r24, 0xA3	; 163
    238c:	92 e0       	ldi	r25, 0x02	; 2
    238e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uart1putcs>
		break;
    2392:	48 c0       	rjmp	.+144    	; 0x2424 <parseADCOp+0x144>
		case ADC_GET_RAW:
			dgrammem.in = adc->raw;
    2394:	db 01       	movw	r26, r22
    2396:	8d 91       	ld	r24, X+
    2398:	9c 91       	ld	r25, X
    239a:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <dgrammem+0x1>
    239e:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <dgrammem>
			formdatagram(datagramG, datagram[1], ADC_SET_RAW, dgrammem, 'i');
    23a2:	00 91 4b 02 	lds	r16, 0x024B	; 0x80024b <dgrammem>
    23a6:	10 91 4c 02 	lds	r17, 0x024C	; 0x80024c <dgrammem+0x1>
    23aa:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <dgrammem+0x2>
    23ae:	30 91 4e 02 	lds	r19, 0x024E	; 0x80024e <dgrammem+0x3>
    23b2:	0f 2e       	mov	r0, r31
    23b4:	f9 e6       	ldi	r31, 0x69	; 105
    23b6:	ef 2e       	mov	r14, r31
    23b8:	f0 2d       	mov	r31, r0
    23ba:	42 e0       	ldi	r20, 0x02	; 2
    23bc:	61 81       	ldd	r22, Z+1	; 0x01
    23be:	83 ea       	ldi	r24, 0xA3	; 163
    23c0:	92 e0       	ldi	r25, 0x02	; 2
    23c2:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <formdatagram>
			uart1putcs(datagramG);
    23c6:	83 ea       	ldi	r24, 0xA3	; 163
    23c8:	92 e0       	ldi	r25, 0x02	; 2
    23ca:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uart1putcs>
		break;
    23ce:	2a c0       	rjmp	.+84     	; 0x2424 <parseADCOp+0x144>
		case ADC_GET_READING:
			dgrammem.fl = adc->value;
    23d0:	db 01       	movw	r26, r22
    23d2:	12 96       	adiw	r26, 0x02	; 2
    23d4:	0d 91       	ld	r16, X+
    23d6:	1d 91       	ld	r17, X+
    23d8:	2d 91       	ld	r18, X+
    23da:	3c 91       	ld	r19, X
    23dc:	15 97       	sbiw	r26, 0x05	; 5
    23de:	00 93 4b 02 	sts	0x024B, r16	; 0x80024b <dgrammem>
    23e2:	10 93 4c 02 	sts	0x024C, r17	; 0x80024c <dgrammem+0x1>
    23e6:	20 93 4d 02 	sts	0x024D, r18	; 0x80024d <dgrammem+0x2>
    23ea:	30 93 4e 02 	sts	0x024E, r19	; 0x80024e <dgrammem+0x3>
			formdatagram(datagramG, datagram[1], ADC_SET_READING, dgrammem, 'f');
    23ee:	0f 2e       	mov	r0, r31
    23f0:	f6 e6       	ldi	r31, 0x66	; 102
    23f2:	ef 2e       	mov	r14, r31
    23f4:	f0 2d       	mov	r31, r0
    23f6:	43 e0       	ldi	r20, 0x03	; 3
    23f8:	61 81       	ldd	r22, Z+1	; 0x01
    23fa:	83 ea       	ldi	r24, 0xA3	; 163
    23fc:	92 e0       	ldi	r25, 0x02	; 2
    23fe:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <formdatagram>
			uart1putcs(datagramG);
    2402:	83 ea       	ldi	r24, 0xA3	; 163
    2404:	92 e0       	ldi	r25, 0x02	; 2
    2406:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uart1putcs>
		break;
    240a:	0c c0       	rjmp	.+24     	; 0x2424 <parseADCOp+0x144>
		
		default:
			uart1_puts_P("ERROR: Unknown OpCode\n");
    240c:	8b ed       	ldi	r24, 0xDB	; 219
    240e:	92 e0       	ldi	r25, 0x02	; 2
    2410:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
			//flash BLUE LED
			ledB.state = 1;
    2414:	ea eb       	ldi	r30, 0xBA	; 186
    2416:	f2 e0       	ldi	r31, 0x02	; 2
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	80 83       	st	Z, r24
			ledB.count = 1000;
    241c:	88 ee       	ldi	r24, 0xE8	; 232
    241e:	93 e0       	ldi	r25, 0x03	; 3
    2420:	94 83       	std	Z+4, r25	; 0x04
    2422:	83 83       	std	Z+3, r24	; 0x03
		break;
	}
}
    2424:	0f 90       	pop	r0
    2426:	0f 90       	pop	r0
    2428:	0f 90       	pop	r0
    242a:	0f 90       	pop	r0
    242c:	df 91       	pop	r29
    242e:	cf 91       	pop	r28
    2430:	1f 91       	pop	r17
    2432:	0f 91       	pop	r16
    2434:	ef 90       	pop	r14
    2436:	08 95       	ret

00002438 <parseAllOp>:

void parseAllOp(uint8_t *datagram){
	switch(datagram[2]){
    2438:	dc 01       	movw	r26, r24
    243a:	12 96       	adiw	r26, 0x02	; 2
    243c:	8c 91       	ld	r24, X
    243e:	8e 3e       	cpi	r24, 0xEE	; 238
    2440:	01 f1       	breq	.+64     	; 0x2482 <parseAllOp+0x4a>
    2442:	8f 3f       	cpi	r24, 0xFF	; 255
    2444:	09 f0       	breq	.+2      	; 0x2448 <parseAllOp+0x10>
    2446:	79 c0       	rjmp	.+242    	; 0x253a <parseAllOp+0x102>
		case ALL_STOP:
			motorA.position = 0;
    2448:	e9 e5       	ldi	r30, 0x59	; 89
    244a:	f2 e0       	ldi	r31, 0x02	; 2
    244c:	13 82       	std	Z+3, r1	; 0x03
    244e:	12 82       	std	Z+2, r1	; 0x02
			motorA.setDegrees = 0;
    2450:	16 86       	std	Z+14, r1	; 0x0e
    2452:	15 86       	std	Z+13, r1	; 0x0d
			motorA.setSpeedDPS = 0;
    2454:	14 86       	std	Z+12, r1	; 0x0c
    2456:	13 86       	std	Z+11, r1	; 0x0b
			motorB.position = 0;
    2458:	ea ee       	ldi	r30, 0xEA	; 234
    245a:	f2 e0       	ldi	r31, 0x02	; 2
    245c:	13 82       	std	Z+3, r1	; 0x03
    245e:	12 82       	std	Z+2, r1	; 0x02
			motorB.setDegrees = 0;
    2460:	16 86       	std	Z+14, r1	; 0x0e
    2462:	15 86       	std	Z+13, r1	; 0x0d
			motorB.setSpeedDPS = 0;
    2464:	14 86       	std	Z+12, r1	; 0x0c
    2466:	13 86       	std	Z+11, r1	; 0x0b
			servoA.state = 0;
    2468:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <servoA>
			servoB.state = 0;
    246c:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <servoB>
			displayA.draw = 0;
    2470:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <displayA+0x1>
			ledR.state = 0;
    2474:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <ledR>
			ledG.state = 0;
    2478:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <ledG>
			ledB.state = 0;
    247c:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <ledB>
		break;
    2480:	08 95       	ret
		case CLEAR_DATA:
			motorA = (Motor){0};
    2482:	82 e2       	ldi	r24, 0x22	; 34
    2484:	e9 e5       	ldi	r30, 0x59	; 89
    2486:	f2 e0       	ldi	r31, 0x02	; 2
    2488:	df 01       	movw	r26, r30
    248a:	98 2f       	mov	r25, r24
    248c:	1d 92       	st	X+, r1
    248e:	9a 95       	dec	r25
    2490:	e9 f7       	brne	.-6      	; 0x248c <parseAllOp+0x54>
			motorB = (Motor){0};
    2492:	ea ee       	ldi	r30, 0xEA	; 234
    2494:	f2 e0       	ldi	r31, 0x02	; 2
    2496:	df 01       	movw	r26, r30
    2498:	1d 92       	st	X+, r1
    249a:	8a 95       	dec	r24
    249c:	e9 f7       	brne	.-6      	; 0x2498 <parseAllOp+0x60>
			servoA = (Servo){0};
    249e:	81 e1       	ldi	r24, 0x11	; 17
    24a0:	ed e8       	ldi	r30, 0x8D	; 141
    24a2:	f2 e0       	ldi	r31, 0x02	; 2
    24a4:	df 01       	movw	r26, r30
    24a6:	98 2f       	mov	r25, r24
    24a8:	1d 92       	st	X+, r1
    24aa:	9a 95       	dec	r25
    24ac:	e9 f7       	brne	.-6      	; 0x24a8 <parseAllOp+0x70>
			servoB = (Servo){0};
    24ae:	ec e0       	ldi	r30, 0x0C	; 12
    24b0:	f3 e0       	ldi	r31, 0x03	; 3
    24b2:	df 01       	movw	r26, r30
    24b4:	1d 92       	st	X+, r1
    24b6:	8a 95       	dec	r24
    24b8:	e9 f7       	brne	.-6      	; 0x24b4 <parseAllOp+0x7c>
			ledR = (LED){0};
    24ba:	85 e0       	ldi	r24, 0x05	; 5
    24bc:	e5 e2       	ldi	r30, 0x25	; 37
    24be:	f3 e0       	ldi	r31, 0x03	; 3
    24c0:	df 01       	movw	r26, r30
    24c2:	98 2f       	mov	r25, r24
    24c4:	1d 92       	st	X+, r1
    24c6:	9a 95       	dec	r25
    24c8:	e9 f7       	brne	.-6      	; 0x24c4 <parseAllOp+0x8c>
			ledG = (LED){0};
    24ca:	e5 ee       	ldi	r30, 0xE5	; 229
    24cc:	f2 e0       	ldi	r31, 0x02	; 2
    24ce:	df 01       	movw	r26, r30
    24d0:	98 2f       	mov	r25, r24
    24d2:	1d 92       	st	X+, r1
    24d4:	9a 95       	dec	r25
    24d6:	e9 f7       	brne	.-6      	; 0x24d2 <parseAllOp+0x9a>
			ledB = (LED){0};
    24d8:	ea eb       	ldi	r30, 0xBA	; 186
    24da:	f2 e0       	ldi	r31, 0x02	; 2
    24dc:	df 01       	movw	r26, r30
    24de:	98 2f       	mov	r25, r24
    24e0:	1d 92       	st	X+, r1
    24e2:	9a 95       	dec	r25
    24e4:	e9 f7       	brne	.-6      	; 0x24e0 <parseAllOp+0xa8>
			displayA = (Display){0};
    24e6:	ee e9       	ldi	r30, 0x9E	; 158
    24e8:	f2 e0       	ldi	r31, 0x02	; 2
    24ea:	df 01       	movw	r26, r30
    24ec:	1d 92       	st	X+, r1
    24ee:	8a 95       	dec	r24
    24f0:	e9 f7       	brne	.-6      	; 0x24ec <parseAllOp+0xb4>
			buttonA = (Button){0};
    24f2:	86 e0       	ldi	r24, 0x06	; 6
    24f4:	e3 e5       	ldi	r30, 0x53	; 83
    24f6:	f2 e0       	ldi	r31, 0x02	; 2
    24f8:	df 01       	movw	r26, r30
    24fa:	98 2f       	mov	r25, r24
    24fc:	1d 92       	st	X+, r1
    24fe:	9a 95       	dec	r25
    2500:	e9 f7       	brne	.-6      	; 0x24fc <parseAllOp+0xc4>
			buttonB = (Button){0};
    2502:	ef ed       	ldi	r30, 0xDF	; 223
    2504:	f2 e0       	ldi	r31, 0x02	; 2
    2506:	df 01       	movw	r26, r30
    2508:	98 2f       	mov	r25, r24
    250a:	1d 92       	st	X+, r1
    250c:	9a 95       	dec	r25
    250e:	e9 f7       	brne	.-6      	; 0x250a <parseAllOp+0xd2>
			buttonC = (Button){0};
    2510:	eb e7       	ldi	r30, 0x7B	; 123
    2512:	f2 e0       	ldi	r31, 0x02	; 2
    2514:	df 01       	movw	r26, r30
    2516:	1d 92       	st	X+, r1
    2518:	8a 95       	dec	r24
    251a:	e9 f7       	brne	.-6      	; 0x2516 <parseAllOp+0xde>
			vdiv = (AnalogIn){0};
    251c:	8c e0       	ldi	r24, 0x0C	; 12
    251e:	e1 e8       	ldi	r30, 0x81	; 129
    2520:	f2 e0       	ldi	r31, 0x02	; 2
    2522:	df 01       	movw	r26, r30
    2524:	98 2f       	mov	r25, r24
    2526:	1d 92       	st	X+, r1
    2528:	9a 95       	dec	r25
    252a:	e9 f7       	brne	.-6      	; 0x2526 <parseAllOp+0xee>
			csense = (AnalogIn){0};
    252c:	ee ea       	ldi	r30, 0xAE	; 174
    252e:	f2 e0       	ldi	r31, 0x02	; 2
    2530:	df 01       	movw	r26, r30
    2532:	1d 92       	st	X+, r1
    2534:	8a 95       	dec	r24
    2536:	e9 f7       	brne	.-6      	; 0x2532 <parseAllOp+0xfa>
		break;
    2538:	08 95       	ret
		
		default:
			uart1_puts_P("ERROR: Unknown OpCode\n");
    253a:	84 ec       	ldi	r24, 0xC4	; 196
    253c:	92 e0       	ldi	r25, 0x02	; 2
    253e:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
			//flash BLUE LED
			ledB.state = 1;
    2542:	ea eb       	ldi	r30, 0xBA	; 186
    2544:	f2 e0       	ldi	r31, 0x02	; 2
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	80 83       	st	Z, r24
			ledB.count = 1000;
    254a:	88 ee       	ldi	r24, 0xE8	; 232
    254c:	93 e0       	ldi	r25, 0x03	; 3
    254e:	94 83       	std	Z+4, r25	; 0x04
    2550:	83 83       	std	Z+3, r24	; 0x03
    2552:	08 95       	ret

00002554 <parseDatagram>:
	}
	datagram[0] = 4 + paylen;
	datagram[3+paylen] = crc8(datagram, datagram[0]-1);
}

void parseDatagram(uint8_t *datagram){
    2554:	ef 92       	push	r14
    2556:	ff 92       	push	r15
    2558:	0f 93       	push	r16
    255a:	1f 93       	push	r17
    255c:	cf 93       	push	r28
    255e:	df 93       	push	r29
    2560:	7c 01       	movw	r14, r24
	//flash RED LED
	ledR.state = 1;
    2562:	e5 e2       	ldi	r30, 0x25	; 37
    2564:	f3 e0       	ldi	r31, 0x03	; 3
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	80 83       	st	Z, r24
	ledR.count = 1000;
    256a:	88 ee       	ldi	r24, 0xE8	; 232
    256c:	93 e0       	ldi	r25, 0x03	; 3
    256e:	94 83       	std	Z+4, r25	; 0x04
    2570:	83 83       	std	Z+3, r24	; 0x03
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2572:	8f ee       	ldi	r24, 0xEF	; 239
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	f1 f7       	brne	.-4      	; 0x2576 <parseDatagram+0x22>
    257a:	00 c0       	rjmp	.+0      	; 0x257c <parseDatagram+0x28>
    257c:	00 00       	nop
	
	_delay_us(UART_INTERBYTE_WAIT);
	uint8_t dlen = checkBuffer();
    257e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <checkBuffer>
    2582:	d8 2f       	mov	r29, r24
	datagram[0] = dlen; //length of the datagram
    2584:	f7 01       	movw	r30, r14
    2586:	80 83       	st	Z, r24
	for(uint8_t i = 1; i < dlen; i++){
    2588:	82 30       	cpi	r24, 0x02	; 2
    258a:	08 f0       	brcs	.+2      	; 0x258e <parseDatagram+0x3a>
    258c:	c6 c0       	rjmp	.+396    	; 0x271a <parseDatagram+0x1c6>
    258e:	1d c0       	rjmp	.+58     	; 0x25ca <parseDatagram+0x76>
    2590:	8f ee       	ldi	r24, 0xEF	; 239
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	01 97       	sbiw	r24, 0x01	; 1
    2596:	f1 f7       	brne	.-4      	; 0x2594 <parseDatagram+0x40>
    2598:	00 c0       	rjmp	.+0      	; 0x259a <parseDatagram+0x46>
    259a:	00 00       	nop
		_delay_us(UART_INTERBYTE_WAIT);
		
		datagram[i] = checkBuffer();
    259c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <checkBuffer>
    25a0:	f8 01       	movw	r30, r16
    25a2:	81 93       	st	Z+, r24
    25a4:	8f 01       	movw	r16, r30
		if(i >= DGRAM_MAX_LENGTH){
    25a6:	ca 30       	cpi	r28, 0x0A	; 10
    25a8:	69 f4       	brne	.+26     	; 0x25c4 <parseDatagram+0x70>
			uart1_puts_P("ERROR: Datagram Buffer Overflow\n");
    25aa:	8a e8       	ldi	r24, 0x8A	; 138
    25ac:	95 e0       	ldi	r25, 0x05	; 5
    25ae:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
			ledB.state = 1;
    25b2:	ea eb       	ldi	r30, 0xBA	; 186
    25b4:	f2 e0       	ldi	r31, 0x02	; 2
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	80 83       	st	Z, r24
			ledB.count = 1000;
    25ba:	88 ee       	ldi	r24, 0xE8	; 232
    25bc:	93 e0       	ldi	r25, 0x03	; 3
    25be:	94 83       	std	Z+4, r25	; 0x04
    25c0:	83 83       	std	Z+3, r24	; 0x03
			return;
    25c2:	ba c0       	rjmp	.+372    	; 0x2738 <parseDatagram+0x1e4>
	ledR.count = 1000;
	
	_delay_us(UART_INTERBYTE_WAIT);
	uint8_t dlen = checkBuffer();
	datagram[0] = dlen; //length of the datagram
	for(uint8_t i = 1; i < dlen; i++){
    25c4:	cf 5f       	subi	r28, 0xFF	; 255
    25c6:	cd 13       	cpse	r28, r29
    25c8:	e3 cf       	rjmp	.-58     	; 0x2590 <parseDatagram+0x3c>
			ledB.state = 1;
			ledB.count = 1000;
			return;
		}
	}
	uint8_t crcDgram = datagram[dlen-1];
    25ca:	ed 2f       	mov	r30, r29
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	31 97       	sbiw	r30, 0x01	; 1
    25d0:	ee 0d       	add	r30, r14
    25d2:	ff 1d       	adc	r31, r15
    25d4:	c0 81       	ld	r28, Z
	datagram[dlen-1] = 0;
    25d6:	10 82       	st	Z, r1
	uint8_t crcCalc = crc8(datagram, dlen-1);
    25d8:	6f ef       	ldi	r22, 0xFF	; 255
    25da:	6d 0f       	add	r22, r29
    25dc:	c7 01       	movw	r24, r14
    25de:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <crc8>
	datagram[0] -= 1;	
    25e2:	f7 01       	movw	r30, r14
    25e4:	90 81       	ld	r25, Z
    25e6:	91 50       	subi	r25, 0x01	; 1
    25e8:	90 83       	st	Z, r25

	if(crcCalc != crcDgram){
    25ea:	8c 17       	cp	r24, r28
    25ec:	69 f0       	breq	.+26     	; 0x2608 <parseDatagram+0xb4>
		uart1_puts_P("ERROR: CRC Failed\n");
    25ee:	87 e7       	ldi	r24, 0x77	; 119
    25f0:	95 e0       	ldi	r25, 0x05	; 5
    25f2:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
		ledB.state = 1;
    25f6:	ea eb       	ldi	r30, 0xBA	; 186
    25f8:	f2 e0       	ldi	r31, 0x02	; 2
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	80 83       	st	Z, r24
		ledB.count = 1000;
    25fe:	88 ee       	ldi	r24, 0xE8	; 232
    2600:	93 e0       	ldi	r25, 0x03	; 3
    2602:	94 83       	std	Z+4, r25	; 0x04
    2604:	83 83       	std	Z+3, r24	; 0x03
		return;
    2606:	98 c0       	rjmp	.+304    	; 0x2738 <parseDatagram+0x1e4>
	}
	
	switch(datagram[1]){
    2608:	f7 01       	movw	r30, r14
    260a:	81 81       	ldd	r24, Z+1	; 0x01
    260c:	8e 30       	cpi	r24, 0x0E	; 14
    260e:	09 f4       	brne	.+2      	; 0x2612 <parseDatagram+0xbe>
    2610:	49 c0       	rjmp	.+146    	; 0x26a4 <parseDatagram+0x150>
    2612:	70 f4       	brcc	.+28     	; 0x2630 <parseDatagram+0xdc>
    2614:	88 30       	cpi	r24, 0x08	; 8
    2616:	71 f1       	breq	.+92     	; 0x2674 <parseDatagram+0x120>
    2618:	28 f4       	brcc	.+10     	; 0x2624 <parseDatagram+0xd0>
    261a:	84 30       	cpi	r24, 0x04	; 4
    261c:	f9 f0       	breq	.+62     	; 0x265c <parseDatagram+0x108>
    261e:	85 30       	cpi	r24, 0x05	; 5
    2620:	19 f1       	breq	.+70     	; 0x2668 <parseDatagram+0x114>
    2622:	6e c0       	rjmp	.+220    	; 0x2700 <parseDatagram+0x1ac>
    2624:	8c 30       	cpi	r24, 0x0C	; 12
    2626:	91 f1       	breq	.+100    	; 0x268c <parseDatagram+0x138>
    2628:	b8 f5       	brcc	.+110    	; 0x2698 <parseDatagram+0x144>
    262a:	89 30       	cpi	r24, 0x09	; 9
    262c:	49 f1       	breq	.+82     	; 0x2680 <parseDatagram+0x12c>
    262e:	68 c0       	rjmp	.+208    	; 0x2700 <parseDatagram+0x1ac>
    2630:	86 31       	cpi	r24, 0x16	; 22
    2632:	09 f4       	brne	.+2      	; 0x2636 <parseDatagram+0xe2>
    2634:	4f c0       	rjmp	.+158    	; 0x26d4 <parseDatagram+0x180>
    2636:	40 f4       	brcc	.+16     	; 0x2648 <parseDatagram+0xf4>
    2638:	84 31       	cpi	r24, 0x14	; 20
    263a:	09 f4       	brne	.+2      	; 0x263e <parseDatagram+0xea>
    263c:	3f c0       	rjmp	.+126    	; 0x26bc <parseDatagram+0x168>
    263e:	08 f0       	brcs	.+2      	; 0x2642 <parseDatagram+0xee>
    2640:	43 c0       	rjmp	.+134    	; 0x26c8 <parseDatagram+0x174>
    2642:	80 31       	cpi	r24, 0x10	; 16
    2644:	a9 f1       	breq	.+106    	; 0x26b0 <parseDatagram+0x15c>
    2646:	5c c0       	rjmp	.+184    	; 0x2700 <parseDatagram+0x1ac>
    2648:	89 31       	cpi	r24, 0x19	; 25
    264a:	09 f4       	brne	.+2      	; 0x264e <parseDatagram+0xfa>
    264c:	4f c0       	rjmp	.+158    	; 0x26ec <parseDatagram+0x198>
    264e:	8f 3f       	cpi	r24, 0xFF	; 255
    2650:	09 f4       	brne	.+2      	; 0x2654 <parseDatagram+0x100>
    2652:	52 c0       	rjmp	.+164    	; 0x26f8 <parseDatagram+0x1a4>
    2654:	88 31       	cpi	r24, 0x18	; 24
    2656:	09 f0       	breq	.+2      	; 0x265a <parseDatagram+0x106>
    2658:	53 c0       	rjmp	.+166    	; 0x2700 <parseDatagram+0x1ac>
    265a:	42 c0       	rjmp	.+132    	; 0x26e0 <parseDatagram+0x18c>
		case AD_MOTOR_A:
			parseMotorOp(datagram, &motorA);
    265c:	69 e5       	ldi	r22, 0x59	; 89
    265e:	72 e0       	ldi	r23, 0x02	; 2
    2660:	c7 01       	movw	r24, r14
    2662:	0e 94 27 0b 	call	0x164e	; 0x164e <parseMotorOp>
		break;
    2666:	68 c0       	rjmp	.+208    	; 0x2738 <parseDatagram+0x1e4>
		case AD_MOTOR_B:
			parseMotorOp(datagram, &motorB);
    2668:	6a ee       	ldi	r22, 0xEA	; 234
    266a:	72 e0       	ldi	r23, 0x02	; 2
    266c:	c7 01       	movw	r24, r14
    266e:	0e 94 27 0b 	call	0x164e	; 0x164e <parseMotorOp>
		break;
    2672:	62 c0       	rjmp	.+196    	; 0x2738 <parseDatagram+0x1e4>
		
		case AD_SERVO_A:
			parseServoOp(datagram, &servoA);
    2674:	6d e8       	ldi	r22, 0x8D	; 141
    2676:	72 e0       	ldi	r23, 0x02	; 2
    2678:	c7 01       	movw	r24, r14
    267a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <parseServoOp>
		break;
    267e:	5c c0       	rjmp	.+184    	; 0x2738 <parseDatagram+0x1e4>
		case AD_SERVO_B:
			parseServoOp(datagram, &servoB);
    2680:	6c e0       	ldi	r22, 0x0C	; 12
    2682:	73 e0       	ldi	r23, 0x03	; 3
    2684:	c7 01       	movw	r24, r14
    2686:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <parseServoOp>
		break;
    268a:	56 c0       	rjmp	.+172    	; 0x2738 <parseDatagram+0x1e4>
		
		case AD_LED_R:
			parseLEDOp(datagram, &ledR);
    268c:	65 e2       	ldi	r22, 0x25	; 37
    268e:	73 e0       	ldi	r23, 0x03	; 3
    2690:	c7 01       	movw	r24, r14
    2692:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <parseLEDOp>
		break;
    2696:	50 c0       	rjmp	.+160    	; 0x2738 <parseDatagram+0x1e4>
		case AD_LED_G:
			parseLEDOp(datagram, &ledG);
    2698:	65 ee       	ldi	r22, 0xE5	; 229
    269a:	72 e0       	ldi	r23, 0x02	; 2
    269c:	c7 01       	movw	r24, r14
    269e:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <parseLEDOp>
		break;
    26a2:	4a c0       	rjmp	.+148    	; 0x2738 <parseDatagram+0x1e4>
		case AD_LED_B:
			parseLEDOp(datagram, &ledB);
    26a4:	6a eb       	ldi	r22, 0xBA	; 186
    26a6:	72 e0       	ldi	r23, 0x02	; 2
    26a8:	c7 01       	movw	r24, r14
    26aa:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <parseLEDOp>
		break;
    26ae:	44 c0       	rjmp	.+136    	; 0x2738 <parseDatagram+0x1e4>
		
		case AD_DISPLAY_A:
			parseDisplayOp(datagram, &displayA);
    26b0:	6e e9       	ldi	r22, 0x9E	; 158
    26b2:	72 e0       	ldi	r23, 0x02	; 2
    26b4:	c7 01       	movw	r24, r14
    26b6:	0e 94 36 10 	call	0x206c	; 0x206c <parseDisplayOp>
		break;
    26ba:	3e c0       	rjmp	.+124    	; 0x2738 <parseDatagram+0x1e4>

		case AD_BTN_A:
			parseButtonOp(datagram, &buttonA);
    26bc:	63 e5       	ldi	r22, 0x53	; 83
    26be:	72 e0       	ldi	r23, 0x02	; 2
    26c0:	c7 01       	movw	r24, r14
    26c2:	0e 94 ef 10 	call	0x21de	; 0x21de <parseButtonOp>
		break;
    26c6:	38 c0       	rjmp	.+112    	; 0x2738 <parseDatagram+0x1e4>
		case AD_BTN_B:
			parseButtonOp(datagram, &buttonB);
    26c8:	6f ed       	ldi	r22, 0xDF	; 223
    26ca:	72 e0       	ldi	r23, 0x02	; 2
    26cc:	c7 01       	movw	r24, r14
    26ce:	0e 94 ef 10 	call	0x21de	; 0x21de <parseButtonOp>
		break;
    26d2:	32 c0       	rjmp	.+100    	; 0x2738 <parseDatagram+0x1e4>
		case AD_BTN_C:
			parseButtonOp(datagram, &buttonC);
    26d4:	6b e7       	ldi	r22, 0x7B	; 123
    26d6:	72 e0       	ldi	r23, 0x02	; 2
    26d8:	c7 01       	movw	r24, r14
    26da:	0e 94 ef 10 	call	0x21de	; 0x21de <parseButtonOp>
		break;
    26de:	2c c0       	rjmp	.+88     	; 0x2738 <parseDatagram+0x1e4>

		case AD_ADC_V:
			parseADCOp(datagram, &vdiv);
    26e0:	61 e8       	ldi	r22, 0x81	; 129
    26e2:	72 e0       	ldi	r23, 0x02	; 2
    26e4:	c7 01       	movw	r24, r14
    26e6:	0e 94 70 11 	call	0x22e0	; 0x22e0 <parseADCOp>
		break;
    26ea:	26 c0       	rjmp	.+76     	; 0x2738 <parseDatagram+0x1e4>
		case AD_ADC_C:
			parseADCOp(datagram, &csense);
    26ec:	6e ea       	ldi	r22, 0xAE	; 174
    26ee:	72 e0       	ldi	r23, 0x02	; 2
    26f0:	c7 01       	movw	r24, r14
    26f2:	0e 94 70 11 	call	0x22e0	; 0x22e0 <parseADCOp>
		break;
    26f6:	20 c0       	rjmp	.+64     	; 0x2738 <parseDatagram+0x1e4>

		case AD_ALL:
			parseAllOp(datagram);
    26f8:	c7 01       	movw	r24, r14
    26fa:	0e 94 1c 12 	call	0x2438	; 0x2438 <parseAllOp>
		break;
    26fe:	1c c0       	rjmp	.+56     	; 0x2738 <parseDatagram+0x1e4>
		
		default:
			uart1_puts_P("ERROR: Unknown Address\n");
    2700:	8f e5       	ldi	r24, 0x5F	; 95
    2702:	95 e0       	ldi	r25, 0x05	; 5
    2704:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
			//flash BLUE LED
			ledB.state = 1;
    2708:	ea eb       	ldi	r30, 0xBA	; 186
    270a:	f2 e0       	ldi	r31, 0x02	; 2
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	80 83       	st	Z, r24
			ledB.count = 1000;
    2710:	88 ee       	ldi	r24, 0xE8	; 232
    2712:	93 e0       	ldi	r25, 0x03	; 3
    2714:	94 83       	std	Z+4, r25	; 0x04
    2716:	83 83       	std	Z+3, r24	; 0x03
		break;
    2718:	0f c0       	rjmp	.+30     	; 0x2738 <parseDatagram+0x1e4>
    271a:	8f ee       	ldi	r24, 0xEF	; 239
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	f1 f7       	brne	.-4      	; 0x271e <parseDatagram+0x1ca>
    2722:	00 c0       	rjmp	.+0      	; 0x2724 <parseDatagram+0x1d0>
    2724:	00 00       	nop
	uint8_t dlen = checkBuffer();
	datagram[0] = dlen; //length of the datagram
	for(uint8_t i = 1; i < dlen; i++){
		_delay_us(UART_INTERBYTE_WAIT);
		
		datagram[i] = checkBuffer();
    2726:	0e 94 77 0a 	call	0x14ee	; 0x14ee <checkBuffer>
    272a:	f7 01       	movw	r30, r14
    272c:	81 83       	std	Z+1, r24	; 0x01
    272e:	87 01       	movw	r16, r14
    2730:	0e 5f       	subi	r16, 0xFE	; 254
    2732:	1f 4f       	sbci	r17, 0xFF	; 255
    2734:	c1 e0       	ldi	r28, 0x01	; 1
    2736:	46 cf       	rjmp	.-372    	; 0x25c4 <parseDatagram+0x70>
			//flash BLUE LED
			ledB.state = 1;
			ledB.count = 1000;
		break;
	}
}
    2738:	df 91       	pop	r29
    273a:	cf 91       	pop	r28
    273c:	1f 91       	pop	r17
    273e:	0f 91       	pop	r16
    2740:	ff 90       	pop	r15
    2742:	ef 90       	pop	r14
    2744:	08 95       	ret

00002746 <main>:
		}
		button->debounceCount = 500;
	}
}

int16_t main(void){
    2746:	cf 93       	push	r28
    2748:	df 93       	push	r29
    274a:	00 d0       	rcall	.+0      	; 0x274c <main+0x6>
    274c:	00 d0       	rcall	.+0      	; 0x274e <main+0x8>
    274e:	00 d0       	rcall	.+0      	; 0x2750 <main+0xa>
    2750:	cd b7       	in	r28, 0x3d	; 61
    2752:	de b7       	in	r29, 0x3e	; 62
	
	init_structs();
    2754:	0e 94 c4 07 	call	0xf88	; 0xf88 <init_structs>
	init();
    2758:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <init>
	init_display();
    275c:	0e 94 14 0a 	call	0x1428	; 0x1428 <init_display>
	detect_reset();
    2760:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <detect_reset>
	ledB.state = 1;
    2764:	ea eb       	ldi	r30, 0xBA	; 186
    2766:	f2 e0       	ldi	r31, 0x02	; 2
    2768:	21 e0       	ldi	r18, 0x01	; 1
    276a:	20 83       	st	Z, r18
	ledB.count = 10000;
    276c:	80 e1       	ldi	r24, 0x10	; 16
    276e:	97 e2       	ldi	r25, 0x27	; 39
    2770:	94 83       	std	Z+4, r25	; 0x04
    2772:	83 83       	std	Z+3, r24	; 0x03
	ledR.state = 1;
    2774:	e5 e2       	ldi	r30, 0x25	; 37
    2776:	f3 e0       	ldi	r31, 0x03	; 3
    2778:	20 83       	st	Z, r18
	ledR.count = 10000;
    277a:	94 83       	std	Z+4, r25	; 0x04
    277c:	83 83       	std	Z+3, r24	; 0x03

	uint8_t com;

	vdiv.count = ADC_COUNT;
    277e:	86 e0       	ldi	r24, 0x06	; 6
    2780:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <vdiv+0xa>
	ADCSRA |= (1<<ADSC);//start the first ADC conversion
    2784:	ea e7       	ldi	r30, 0x7A	; 122
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	80 64       	ori	r24, 0x40	; 64
    278c:	80 83       	st	Z, r24
    278e:	0d ea       	ldi	r16, 0xAD	; 173
    2790:	12 e0       	ldi	r17, 0x02	; 2
//sprintf(fstring, "encA: %6d\n", motorA.position);
//uart1_puts(fstring);
//sprintf(fstring, "encB: %6d\n", motorB.position);
//uart1_puts(fstring);

		motorA.degrees = motorA.position * DEGPERCOUNT;
    2792:	0f 2e       	mov	r0, r31
    2794:	f9 e5       	ldi	r31, 0x59	; 89
    2796:	ef 2e       	mov	r14, r31
    2798:	f2 e0       	ldi	r31, 0x02	; 2
    279a:	ff 2e       	mov	r15, r31
    279c:	f0 2d       	mov	r31, r0
		motorB.degrees = motorB.position * DEGPERCOUNT;
    279e:	0f 2e       	mov	r0, r31
    27a0:	fa ee       	ldi	r31, 0xEA	; 234
    27a2:	cf 2e       	mov	r12, r31
    27a4:	f2 e0       	ldi	r31, 0x02	; 2
    27a6:	df 2e       	mov	r13, r31
    27a8:	f0 2d       	mov	r31, r0
			}
			motorB.pidTimerFlag = 0;
		}*/
		
		//Servo update
		if(servoA.state){
    27aa:	0f 2e       	mov	r0, r31
    27ac:	fd e8       	ldi	r31, 0x8D	; 141
    27ae:	8f 2e       	mov	r8, r31
    27b0:	f2 e0       	ldi	r31, 0x02	; 2
    27b2:	9f 2e       	mov	r9, r31
    27b4:	f0 2d       	mov	r31, r0
			//uart1_puts(fstring);
			//displayA.value = servoA.setPos/10;
		}else{
			PORTD &= ~(1<<SERVO_A);
		}
		if(servoB.state){
    27b6:	0f 2e       	mov	r0, r31
    27b8:	fc e0       	ldi	r31, 0x0C	; 12
    27ba:	2f 2e       	mov	r2, r31
    27bc:	f3 e0       	ldi	r31, 0x03	; 3
    27be:	3f 2e       	mov	r3, r31
    27c0:	f0 2d       	mov	r31, r0
	vdiv.count = ADC_COUNT;
	ADCSRA |= (1<<ADSC);//start the first ADC conversion
	
    while (1) 
    {
		com = checkBuffer();					
    27c2:	0e 94 77 0a 	call	0x14ee	; 0x14ee <checkBuffer>
		if(com == STARTBYTE){
    27c6:	81 31       	cpi	r24, 0x11	; 17
    27c8:	09 f0       	breq	.+2      	; 0x27cc <main+0x86>
    27ca:	ba c2       	rjmp	.+1396   	; 0x2d40 <main+0x5fa>
			parseDatagram(datagramG);
    27cc:	83 ea       	ldi	r24, 0xA3	; 163
    27ce:	92 e0       	ldi	r25, 0x02	; 2
    27d0:	0e 94 aa 12 	call	0x2554	; 0x2554 <parseDatagram>
    27d4:	b5 c2       	rjmp	.+1386   	; 0x2d40 <main+0x5fa>
		}
		//cleanup buffers
		com = 0;
		for(uint8_t j = 0; j < DGRAM_MAX_LENGTH; j++) datagramG[j] = 0;
    27d6:	11 92       	st	Z+, r1
    27d8:	e0 17       	cp	r30, r16
    27da:	f1 07       	cpc	r31, r17
    27dc:	e1 f7       	brne	.-8      	; 0x27d6 <main+0x90>
		dgrammem.fl = 0;
    27de:	ab e4       	ldi	r26, 0x4B	; 75
    27e0:	b2 e0       	ldi	r27, 0x02	; 2
    27e2:	1d 92       	st	X+, r1
    27e4:	1d 92       	st	X+, r1
    27e6:	1d 92       	st	X+, r1
    27e8:	1c 92       	st	X, r1
    27ea:	13 97       	sbiw	r26, 0x03	; 3
//sprintf(fstring, "encA: %6d\n", motorA.position);
//uart1_puts(fstring);
//sprintf(fstring, "encB: %6d\n", motorB.position);
//uart1_puts(fstring);

		motorA.degrees = motorA.position * DEGPERCOUNT;
    27ec:	f7 01       	movw	r30, r14
    27ee:	62 81       	ldd	r22, Z+2	; 0x02
    27f0:	73 81       	ldd	r23, Z+3	; 0x03
    27f2:	07 2e       	mov	r0, r23
    27f4:	00 0c       	add	r0, r0
    27f6:	88 0b       	sbc	r24, r24
    27f8:	99 0b       	sbc	r25, r25
    27fa:	0e 94 ce 1a 	call	0x359c	; 0x359c <__floatsisf>
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	40 ef       	ldi	r20, 0xF0	; 240
    2804:	5e e3       	ldi	r21, 0x3E	; 62
    2806:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <__mulsf3>
    280a:	0e 94 96 1a 	call	0x352c	; 0x352c <__fixsfsi>
    280e:	d7 01       	movw	r26, r14
    2810:	18 96       	adiw	r26, 0x08	; 8
    2812:	7c 93       	st	X, r23
    2814:	6e 93       	st	-X, r22
    2816:	17 97       	sbiw	r26, 0x07	; 7
		motorB.degrees = motorB.position * DEGPERCOUNT;
    2818:	f6 01       	movw	r30, r12
    281a:	62 81       	ldd	r22, Z+2	; 0x02
    281c:	73 81       	ldd	r23, Z+3	; 0x03
    281e:	07 2e       	mov	r0, r23
    2820:	00 0c       	add	r0, r0
    2822:	88 0b       	sbc	r24, r24
    2824:	99 0b       	sbc	r25, r25
    2826:	0e 94 ce 1a 	call	0x359c	; 0x359c <__floatsisf>
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	40 ef       	ldi	r20, 0xF0	; 240
    2830:	5e e3       	ldi	r21, 0x3E	; 62
    2832:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <__mulsf3>
    2836:	0e 94 96 1a 	call	0x352c	; 0x352c <__fixsfsi>
    283a:	d6 01       	movw	r26, r12
    283c:	18 96       	adiw	r26, 0x08	; 8
    283e:	7c 93       	st	X, r23
    2840:	6e 93       	st	-X, r22
    2842:	17 97       	sbiw	r26, 0x07	; 7
		//OCR1B = ((motorA.setSpeedDPS-0)*((0xFFFF-0)/(100-0))) + 0;
		OCR1B = mapRanges(abs(motorA.setSpeedDPS), 0, 100, 0, 0xFFFF);
    2844:	f7 01       	movw	r30, r14
    2846:	83 85       	ldd	r24, Z+11	; 0x0b
    2848:	94 85       	ldd	r25, Z+12	; 0x0c
    284a:	99 23       	and	r25, r25
    284c:	1c f4       	brge	.+6      	; 0x2854 <main+0x10e>
    284e:	91 95       	neg	r25
    2850:	81 95       	neg	r24
    2852:	91 09       	sbc	r25, r1
	}
}


uint16_t mapRanges(uint16_t a, uint16_t amin, uint16_t amax, uint16_t omin, uint16_t omax){
	return ((a-amin)*((omax-omin)/(amax-amin))) + omin; //maps from scale amin->amax to scale omin->omax
    2854:	4f e8       	ldi	r20, 0x8F	; 143
    2856:	52 e0       	ldi	r21, 0x02	; 2
    2858:	84 9f       	mul	r24, r20
    285a:	90 01       	movw	r18, r0
    285c:	85 9f       	mul	r24, r21
    285e:	30 0d       	add	r19, r0
    2860:	94 9f       	mul	r25, r20
    2862:	30 0d       	add	r19, r0
    2864:	11 24       	eor	r1, r1
//uart1_puts(fstring);

		motorA.degrees = motorA.position * DEGPERCOUNT;
		motorB.degrees = motorB.position * DEGPERCOUNT;
		//OCR1B = ((motorA.setSpeedDPS-0)*((0xFFFF-0)/(100-0))) + 0;
		OCR1B = mapRanges(abs(motorA.setSpeedDPS), 0, 100, 0, 0xFFFF);
    2866:	aa e8       	ldi	r26, 0x8A	; 138
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	11 96       	adiw	r26, 0x01	; 1
    286c:	3c 93       	st	X, r19
    286e:	2e 93       	st	-X, r18

		if(motorA.dir == 1){
    2870:	f7 01       	movw	r30, r14
    2872:	81 85       	ldd	r24, Z+9	; 0x09
    2874:	81 30       	cpi	r24, 0x01	; 1
    2876:	11 f4       	brne	.+4      	; 0x287c <main+0x136>
			PORTC |= (1<<MOTOR_A_PHA);
    2878:	40 9a       	sbi	0x08, 0	; 8
    287a:	09 c0       	rjmp	.+18     	; 0x288e <main+0x148>
			}else if(motorA.dir == -1){
    287c:	8f 3f       	cpi	r24, 0xFF	; 255
    287e:	11 f4       	brne	.+4      	; 0x2884 <main+0x13e>
			PORTC &= ~(1<<MOTOR_A_PHA);
    2880:	40 98       	cbi	0x08, 0	; 8
    2882:	05 c0       	rjmp	.+10     	; 0x288e <main+0x148>
			}else{
			OCR1B = 0;
    2884:	aa e8       	ldi	r26, 0x8A	; 138
    2886:	b0 e0       	ldi	r27, 0x00	; 0
    2888:	11 96       	adiw	r26, 0x01	; 1
    288a:	1c 92       	st	X, r1
    288c:	1e 92       	st	-X, r1
		}

		OCR1A = mapRanges(abs(motorB.setSpeedDPS), 0, 100, 0, 0xFFFF);
    288e:	f6 01       	movw	r30, r12
    2890:	83 85       	ldd	r24, Z+11	; 0x0b
    2892:	94 85       	ldd	r25, Z+12	; 0x0c
    2894:	99 23       	and	r25, r25
    2896:	1c f4       	brge	.+6      	; 0x289e <main+0x158>
    2898:	91 95       	neg	r25
    289a:	81 95       	neg	r24
    289c:	91 09       	sbc	r25, r1
	}
}


uint16_t mapRanges(uint16_t a, uint16_t amin, uint16_t amax, uint16_t omin, uint16_t omax){
	return ((a-amin)*((omax-omin)/(amax-amin))) + omin; //maps from scale amin->amax to scale omin->omax
    289e:	4f e8       	ldi	r20, 0x8F	; 143
    28a0:	52 e0       	ldi	r21, 0x02	; 2
    28a2:	84 9f       	mul	r24, r20
    28a4:	90 01       	movw	r18, r0
    28a6:	85 9f       	mul	r24, r21
    28a8:	30 0d       	add	r19, r0
    28aa:	94 9f       	mul	r25, r20
    28ac:	30 0d       	add	r19, r0
    28ae:	11 24       	eor	r1, r1
			PORTC &= ~(1<<MOTOR_A_PHA);
			}else{
			OCR1B = 0;
		}

		OCR1A = mapRanges(abs(motorB.setSpeedDPS), 0, 100, 0, 0xFFFF);
    28b0:	a8 e8       	ldi	r26, 0x88	; 136
    28b2:	b0 e0       	ldi	r27, 0x00	; 0
    28b4:	11 96       	adiw	r26, 0x01	; 1
    28b6:	3c 93       	st	X, r19
    28b8:	2e 93       	st	-X, r18

		if(motorB.dir == 1){
    28ba:	f6 01       	movw	r30, r12
    28bc:	81 85       	ldd	r24, Z+9	; 0x09
    28be:	81 30       	cpi	r24, 0x01	; 1
    28c0:	11 f4       	brne	.+4      	; 0x28c6 <main+0x180>
			PORTC &= ~(1<<MOTOR_B_PHA);
    28c2:	41 98       	cbi	0x08, 1	; 8
    28c4:	09 c0       	rjmp	.+18     	; 0x28d8 <main+0x192>
			}else if(motorB.dir == -1){
    28c6:	8f 3f       	cpi	r24, 0xFF	; 255
    28c8:	11 f4       	brne	.+4      	; 0x28ce <main+0x188>
			PORTC |= (1<<MOTOR_B_PHA);
    28ca:	41 9a       	sbi	0x08, 1	; 8
    28cc:	05 c0       	rjmp	.+10     	; 0x28d8 <main+0x192>
			}else{
			OCR1A = 0;
    28ce:	a8 e8       	ldi	r26, 0x88	; 136
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	11 96       	adiw	r26, 0x01	; 1
    28d4:	1c 92       	st	X, r1
    28d6:	1e 92       	st	-X, r1
			}
			motorB.pidTimerFlag = 0;
		}*/
		
		//Servo update
		if(servoA.state){
    28d8:	f4 01       	movw	r30, r8
    28da:	80 81       	ld	r24, Z
    28dc:	88 23       	and	r24, r24
    28de:	09 f4       	brne	.+2      	; 0x28e2 <main+0x19c>
    28e0:	56 c0       	rjmp	.+172    	; 0x298e <main+0x248>
			if(servoA.setPos < servoA.minRange) servoA.setPos = servoA.minRange;//clip the position to within bounds
    28e2:	45 80       	ldd	r4, Z+5	; 0x05
    28e4:	56 80       	ldd	r5, Z+6	; 0x06
    28e6:	67 80       	ldd	r6, Z+7	; 0x07
    28e8:	70 84       	ldd	r7, Z+8	; 0x08
    28ea:	81 81       	ldd	r24, Z+1	; 0x01
    28ec:	92 81       	ldd	r25, Z+2	; 0x02
    28ee:	a3 81       	ldd	r26, Z+3	; 0x03
    28f0:	b4 81       	ldd	r27, Z+4	; 0x04
    28f2:	84 15       	cp	r24, r4
    28f4:	95 05       	cpc	r25, r5
    28f6:	a6 05       	cpc	r26, r6
    28f8:	b7 05       	cpc	r27, r7
    28fa:	24 f4       	brge	.+8      	; 0x2904 <main+0x1be>
    28fc:	41 82       	std	Z+1, r4	; 0x01
    28fe:	52 82       	std	Z+2, r5	; 0x02
    2900:	63 82       	std	Z+3, r6	; 0x03
    2902:	74 82       	std	Z+4, r7	; 0x04
			if(servoA.setPos > servoA.maxRange) servoA.setPos = servoA.maxRange;
    2904:	d4 01       	movw	r26, r8
    2906:	19 96       	adiw	r26, 0x09	; 9
    2908:	2d 91       	ld	r18, X+
    290a:	3d 91       	ld	r19, X+
    290c:	4d 91       	ld	r20, X+
    290e:	5c 91       	ld	r21, X
    2910:	1c 97       	sbiw	r26, 0x0c	; 12
    2912:	2b 83       	std	Y+3, r18	; 0x03
    2914:	3c 83       	std	Y+4, r19	; 0x04
    2916:	4d 83       	std	Y+5, r20	; 0x05
    2918:	5e 83       	std	Y+6, r21	; 0x06
    291a:	11 96       	adiw	r26, 0x01	; 1
    291c:	8d 91       	ld	r24, X+
    291e:	9d 91       	ld	r25, X+
    2920:	0d 90       	ld	r0, X+
    2922:	bc 91       	ld	r27, X
    2924:	a0 2d       	mov	r26, r0
    2926:	28 17       	cp	r18, r24
    2928:	39 07       	cpc	r19, r25
    292a:	4a 07       	cpc	r20, r26
    292c:	5b 07       	cpc	r21, r27
    292e:	2c f4       	brge	.+10     	; 0x293a <main+0x1f4>
    2930:	f4 01       	movw	r30, r8
    2932:	21 83       	std	Z+1, r18	; 0x01
    2934:	32 83       	std	Z+2, r19	; 0x02
    2936:	43 83       	std	Z+3, r20	; 0x03
    2938:	54 83       	std	Z+4, r21	; 0x04
			OCR3A = MAP(servoA.setPos, servoA.minRange, servoA.maxRange, servoA.minPWM, servoA.maxPWM);//bad stuff happens when data types are to small
    293a:	d4 01       	movw	r26, r8
    293c:	1d 96       	adiw	r26, 0x0d	; 13
    293e:	ad 90       	ld	r10, X+
    2940:	bc 90       	ld	r11, X
    2942:	1e 97       	sbiw	r26, 0x0e	; 14
    2944:	11 96       	adiw	r26, 0x01	; 1
    2946:	8d 91       	ld	r24, X+
    2948:	9d 91       	ld	r25, X+
    294a:	0d 90       	ld	r0, X+
    294c:	bc 91       	ld	r27, X
    294e:	a0 2d       	mov	r26, r0
    2950:	9c 01       	movw	r18, r24
    2952:	ad 01       	movw	r20, r26
    2954:	24 19       	sub	r18, r4
    2956:	35 09       	sbc	r19, r5
    2958:	46 09       	sbc	r20, r6
    295a:	57 09       	sbc	r21, r7
    295c:	f4 01       	movw	r30, r8
    295e:	a7 85       	ldd	r26, Z+15	; 0x0f
    2960:	b0 89       	ldd	r27, Z+16	; 0x10
    2962:	aa 19       	sub	r26, r10
    2964:	bb 09       	sbc	r27, r11
    2966:	0e 94 38 1c 	call	0x3870	; 0x3870 <__muluhisi3>
    296a:	2b 81       	ldd	r18, Y+3	; 0x03
    296c:	3c 81       	ldd	r19, Y+4	; 0x04
    296e:	4d 81       	ldd	r20, Y+5	; 0x05
    2970:	5e 81       	ldd	r21, Y+6	; 0x06
    2972:	24 19       	sub	r18, r4
    2974:	35 09       	sbc	r19, r5
    2976:	46 09       	sbc	r20, r6
    2978:	57 09       	sbc	r21, r7
    297a:	0e 94 13 1c 	call	0x3826	; 0x3826 <__divmodsi4>
    297e:	2a 0d       	add	r18, r10
    2980:	3b 1d       	adc	r19, r11
    2982:	a8 e9       	ldi	r26, 0x98	; 152
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	11 96       	adiw	r26, 0x01	; 1
    2988:	3c 93       	st	X, r19
    298a:	2e 93       	st	-X, r18
    298c:	01 c0       	rjmp	.+2      	; 0x2990 <main+0x24a>
			//uart1_puts(fstring);
			//sprintf(fstring, "Mapped: %ld tic\n", MAP(servoA.setPos, servoA.minRange, servoA.maxRange, servoA.minPWM, servoA.maxPWM));
			//uart1_puts(fstring);
			//displayA.value = servoA.setPos/10;
		}else{
			PORTD &= ~(1<<SERVO_A);
    298e:	58 98       	cbi	0x0b, 0	; 11
		}
		if(servoB.state){
    2990:	f1 01       	movw	r30, r2
    2992:	80 81       	ld	r24, Z
    2994:	88 23       	and	r24, r24
    2996:	09 f4       	brne	.+2      	; 0x299a <main+0x254>
    2998:	56 c0       	rjmp	.+172    	; 0x2a46 <main+0x300>
			if(servoB.setPos < servoB.minRange) servoB.setPos = servoB.minRange;
    299a:	45 80       	ldd	r4, Z+5	; 0x05
    299c:	56 80       	ldd	r5, Z+6	; 0x06
    299e:	67 80       	ldd	r6, Z+7	; 0x07
    29a0:	70 84       	ldd	r7, Z+8	; 0x08
    29a2:	81 81       	ldd	r24, Z+1	; 0x01
    29a4:	92 81       	ldd	r25, Z+2	; 0x02
    29a6:	a3 81       	ldd	r26, Z+3	; 0x03
    29a8:	b4 81       	ldd	r27, Z+4	; 0x04
    29aa:	84 15       	cp	r24, r4
    29ac:	95 05       	cpc	r25, r5
    29ae:	a6 05       	cpc	r26, r6
    29b0:	b7 05       	cpc	r27, r7
    29b2:	24 f4       	brge	.+8      	; 0x29bc <main+0x276>
    29b4:	41 82       	std	Z+1, r4	; 0x01
    29b6:	52 82       	std	Z+2, r5	; 0x02
    29b8:	63 82       	std	Z+3, r6	; 0x03
    29ba:	74 82       	std	Z+4, r7	; 0x04
			if(servoB.setPos > servoB.maxRange) servoB.setPos = servoB.maxRange;
    29bc:	d1 01       	movw	r26, r2
    29be:	19 96       	adiw	r26, 0x09	; 9
    29c0:	2d 91       	ld	r18, X+
    29c2:	3d 91       	ld	r19, X+
    29c4:	4d 91       	ld	r20, X+
    29c6:	5c 91       	ld	r21, X
    29c8:	1c 97       	sbiw	r26, 0x0c	; 12
    29ca:	2b 83       	std	Y+3, r18	; 0x03
    29cc:	3c 83       	std	Y+4, r19	; 0x04
    29ce:	4d 83       	std	Y+5, r20	; 0x05
    29d0:	5e 83       	std	Y+6, r21	; 0x06
    29d2:	11 96       	adiw	r26, 0x01	; 1
    29d4:	8d 91       	ld	r24, X+
    29d6:	9d 91       	ld	r25, X+
    29d8:	0d 90       	ld	r0, X+
    29da:	bc 91       	ld	r27, X
    29dc:	a0 2d       	mov	r26, r0
    29de:	28 17       	cp	r18, r24
    29e0:	39 07       	cpc	r19, r25
    29e2:	4a 07       	cpc	r20, r26
    29e4:	5b 07       	cpc	r21, r27
    29e6:	2c f4       	brge	.+10     	; 0x29f2 <main+0x2ac>
    29e8:	f1 01       	movw	r30, r2
    29ea:	21 83       	std	Z+1, r18	; 0x01
    29ec:	32 83       	std	Z+2, r19	; 0x02
    29ee:	43 83       	std	Z+3, r20	; 0x03
    29f0:	54 83       	std	Z+4, r21	; 0x04
			OCR4A = MAP(servoB.setPos, servoB.minRange, servoB.maxRange, servoB.minPWM, servoB.maxPWM);
    29f2:	d1 01       	movw	r26, r2
    29f4:	1d 96       	adiw	r26, 0x0d	; 13
    29f6:	ad 90       	ld	r10, X+
    29f8:	bc 90       	ld	r11, X
    29fa:	1e 97       	sbiw	r26, 0x0e	; 14
    29fc:	11 96       	adiw	r26, 0x01	; 1
    29fe:	8d 91       	ld	r24, X+
    2a00:	9d 91       	ld	r25, X+
    2a02:	0d 90       	ld	r0, X+
    2a04:	bc 91       	ld	r27, X
    2a06:	a0 2d       	mov	r26, r0
    2a08:	9c 01       	movw	r18, r24
    2a0a:	ad 01       	movw	r20, r26
    2a0c:	24 19       	sub	r18, r4
    2a0e:	35 09       	sbc	r19, r5
    2a10:	46 09       	sbc	r20, r6
    2a12:	57 09       	sbc	r21, r7
    2a14:	f1 01       	movw	r30, r2
    2a16:	a7 85       	ldd	r26, Z+15	; 0x0f
    2a18:	b0 89       	ldd	r27, Z+16	; 0x10
    2a1a:	aa 19       	sub	r26, r10
    2a1c:	bb 09       	sbc	r27, r11
    2a1e:	0e 94 38 1c 	call	0x3870	; 0x3870 <__muluhisi3>
    2a22:	2b 81       	ldd	r18, Y+3	; 0x03
    2a24:	3c 81       	ldd	r19, Y+4	; 0x04
    2a26:	4d 81       	ldd	r20, Y+5	; 0x05
    2a28:	5e 81       	ldd	r21, Y+6	; 0x06
    2a2a:	24 19       	sub	r18, r4
    2a2c:	35 09       	sbc	r19, r5
    2a2e:	46 09       	sbc	r20, r6
    2a30:	57 09       	sbc	r21, r7
    2a32:	0e 94 13 1c 	call	0x3826	; 0x3826 <__divmodsi4>
    2a36:	2a 0d       	add	r18, r10
    2a38:	3b 1d       	adc	r19, r11
    2a3a:	a8 ea       	ldi	r26, 0xA8	; 168
    2a3c:	b0 e0       	ldi	r27, 0x00	; 0
    2a3e:	11 96       	adiw	r26, 0x01	; 1
    2a40:	3c 93       	st	X, r19
    2a42:	2e 93       	st	-X, r18
    2a44:	01 c0       	rjmp	.+2      	; 0x2a48 <main+0x302>
		}else{
			PORTD &= ~(1<<SERVO_B);
    2a46:	59 98       	cbi	0x0b, 1	; 11
		}
				

		//Display update
		if(displayA.draw){
    2a48:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <displayA+0x1>
    2a4c:	88 23       	and	r24, r24
    2a4e:	31 f0       	breq	.+12     	; 0x2a5c <main+0x316>
			update_dd7s(&displayA);
    2a50:	8e e9       	ldi	r24, 0x9E	; 158
    2a52:	92 e0       	ldi	r25, 0x02	; 2
    2a54:	0e 94 36 0a 	call	0x146c	; 0x146c <update_dd7s>
			displayA.draw = 0;
    2a58:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <displayA+0x1>
		}
		
						
		//LED update
		if(ledR.state > 0){
    2a5c:	e5 e2       	ldi	r30, 0x25	; 37
    2a5e:	f3 e0       	ldi	r31, 0x03	; 3
    2a60:	80 81       	ld	r24, Z
    2a62:	18 16       	cp	r1, r24
    2a64:	74 f4       	brge	.+28     	; 0x2a82 <main+0x33c>
			if(ledR.brightness > 0) redLEDPercent(ledR.brightness);
    2a66:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <ledR+0x1>
    2a6a:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <ledR+0x2>
    2a6e:	18 16       	cp	r1, r24
    2a70:	19 06       	cpc	r1, r25
    2a72:	1c f4       	brge	.+6      	; 0x2a7a <main+0x334>
    2a74:	0e 94 48 09 	call	0x1290	; 0x1290 <redLEDPercent>
    2a78:	07 c0       	rjmp	.+14     	; 0x2a88 <main+0x342>
			else LEDOn(LED_R);
    2a7a:	86 e0       	ldi	r24, 0x06	; 6
    2a7c:	0e 94 35 09 	call	0x126a	; 0x126a <LEDOn>
    2a80:	03 c0       	rjmp	.+6      	; 0x2a88 <main+0x342>
		} else LEDOff(LED_R);
    2a82:	86 e0       	ldi	r24, 0x06	; 6
    2a84:	0e 94 21 09 	call	0x1242	; 0x1242 <LEDOff>

		if(ledG.state > 0){
    2a88:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <ledG>
    2a8c:	18 16       	cp	r1, r24
    2a8e:	74 f4       	brge	.+28     	; 0x2aac <main+0x366>
			if(ledG.brightness > 0) greenLEDPercent(ledG.brightness);
    2a90:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ledG+0x1>
    2a94:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <ledG+0x2>
    2a98:	18 16       	cp	r1, r24
    2a9a:	19 06       	cpc	r1, r25
    2a9c:	1c f4       	brge	.+6      	; 0x2aa4 <main+0x35e>
    2a9e:	0e 94 63 09 	call	0x12c6	; 0x12c6 <greenLEDPercent>
    2aa2:	07 c0       	rjmp	.+14     	; 0x2ab2 <main+0x36c>
			else LEDOn(LED_G);
    2aa4:	85 e0       	ldi	r24, 0x05	; 5
    2aa6:	0e 94 35 09 	call	0x126a	; 0x126a <LEDOn>
    2aaa:	03 c0       	rjmp	.+6      	; 0x2ab2 <main+0x36c>
		} else LEDOff(LED_G);
    2aac:	85 e0       	ldi	r24, 0x05	; 5
    2aae:	0e 94 21 09 	call	0x1242	; 0x1242 <LEDOff>

		if(ledB.state > 0){ 
    2ab2:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <ledB>
    2ab6:	18 16       	cp	r1, r24
    2ab8:	74 f4       	brge	.+28     	; 0x2ad6 <main+0x390>
			if(ledB.brightness > 0) blueLEDPercent(ledB.brightness);
    2aba:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <ledB+0x1>
    2abe:	90 91 bc 02 	lds	r25, 0x02BC	; 0x8002bc <ledB+0x2>
    2ac2:	18 16       	cp	r1, r24
    2ac4:	19 06       	cpc	r1, r25
    2ac6:	1c f4       	brge	.+6      	; 0x2ace <main+0x388>
    2ac8:	0e 94 7e 09 	call	0x12fc	; 0x12fc <blueLEDPercent>
    2acc:	07 c0       	rjmp	.+14     	; 0x2adc <main+0x396>
			else LEDOn(LED_B);
    2ace:	83 e0       	ldi	r24, 0x03	; 3
    2ad0:	0e 94 35 09 	call	0x126a	; 0x126a <LEDOn>
    2ad4:	03 c0       	rjmp	.+6      	; 0x2adc <main+0x396>
		} else LEDOff(LED_B);
    2ad6:	83 e0       	ldi	r24, 0x03	; 3
    2ad8:	0e 94 21 09 	call	0x1242	; 0x1242 <LEDOff>
		

		//Button update
		if(buttonA.state == 1){
    2adc:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <buttonA+0x1>
    2ae0:	81 30       	cpi	r24, 0x01	; 1
    2ae2:	49 f5       	brne	.+82     	; 0x2b36 <main+0x3f0>
			ledR.state = 1;
    2ae4:	bb 24       	eor	r11, r11
    2ae6:	b3 94       	inc	r11
    2ae8:	a5 e2       	ldi	r26, 0x25	; 37
    2aea:	b3 e0       	ldi	r27, 0x03	; 3
    2aec:	bc 92       	st	X, r11
			ledR.count = 2000;
    2aee:	80 ed       	ldi	r24, 0xD0	; 208
    2af0:	97 e0       	ldi	r25, 0x07	; 7
    2af2:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <ledR+0x4>
    2af6:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <ledR+0x3>
// 			displayA.value--;
// 			displayA.draw = 1;
			
			uart1_puts_P("This is a shutdown request");
    2afa:	88 eb       	ldi	r24, 0xB8	; 184
    2afc:	96 e0       	ldi	r25, 0x06	; 6
    2afe:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>

			motorA.position = 0;
    2b02:	f7 01       	movw	r30, r14
    2b04:	13 82       	std	Z+3, r1	; 0x03
    2b06:	12 82       	std	Z+2, r1	; 0x02
			motorA.setDegrees = 180;
    2b08:	84 eb       	ldi	r24, 0xB4	; 180
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	96 87       	std	Z+14, r25	; 0x0e
    2b0e:	85 87       	std	Z+13, r24	; 0x0d
			motorA.dir = -1;
    2b10:	2f ef       	ldi	r18, 0xFF	; 255
    2b12:	21 87       	std	Z+9, r18	; 0x09
			motorB.position = 0;
    2b14:	d6 01       	movw	r26, r12
    2b16:	13 96       	adiw	r26, 0x03	; 3
    2b18:	1c 92       	st	X, r1
    2b1a:	1e 92       	st	-X, r1
    2b1c:	12 97       	sbiw	r26, 0x02	; 2
			motorB.setDegrees = 180;
    2b1e:	1e 96       	adiw	r26, 0x0e	; 14
    2b20:	9c 93       	st	X, r25
    2b22:	8e 93       	st	-X, r24
    2b24:	1d 97       	sbiw	r26, 0x0d	; 13
			motorB.dir = 1;
    2b26:	19 96       	adiw	r26, 0x09	; 9
    2b28:	bc 92       	st	X, r11
			if(buttonA.programMode == 0) buttonA.state = 0;
    2b2a:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <buttonA+0x3>
    2b2e:	81 11       	cpse	r24, r1
    2b30:	02 c0       	rjmp	.+4      	; 0x2b36 <main+0x3f0>
    2b32:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <buttonA+0x1>
		}else{
			
		}
		if(buttonB.state == 1){
    2b36:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <buttonB+0x1>
    2b3a:	81 30       	cpi	r24, 0x01	; 1
    2b3c:	21 f5       	brne	.+72     	; 0x2b86 <main+0x440>
			ledG.state = 1;
    2b3e:	e5 ee       	ldi	r30, 0xE5	; 229
    2b40:	f2 e0       	ldi	r31, 0x02	; 2
    2b42:	80 83       	st	Z, r24
			ledG.count = 2000;
    2b44:	80 ed       	ldi	r24, 0xD0	; 208
    2b46:	97 e0       	ldi	r25, 0x07	; 7
    2b48:	94 83       	std	Z+4, r25	; 0x04
    2b4a:	83 83       	std	Z+3, r24	; 0x03
// 			displayA.value = 0;
// 			displayA.draw = 1;

			motorA.position = 0;
    2b4c:	f7 01       	movw	r30, r14
    2b4e:	13 82       	std	Z+3, r1	; 0x03
    2b50:	12 82       	std	Z+2, r1	; 0x02
			motorA.setSpeedDPS = motorA.setSpeedDPS +10;
    2b52:	83 85       	ldd	r24, Z+11	; 0x0b
    2b54:	94 85       	ldd	r25, Z+12	; 0x0c
    2b56:	0a 96       	adiw	r24, 0x0a	; 10
    2b58:	94 87       	std	Z+12, r25	; 0x0c
    2b5a:	83 87       	std	Z+11, r24	; 0x0b
			motorA.dir = -1;
    2b5c:	8f ef       	ldi	r24, 0xFF	; 255
    2b5e:	81 87       	std	Z+9, r24	; 0x09
			motorB.position = 0;
    2b60:	d6 01       	movw	r26, r12
    2b62:	13 96       	adiw	r26, 0x03	; 3
    2b64:	1c 92       	st	X, r1
    2b66:	1e 92       	st	-X, r1
    2b68:	12 97       	sbiw	r26, 0x02	; 2
			motorB.setDegrees = -180;
    2b6a:	2c e4       	ldi	r18, 0x4C	; 76
    2b6c:	3f ef       	ldi	r19, 0xFF	; 255
    2b6e:	1e 96       	adiw	r26, 0x0e	; 14
    2b70:	3c 93       	st	X, r19
    2b72:	2e 93       	st	-X, r18
    2b74:	1d 97       	sbiw	r26, 0x0d	; 13
			motorB.dir = -1;
    2b76:	19 96       	adiw	r26, 0x09	; 9
    2b78:	8c 93       	st	X, r24
			if(buttonB.programMode == 0) buttonB.state = 0;
    2b7a:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <buttonB+0x3>
    2b7e:	81 11       	cpse	r24, r1
    2b80:	02 c0       	rjmp	.+4      	; 0x2b86 <main+0x440>
    2b82:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <buttonB+0x1>
		}else{
			
		}
		if(buttonC.state == 1){
    2b86:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <buttonC+0x1>
    2b8a:	81 30       	cpi	r24, 0x01	; 1
    2b8c:	29 f5       	brne	.+74     	; 0x2bd8 <main+0x492>
			ledB.state = 1;
    2b8e:	ea eb       	ldi	r30, 0xBA	; 186
    2b90:	f2 e0       	ldi	r31, 0x02	; 2
    2b92:	21 e0       	ldi	r18, 0x01	; 1
    2b94:	20 83       	st	Z, r18
			ledB.count = 2000;
    2b96:	80 ed       	ldi	r24, 0xD0	; 208
    2b98:	97 e0       	ldi	r25, 0x07	; 7
    2b9a:	94 83       	std	Z+4, r25	; 0x04
    2b9c:	83 83       	std	Z+3, r24	; 0x03
// 			displayA.value++;
// 			displayA.draw = 1;

			motorA.position = 0;
    2b9e:	f7 01       	movw	r30, r14
    2ba0:	13 82       	std	Z+3, r1	; 0x03
    2ba2:	12 82       	std	Z+2, r1	; 0x02
			motorA.setSpeedDPS = motorA.setSpeedDPS -10;
    2ba4:	83 85       	ldd	r24, Z+11	; 0x0b
    2ba6:	94 85       	ldd	r25, Z+12	; 0x0c
    2ba8:	0a 97       	sbiw	r24, 0x0a	; 10
    2baa:	94 87       	std	Z+12, r25	; 0x0c
    2bac:	83 87       	std	Z+11, r24	; 0x0b
			motorA.dir = 1;
    2bae:	21 87       	std	Z+9, r18	; 0x09
			motorB.position = 0;
    2bb0:	d6 01       	movw	r26, r12
    2bb2:	13 96       	adiw	r26, 0x03	; 3
    2bb4:	1c 92       	st	X, r1
    2bb6:	1e 92       	st	-X, r1
    2bb8:	12 97       	sbiw	r26, 0x02	; 2
			motorB.setDegrees = -180;
    2bba:	8c e4       	ldi	r24, 0x4C	; 76
    2bbc:	9f ef       	ldi	r25, 0xFF	; 255
    2bbe:	1e 96       	adiw	r26, 0x0e	; 14
    2bc0:	9c 93       	st	X, r25
    2bc2:	8e 93       	st	-X, r24
    2bc4:	1d 97       	sbiw	r26, 0x0d	; 13
			motorB.dir = -1;
    2bc6:	8f ef       	ldi	r24, 0xFF	; 255
    2bc8:	19 96       	adiw	r26, 0x09	; 9
    2bca:	8c 93       	st	X, r24
			if(buttonC.programMode == 0) buttonC.state = 0;
    2bcc:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <buttonC+0x3>
    2bd0:	81 11       	cpse	r24, r1
    2bd2:	02 c0       	rjmp	.+4      	; 0x2bd8 <main+0x492>
    2bd4:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <buttonC+0x1>
		}else{
			
		}

		//Analog update
		if(vdiv.ready && !(ADCSRA&(1<<ADSC))){
    2bd8:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <vdiv+0xb>
    2bdc:	88 23       	and	r24, r24
    2bde:	c9 f1       	breq	.+114    	; 0x2c52 <main+0x50c>
    2be0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2be4:	86 fd       	sbrc	r24, 6
    2be6:	35 c0       	rjmp	.+106    	; 0x2c52 <main+0x50c>
			vdiv.raw = ADC;
    2be8:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    2bec:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    2bf0:	0f 2e       	mov	r0, r31
    2bf2:	f1 e8       	ldi	r31, 0x81	; 129
    2bf4:	af 2e       	mov	r10, r31
    2bf6:	f2 e0       	ldi	r31, 0x02	; 2
    2bf8:	bf 2e       	mov	r11, r31
    2bfa:	f0 2d       	mov	r31, r0
    2bfc:	f5 01       	movw	r30, r10
    2bfe:	71 83       	std	Z+1, r23	; 0x01
    2c00:	60 83       	st	Z, r22
			vdiv.value = vdiv.raw * vdiv.scale/1000;
    2c02:	07 2e       	mov	r0, r23
    2c04:	00 0c       	add	r0, r0
    2c06:	88 0b       	sbc	r24, r24
    2c08:	99 0b       	sbc	r25, r25
    2c0a:	0e 94 ce 1a 	call	0x359c	; 0x359c <__floatsisf>
    2c0e:	d5 01       	movw	r26, r10
    2c10:	16 96       	adiw	r26, 0x06	; 6
    2c12:	2d 91       	ld	r18, X+
    2c14:	3d 91       	ld	r19, X+
    2c16:	4d 91       	ld	r20, X+
    2c18:	5c 91       	ld	r21, X
    2c1a:	19 97       	sbiw	r26, 0x09	; 9
    2c1c:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <__mulsf3>
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	4a e7       	ldi	r20, 0x7A	; 122
    2c26:	54 e4       	ldi	r21, 0x44	; 68
    2c28:	0e 94 24 1a 	call	0x3448	; 0x3448 <__divsf3>
    2c2c:	f5 01       	movw	r30, r10
    2c2e:	62 83       	std	Z+2, r22	; 0x02
    2c30:	73 83       	std	Z+3, r23	; 0x03
    2c32:	84 83       	std	Z+4, r24	; 0x04
    2c34:	95 83       	std	Z+5, r25	; 0x05
			vdiv.ready = 0;
    2c36:	13 86       	std	Z+11, r1	; 0x0b

			//change multiplexer to csense
			ADMUX |= (1<<MUX0);//change mux
    2c38:	ec e7       	ldi	r30, 0x7C	; 124
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	80 81       	ld	r24, Z
    2c3e:	81 60       	ori	r24, 0x01	; 1
    2c40:	80 83       	st	Z, r24
			csense.count = ADC_COUNT;
    2c42:	86 e0       	ldi	r24, 0x06	; 6
    2c44:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <csense+0xa>
			ADCSRA |= (1<<ADSC);//restart
    2c48:	ea e7       	ldi	r30, 0x7A	; 122
    2c4a:	f0 e0       	ldi	r31, 0x00	; 0
    2c4c:	80 81       	ld	r24, Z
    2c4e:	80 64       	ori	r24, 0x40	; 64
    2c50:	80 83       	st	Z, r24

			//sprintf(fstring, "Voltage: %5.3f V\n", vdiv.value);
			//uart1_puts(fstring);
		}
		if(csense.ready && !(ADCSRA&(1<<ADSC))){
    2c52:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <csense+0xb>
    2c56:	88 23       	and	r24, r24
    2c58:	a1 f1       	breq	.+104    	; 0x2cc2 <main+0x57c>
    2c5a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2c5e:	86 fd       	sbrc	r24, 6
    2c60:	30 c0       	rjmp	.+96     	; 0x2cc2 <main+0x57c>
			csense.raw = ADC;
    2c62:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    2c66:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    2c6a:	0f 2e       	mov	r0, r31
    2c6c:	fe ea       	ldi	r31, 0xAE	; 174
    2c6e:	af 2e       	mov	r10, r31
    2c70:	f2 e0       	ldi	r31, 0x02	; 2
    2c72:	bf 2e       	mov	r11, r31
    2c74:	f0 2d       	mov	r31, r0
    2c76:	d5 01       	movw	r26, r10
    2c78:	6d 93       	st	X+, r22
    2c7a:	7c 93       	st	X, r23
			csense.value = csense.raw * csense.scale;
    2c7c:	07 2e       	mov	r0, r23
    2c7e:	00 0c       	add	r0, r0
    2c80:	88 0b       	sbc	r24, r24
    2c82:	99 0b       	sbc	r25, r25
    2c84:	0e 94 ce 1a 	call	0x359c	; 0x359c <__floatsisf>
    2c88:	f5 01       	movw	r30, r10
    2c8a:	26 81       	ldd	r18, Z+6	; 0x06
    2c8c:	37 81       	ldd	r19, Z+7	; 0x07
    2c8e:	40 85       	ldd	r20, Z+8	; 0x08
    2c90:	51 85       	ldd	r21, Z+9	; 0x09
    2c92:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <__mulsf3>
    2c96:	d5 01       	movw	r26, r10
    2c98:	12 96       	adiw	r26, 0x02	; 2
    2c9a:	6d 93       	st	X+, r22
    2c9c:	7d 93       	st	X+, r23
    2c9e:	8d 93       	st	X+, r24
    2ca0:	9c 93       	st	X, r25
    2ca2:	15 97       	sbiw	r26, 0x05	; 5
			csense.ready = 0;
    2ca4:	1b 96       	adiw	r26, 0x0b	; 11
    2ca6:	1c 92       	st	X, r1

			//change multiplexer to csense
			ADMUX &= ~(1<<MUX0);//change mux
    2ca8:	ec e7       	ldi	r30, 0x7C	; 124
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	80 81       	ld	r24, Z
    2cae:	8e 7f       	andi	r24, 0xFE	; 254
    2cb0:	80 83       	st	Z, r24
			vdiv.count = ADC_COUNT;
    2cb2:	86 e0       	ldi	r24, 0x06	; 6
    2cb4:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <vdiv+0xa>
			ADCSRA |= (1<<ADSC);//restart
    2cb8:	ea e7       	ldi	r30, 0x7A	; 122
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	80 81       	ld	r24, Z
    2cbe:	80 64       	ori	r24, 0x40	; 64
    2cc0:	80 83       	st	Z, r24

			//sprintf(fstring, "Current: %5.3f mA\n", csense.value);
			//uart1_puts(fstring);
		}

		if(vdiv.value < battery.cutoff){
    2cc2:	20 91 1d 03 	lds	r18, 0x031D	; 0x80031d <battery>
    2cc6:	30 91 1e 03 	lds	r19, 0x031E	; 0x80031e <battery+0x1>
    2cca:	40 91 1f 03 	lds	r20, 0x031F	; 0x80031f <battery+0x2>
    2cce:	50 91 20 03 	lds	r21, 0x0320	; 0x800320 <battery+0x3>
    2cd2:	60 91 83 02 	lds	r22, 0x0283	; 0x800283 <vdiv+0x2>
    2cd6:	70 91 84 02 	lds	r23, 0x0284	; 0x800284 <vdiv+0x3>
    2cda:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <vdiv+0x4>
    2cde:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <vdiv+0x5>
    2ce2:	0e 94 1f 1a 	call	0x343e	; 0x343e <__cmpsf2>
    2ce6:	88 23       	and	r24, r24
    2ce8:	34 f5       	brge	.+76     	; 0x2d36 <main+0x5f0>
			if(battery.count < battery.limit) battery.count++;
    2cea:	ed e1       	ldi	r30, 0x1D	; 29
    2cec:	f3 e0       	ldi	r31, 0x03	; 3
    2cee:	84 81       	ldd	r24, Z+4	; 0x04
    2cf0:	95 81       	ldd	r25, Z+5	; 0x05
    2cf2:	26 81       	ldd	r18, Z+6	; 0x06
    2cf4:	37 81       	ldd	r19, Z+7	; 0x07
    2cf6:	82 17       	cp	r24, r18
    2cf8:	93 07       	cpc	r25, r19
    2cfa:	30 f4       	brcc	.+12     	; 0x2d08 <main+0x5c2>
    2cfc:	01 96       	adiw	r24, 0x01	; 1
    2cfe:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <battery+0x5>
    2d02:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <battery+0x4>
    2d06:	5d cd       	rjmp	.-1350   	; 0x27c2 <main+0x7c>
			else{
				//lockout most functions
				PRR0 |= (1<<PRTIM2)|(1<<PRTIM0)|(1<<PRTIM1);//|(1<<PRADC);
    2d08:	e4 e6       	ldi	r30, 0x64	; 100
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	80 81       	ld	r24, Z
    2d0e:	88 66       	ori	r24, 0x68	; 104
    2d10:	80 83       	st	Z, r24
				//display low battery warning
				uint8_t reg[2] = {0, 0};
				reg[0] = DIGIT0_B;
    2d12:	8f e1       	ldi	r24, 0x1F	; 31
    2d14:	89 83       	std	Y+1, r24	; 0x01
				reg[1] = DIGIT1_F;
    2d16:	8d e1       	ldi	r24, 0x1D	; 29
    2d18:	8a 83       	std	Y+2, r24	; 0x02
				i2cWritenBytes(reg, displayA.address, OUTPUT_0, 2);
    2d1a:	22 e0       	ldi	r18, 0x02	; 2
    2d1c:	42 e0       	ldi	r20, 0x02	; 2
    2d1e:	60 91 9e 02 	lds	r22, 0x029E	; 0x80029e <displayA>
    2d22:	ce 01       	movw	r24, r28
    2d24:	01 96       	adiw	r24, 0x01	; 1
    2d26:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <i2cWritenBytes>
								
				while(1){
					//send shutdown command
					uart1_puts_P("Low battery shutdown request");
    2d2a:	8b e9       	ldi	r24, 0x9B	; 155
    2d2c:	96 e0       	ldi	r25, 0x06	; 6
    2d2e:	0e 94 ce 04 	call	0x99c	; 0x99c <uart1_puts_p>
					PORTB &= ~(1<<PB5);//pull the pin low
    2d32:	2d 98       	cbi	0x05, 5	; 5
					//loop until the battery really is flat...
				}			
    2d34:	fa cf       	rjmp	.-12     	; 0x2d2a <main+0x5e4>
			}
		}else battery.count = 0;
    2d36:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <battery+0x5>
    2d3a:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <battery+0x4>
    2d3e:	41 cd       	rjmp	.-1406   	; 0x27c2 <main+0x7c>
    2d40:	e3 ea       	ldi	r30, 0xA3	; 163
    2d42:	f2 e0       	ldi	r31, 0x02	; 2
    2d44:	48 cd       	rjmp	.-1392   	; 0x27d6 <main+0x90>

00002d46 <vfprintf>:
    2d46:	a3 e1       	ldi	r26, 0x13	; 19
    2d48:	b0 e0       	ldi	r27, 0x00	; 0
    2d4a:	e9 ea       	ldi	r30, 0xA9	; 169
    2d4c:	f6 e1       	ldi	r31, 0x16	; 22
    2d4e:	0c 94 43 1c 	jmp	0x3886	; 0x3886 <__prologue_saves__>
    2d52:	6c 01       	movw	r12, r24
    2d54:	4b 01       	movw	r8, r22
    2d56:	2a 01       	movw	r4, r20
    2d58:	fc 01       	movw	r30, r24
    2d5a:	17 82       	std	Z+7, r1	; 0x07
    2d5c:	16 82       	std	Z+6, r1	; 0x06
    2d5e:	83 81       	ldd	r24, Z+3	; 0x03
    2d60:	81 ff       	sbrs	r24, 1
    2d62:	43 c3       	rjmp	.+1670   	; 0x33ea <vfprintf+0x6a4>
    2d64:	ae 01       	movw	r20, r28
    2d66:	4f 5f       	subi	r20, 0xFF	; 255
    2d68:	5f 4f       	sbci	r21, 0xFF	; 255
    2d6a:	3a 01       	movw	r6, r20
    2d6c:	f6 01       	movw	r30, r12
    2d6e:	93 81       	ldd	r25, Z+3	; 0x03
    2d70:	f4 01       	movw	r30, r8
    2d72:	93 fd       	sbrc	r25, 3
    2d74:	85 91       	lpm	r24, Z+
    2d76:	93 ff       	sbrs	r25, 3
    2d78:	81 91       	ld	r24, Z+
    2d7a:	4f 01       	movw	r8, r30
    2d7c:	88 23       	and	r24, r24
    2d7e:	09 f4       	brne	.+2      	; 0x2d82 <vfprintf+0x3c>
    2d80:	30 c3       	rjmp	.+1632   	; 0x33e2 <vfprintf+0x69c>
    2d82:	85 32       	cpi	r24, 0x25	; 37
    2d84:	39 f4       	brne	.+14     	; 0x2d94 <vfprintf+0x4e>
    2d86:	93 fd       	sbrc	r25, 3
    2d88:	85 91       	lpm	r24, Z+
    2d8a:	93 ff       	sbrs	r25, 3
    2d8c:	81 91       	ld	r24, Z+
    2d8e:	4f 01       	movw	r8, r30
    2d90:	85 32       	cpi	r24, 0x25	; 37
    2d92:	39 f4       	brne	.+14     	; 0x2da2 <vfprintf+0x5c>
    2d94:	b6 01       	movw	r22, r12
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <fputc>
    2d9c:	52 01       	movw	r10, r4
    2d9e:	25 01       	movw	r4, r10
    2da0:	e5 cf       	rjmp	.-54     	; 0x2d6c <vfprintf+0x26>
    2da2:	10 e0       	ldi	r17, 0x00	; 0
    2da4:	f1 2c       	mov	r15, r1
    2da6:	20 e0       	ldi	r18, 0x00	; 0
    2da8:	20 32       	cpi	r18, 0x20	; 32
    2daa:	a0 f4       	brcc	.+40     	; 0x2dd4 <vfprintf+0x8e>
    2dac:	8b 32       	cpi	r24, 0x2B	; 43
    2dae:	69 f0       	breq	.+26     	; 0x2dca <vfprintf+0x84>
    2db0:	30 f4       	brcc	.+12     	; 0x2dbe <vfprintf+0x78>
    2db2:	80 32       	cpi	r24, 0x20	; 32
    2db4:	59 f0       	breq	.+22     	; 0x2dcc <vfprintf+0x86>
    2db6:	83 32       	cpi	r24, 0x23	; 35
    2db8:	69 f4       	brne	.+26     	; 0x2dd4 <vfprintf+0x8e>
    2dba:	20 61       	ori	r18, 0x10	; 16
    2dbc:	2c c0       	rjmp	.+88     	; 0x2e16 <vfprintf+0xd0>
    2dbe:	8d 32       	cpi	r24, 0x2D	; 45
    2dc0:	39 f0       	breq	.+14     	; 0x2dd0 <vfprintf+0x8a>
    2dc2:	80 33       	cpi	r24, 0x30	; 48
    2dc4:	39 f4       	brne	.+14     	; 0x2dd4 <vfprintf+0x8e>
    2dc6:	21 60       	ori	r18, 0x01	; 1
    2dc8:	26 c0       	rjmp	.+76     	; 0x2e16 <vfprintf+0xd0>
    2dca:	22 60       	ori	r18, 0x02	; 2
    2dcc:	24 60       	ori	r18, 0x04	; 4
    2dce:	23 c0       	rjmp	.+70     	; 0x2e16 <vfprintf+0xd0>
    2dd0:	28 60       	ori	r18, 0x08	; 8
    2dd2:	21 c0       	rjmp	.+66     	; 0x2e16 <vfprintf+0xd0>
    2dd4:	27 fd       	sbrc	r18, 7
    2dd6:	27 c0       	rjmp	.+78     	; 0x2e26 <vfprintf+0xe0>
    2dd8:	30 ed       	ldi	r19, 0xD0	; 208
    2dda:	38 0f       	add	r19, r24
    2ddc:	3a 30       	cpi	r19, 0x0A	; 10
    2dde:	78 f4       	brcc	.+30     	; 0x2dfe <vfprintf+0xb8>
    2de0:	26 ff       	sbrs	r18, 6
    2de2:	06 c0       	rjmp	.+12     	; 0x2df0 <vfprintf+0xaa>
    2de4:	fa e0       	ldi	r31, 0x0A	; 10
    2de6:	1f 9f       	mul	r17, r31
    2de8:	30 0d       	add	r19, r0
    2dea:	11 24       	eor	r1, r1
    2dec:	13 2f       	mov	r17, r19
    2dee:	13 c0       	rjmp	.+38     	; 0x2e16 <vfprintf+0xd0>
    2df0:	4a e0       	ldi	r20, 0x0A	; 10
    2df2:	f4 9e       	mul	r15, r20
    2df4:	30 0d       	add	r19, r0
    2df6:	11 24       	eor	r1, r1
    2df8:	f3 2e       	mov	r15, r19
    2dfa:	20 62       	ori	r18, 0x20	; 32
    2dfc:	0c c0       	rjmp	.+24     	; 0x2e16 <vfprintf+0xd0>
    2dfe:	8e 32       	cpi	r24, 0x2E	; 46
    2e00:	21 f4       	brne	.+8      	; 0x2e0a <vfprintf+0xc4>
    2e02:	26 fd       	sbrc	r18, 6
    2e04:	ee c2       	rjmp	.+1500   	; 0x33e2 <vfprintf+0x69c>
    2e06:	20 64       	ori	r18, 0x40	; 64
    2e08:	06 c0       	rjmp	.+12     	; 0x2e16 <vfprintf+0xd0>
    2e0a:	8c 36       	cpi	r24, 0x6C	; 108
    2e0c:	11 f4       	brne	.+4      	; 0x2e12 <vfprintf+0xcc>
    2e0e:	20 68       	ori	r18, 0x80	; 128
    2e10:	02 c0       	rjmp	.+4      	; 0x2e16 <vfprintf+0xd0>
    2e12:	88 36       	cpi	r24, 0x68	; 104
    2e14:	41 f4       	brne	.+16     	; 0x2e26 <vfprintf+0xe0>
    2e16:	f4 01       	movw	r30, r8
    2e18:	93 fd       	sbrc	r25, 3
    2e1a:	85 91       	lpm	r24, Z+
    2e1c:	93 ff       	sbrs	r25, 3
    2e1e:	81 91       	ld	r24, Z+
    2e20:	4f 01       	movw	r8, r30
    2e22:	81 11       	cpse	r24, r1
    2e24:	c1 cf       	rjmp	.-126    	; 0x2da8 <vfprintf+0x62>
    2e26:	9b eb       	ldi	r25, 0xBB	; 187
    2e28:	98 0f       	add	r25, r24
    2e2a:	93 30       	cpi	r25, 0x03	; 3
    2e2c:	18 f4       	brcc	.+6      	; 0x2e34 <vfprintf+0xee>
    2e2e:	20 61       	ori	r18, 0x10	; 16
    2e30:	80 5e       	subi	r24, 0xE0	; 224
    2e32:	06 c0       	rjmp	.+12     	; 0x2e40 <vfprintf+0xfa>
    2e34:	9b e9       	ldi	r25, 0x9B	; 155
    2e36:	98 0f       	add	r25, r24
    2e38:	93 30       	cpi	r25, 0x03	; 3
    2e3a:	08 f0       	brcs	.+2      	; 0x2e3e <vfprintf+0xf8>
    2e3c:	71 c1       	rjmp	.+738    	; 0x3120 <vfprintf+0x3da>
    2e3e:	2f 7e       	andi	r18, 0xEF	; 239
    2e40:	26 ff       	sbrs	r18, 6
    2e42:	16 e0       	ldi	r17, 0x06	; 6
    2e44:	2f 73       	andi	r18, 0x3F	; 63
    2e46:	32 2e       	mov	r3, r18
    2e48:	85 36       	cpi	r24, 0x65	; 101
    2e4a:	19 f4       	brne	.+6      	; 0x2e52 <vfprintf+0x10c>
    2e4c:	20 64       	ori	r18, 0x40	; 64
    2e4e:	32 2e       	mov	r3, r18
    2e50:	08 c0       	rjmp	.+16     	; 0x2e62 <vfprintf+0x11c>
    2e52:	86 36       	cpi	r24, 0x66	; 102
    2e54:	21 f4       	brne	.+8      	; 0x2e5e <vfprintf+0x118>
    2e56:	f2 2f       	mov	r31, r18
    2e58:	f0 68       	ori	r31, 0x80	; 128
    2e5a:	3f 2e       	mov	r3, r31
    2e5c:	02 c0       	rjmp	.+4      	; 0x2e62 <vfprintf+0x11c>
    2e5e:	11 11       	cpse	r17, r1
    2e60:	11 50       	subi	r17, 0x01	; 1
    2e62:	37 fe       	sbrs	r3, 7
    2e64:	07 c0       	rjmp	.+14     	; 0x2e74 <vfprintf+0x12e>
    2e66:	1c 33       	cpi	r17, 0x3C	; 60
    2e68:	50 f4       	brcc	.+20     	; 0x2e7e <vfprintf+0x138>
    2e6a:	ee 24       	eor	r14, r14
    2e6c:	e3 94       	inc	r14
    2e6e:	e1 0e       	add	r14, r17
    2e70:	27 e0       	ldi	r18, 0x07	; 7
    2e72:	0b c0       	rjmp	.+22     	; 0x2e8a <vfprintf+0x144>
    2e74:	18 30       	cpi	r17, 0x08	; 8
    2e76:	38 f0       	brcs	.+14     	; 0x2e86 <vfprintf+0x140>
    2e78:	27 e0       	ldi	r18, 0x07	; 7
    2e7a:	17 e0       	ldi	r17, 0x07	; 7
    2e7c:	05 c0       	rjmp	.+10     	; 0x2e88 <vfprintf+0x142>
    2e7e:	27 e0       	ldi	r18, 0x07	; 7
    2e80:	4c e3       	ldi	r20, 0x3C	; 60
    2e82:	e4 2e       	mov	r14, r20
    2e84:	02 c0       	rjmp	.+4      	; 0x2e8a <vfprintf+0x144>
    2e86:	21 2f       	mov	r18, r17
    2e88:	e1 2c       	mov	r14, r1
    2e8a:	52 01       	movw	r10, r4
    2e8c:	44 e0       	ldi	r20, 0x04	; 4
    2e8e:	a4 0e       	add	r10, r20
    2e90:	b1 1c       	adc	r11, r1
    2e92:	f2 01       	movw	r30, r4
    2e94:	60 81       	ld	r22, Z
    2e96:	71 81       	ldd	r23, Z+1	; 0x01
    2e98:	82 81       	ldd	r24, Z+2	; 0x02
    2e9a:	93 81       	ldd	r25, Z+3	; 0x03
    2e9c:	0e 2d       	mov	r16, r14
    2e9e:	a3 01       	movw	r20, r6
    2ea0:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__ftoa_engine>
    2ea4:	2c 01       	movw	r4, r24
    2ea6:	09 81       	ldd	r16, Y+1	; 0x01
    2ea8:	00 ff       	sbrs	r16, 0
    2eaa:	02 c0       	rjmp	.+4      	; 0x2eb0 <vfprintf+0x16a>
    2eac:	03 ff       	sbrs	r16, 3
    2eae:	07 c0       	rjmp	.+14     	; 0x2ebe <vfprintf+0x178>
    2eb0:	31 fc       	sbrc	r3, 1
    2eb2:	08 c0       	rjmp	.+16     	; 0x2ec4 <vfprintf+0x17e>
    2eb4:	32 fe       	sbrs	r3, 2
    2eb6:	09 c0       	rjmp	.+18     	; 0x2eca <vfprintf+0x184>
    2eb8:	30 e2       	ldi	r19, 0x20	; 32
    2eba:	23 2e       	mov	r2, r19
    2ebc:	07 c0       	rjmp	.+14     	; 0x2ecc <vfprintf+0x186>
    2ebe:	2d e2       	ldi	r18, 0x2D	; 45
    2ec0:	22 2e       	mov	r2, r18
    2ec2:	04 c0       	rjmp	.+8      	; 0x2ecc <vfprintf+0x186>
    2ec4:	9b e2       	ldi	r25, 0x2B	; 43
    2ec6:	29 2e       	mov	r2, r25
    2ec8:	01 c0       	rjmp	.+2      	; 0x2ecc <vfprintf+0x186>
    2eca:	21 2c       	mov	r2, r1
    2ecc:	80 2f       	mov	r24, r16
    2ece:	8c 70       	andi	r24, 0x0C	; 12
    2ed0:	19 f0       	breq	.+6      	; 0x2ed8 <vfprintf+0x192>
    2ed2:	21 10       	cpse	r2, r1
    2ed4:	68 c2       	rjmp	.+1232   	; 0x33a6 <vfprintf+0x660>
    2ed6:	a8 c2       	rjmp	.+1360   	; 0x3428 <vfprintf+0x6e2>
    2ed8:	37 fe       	sbrs	r3, 7
    2eda:	0f c0       	rjmp	.+30     	; 0x2efa <vfprintf+0x1b4>
    2edc:	e4 0c       	add	r14, r4
    2ede:	04 ff       	sbrs	r16, 4
    2ee0:	04 c0       	rjmp	.+8      	; 0x2eea <vfprintf+0x1a4>
    2ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee4:	81 33       	cpi	r24, 0x31	; 49
    2ee6:	09 f4       	brne	.+2      	; 0x2eea <vfprintf+0x1a4>
    2ee8:	ea 94       	dec	r14
    2eea:	1e 14       	cp	r1, r14
    2eec:	74 f5       	brge	.+92     	; 0x2f4a <vfprintf+0x204>
    2eee:	f8 e0       	ldi	r31, 0x08	; 8
    2ef0:	fe 15       	cp	r31, r14
    2ef2:	78 f5       	brcc	.+94     	; 0x2f52 <vfprintf+0x20c>
    2ef4:	88 e0       	ldi	r24, 0x08	; 8
    2ef6:	e8 2e       	mov	r14, r24
    2ef8:	2c c0       	rjmp	.+88     	; 0x2f52 <vfprintf+0x20c>
    2efa:	36 fc       	sbrc	r3, 6
    2efc:	2a c0       	rjmp	.+84     	; 0x2f52 <vfprintf+0x20c>
    2efe:	81 2f       	mov	r24, r17
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	84 15       	cp	r24, r4
    2f04:	95 05       	cpc	r25, r5
    2f06:	9c f0       	brlt	.+38     	; 0x2f2e <vfprintf+0x1e8>
    2f08:	2c ef       	ldi	r18, 0xFC	; 252
    2f0a:	42 16       	cp	r4, r18
    2f0c:	2f ef       	ldi	r18, 0xFF	; 255
    2f0e:	52 06       	cpc	r5, r18
    2f10:	74 f0       	brlt	.+28     	; 0x2f2e <vfprintf+0x1e8>
    2f12:	43 2d       	mov	r20, r3
    2f14:	40 68       	ori	r20, 0x80	; 128
    2f16:	34 2e       	mov	r3, r20
    2f18:	0a c0       	rjmp	.+20     	; 0x2f2e <vfprintf+0x1e8>
    2f1a:	e2 e0       	ldi	r30, 0x02	; 2
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	ec 0f       	add	r30, r28
    2f20:	fd 1f       	adc	r31, r29
    2f22:	e1 0f       	add	r30, r17
    2f24:	f1 1d       	adc	r31, r1
    2f26:	80 81       	ld	r24, Z
    2f28:	80 33       	cpi	r24, 0x30	; 48
    2f2a:	19 f4       	brne	.+6      	; 0x2f32 <vfprintf+0x1ec>
    2f2c:	11 50       	subi	r17, 0x01	; 1
    2f2e:	11 11       	cpse	r17, r1
    2f30:	f4 cf       	rjmp	.-24     	; 0x2f1a <vfprintf+0x1d4>
    2f32:	37 fe       	sbrs	r3, 7
    2f34:	0e c0       	rjmp	.+28     	; 0x2f52 <vfprintf+0x20c>
    2f36:	ee 24       	eor	r14, r14
    2f38:	e3 94       	inc	r14
    2f3a:	e1 0e       	add	r14, r17
    2f3c:	81 2f       	mov	r24, r17
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	48 16       	cp	r4, r24
    2f42:	59 06       	cpc	r5, r25
    2f44:	2c f4       	brge	.+10     	; 0x2f50 <vfprintf+0x20a>
    2f46:	14 19       	sub	r17, r4
    2f48:	04 c0       	rjmp	.+8      	; 0x2f52 <vfprintf+0x20c>
    2f4a:	ee 24       	eor	r14, r14
    2f4c:	e3 94       	inc	r14
    2f4e:	01 c0       	rjmp	.+2      	; 0x2f52 <vfprintf+0x20c>
    2f50:	10 e0       	ldi	r17, 0x00	; 0
    2f52:	37 fe       	sbrs	r3, 7
    2f54:	06 c0       	rjmp	.+12     	; 0x2f62 <vfprintf+0x21c>
    2f56:	14 14       	cp	r1, r4
    2f58:	15 04       	cpc	r1, r5
    2f5a:	34 f4       	brge	.+12     	; 0x2f68 <vfprintf+0x222>
    2f5c:	c2 01       	movw	r24, r4
    2f5e:	01 96       	adiw	r24, 0x01	; 1
    2f60:	05 c0       	rjmp	.+10     	; 0x2f6c <vfprintf+0x226>
    2f62:	85 e0       	ldi	r24, 0x05	; 5
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	02 c0       	rjmp	.+4      	; 0x2f6c <vfprintf+0x226>
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	21 10       	cpse	r2, r1
    2f6e:	01 96       	adiw	r24, 0x01	; 1
    2f70:	11 23       	and	r17, r17
    2f72:	31 f0       	breq	.+12     	; 0x2f80 <vfprintf+0x23a>
    2f74:	21 2f       	mov	r18, r17
    2f76:	30 e0       	ldi	r19, 0x00	; 0
    2f78:	2f 5f       	subi	r18, 0xFF	; 255
    2f7a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f7c:	82 0f       	add	r24, r18
    2f7e:	93 1f       	adc	r25, r19
    2f80:	2f 2d       	mov	r18, r15
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	82 17       	cp	r24, r18
    2f86:	93 07       	cpc	r25, r19
    2f88:	14 f4       	brge	.+4      	; 0x2f8e <vfprintf+0x248>
    2f8a:	f8 1a       	sub	r15, r24
    2f8c:	01 c0       	rjmp	.+2      	; 0x2f90 <vfprintf+0x24a>
    2f8e:	f1 2c       	mov	r15, r1
    2f90:	83 2d       	mov	r24, r3
    2f92:	89 70       	andi	r24, 0x09	; 9
    2f94:	49 f4       	brne	.+18     	; 0x2fa8 <vfprintf+0x262>
    2f96:	ff 20       	and	r15, r15
    2f98:	39 f0       	breq	.+14     	; 0x2fa8 <vfprintf+0x262>
    2f9a:	b6 01       	movw	r22, r12
    2f9c:	80 e2       	ldi	r24, 0x20	; 32
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <fputc>
    2fa4:	fa 94       	dec	r15
    2fa6:	f7 cf       	rjmp	.-18     	; 0x2f96 <vfprintf+0x250>
    2fa8:	22 20       	and	r2, r2
    2faa:	29 f0       	breq	.+10     	; 0x2fb6 <vfprintf+0x270>
    2fac:	b6 01       	movw	r22, r12
    2fae:	82 2d       	mov	r24, r2
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <fputc>
    2fb6:	33 fc       	sbrc	r3, 3
    2fb8:	09 c0       	rjmp	.+18     	; 0x2fcc <vfprintf+0x286>
    2fba:	ff 20       	and	r15, r15
    2fbc:	39 f0       	breq	.+14     	; 0x2fcc <vfprintf+0x286>
    2fbe:	b6 01       	movw	r22, r12
    2fc0:	80 e3       	ldi	r24, 0x30	; 48
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <fputc>
    2fc8:	fa 94       	dec	r15
    2fca:	f7 cf       	rjmp	.-18     	; 0x2fba <vfprintf+0x274>
    2fcc:	37 fe       	sbrs	r3, 7
    2fce:	5a c0       	rjmp	.+180    	; 0x3084 <vfprintf+0x33e>
    2fd0:	94 2d       	mov	r25, r4
    2fd2:	85 2d       	mov	r24, r5
    2fd4:	57 fe       	sbrs	r5, 7
    2fd6:	02 c0       	rjmp	.+4      	; 0x2fdc <vfprintf+0x296>
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	80 e0       	ldi	r24, 0x00	; 0
    2fdc:	29 2e       	mov	r2, r25
    2fde:	38 2e       	mov	r3, r24
    2fe0:	20 e0       	ldi	r18, 0x00	; 0
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	a2 01       	movw	r20, r4
    2fe6:	4e 19       	sub	r20, r14
    2fe8:	51 09       	sbc	r21, r1
    2fea:	5d 87       	std	Y+13, r21	; 0x0d
    2fec:	4c 87       	std	Y+12, r20	; 0x0c
    2fee:	a2 01       	movw	r20, r4
    2ff0:	42 19       	sub	r20, r2
    2ff2:	53 09       	sbc	r21, r3
    2ff4:	5f 87       	std	Y+15, r21	; 0x0f
    2ff6:	4e 87       	std	Y+14, r20	; 0x0e
    2ff8:	61 2f       	mov	r22, r17
    2ffa:	70 e0       	ldi	r23, 0x00	; 0
    2ffc:	44 27       	eor	r20, r20
    2ffe:	55 27       	eor	r21, r21
    3000:	46 1b       	sub	r20, r22
    3002:	57 0b       	sbc	r21, r23
    3004:	59 8b       	std	Y+17, r21	; 0x11
    3006:	48 8b       	std	Y+16, r20	; 0x10
    3008:	5f ef       	ldi	r21, 0xFF	; 255
    300a:	25 16       	cp	r2, r21
    300c:	35 06       	cpc	r3, r21
    300e:	49 f4       	brne	.+18     	; 0x3022 <vfprintf+0x2dc>
    3010:	b6 01       	movw	r22, r12
    3012:	8e e2       	ldi	r24, 0x2E	; 46
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	2a 8b       	std	Y+18, r18	; 0x12
    3018:	3b 8b       	std	Y+19, r19	; 0x13
    301a:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <fputc>
    301e:	3b 89       	ldd	r19, Y+19	; 0x13
    3020:	2a 89       	ldd	r18, Y+18	; 0x12
    3022:	42 14       	cp	r4, r2
    3024:	53 04       	cpc	r5, r3
    3026:	6c f0       	brlt	.+26     	; 0x3042 <vfprintf+0x2fc>
    3028:	4c 85       	ldd	r20, Y+12	; 0x0c
    302a:	5d 85       	ldd	r21, Y+13	; 0x0d
    302c:	42 15       	cp	r20, r2
    302e:	53 05       	cpc	r21, r3
    3030:	44 f4       	brge	.+16     	; 0x3042 <vfprintf+0x2fc>
    3032:	ee 85       	ldd	r30, Y+14	; 0x0e
    3034:	ff 85       	ldd	r31, Y+15	; 0x0f
    3036:	e2 0f       	add	r30, r18
    3038:	f3 1f       	adc	r31, r19
    303a:	e6 0d       	add	r30, r6
    303c:	f7 1d       	adc	r31, r7
    303e:	81 81       	ldd	r24, Z+1	; 0x01
    3040:	01 c0       	rjmp	.+2      	; 0x3044 <vfprintf+0x2fe>
    3042:	80 e3       	ldi	r24, 0x30	; 48
    3044:	51 e0       	ldi	r21, 0x01	; 1
    3046:	25 1a       	sub	r2, r21
    3048:	31 08       	sbc	r3, r1
    304a:	2f 5f       	subi	r18, 0xFF	; 255
    304c:	3f 4f       	sbci	r19, 0xFF	; 255
    304e:	48 89       	ldd	r20, Y+16	; 0x10
    3050:	59 89       	ldd	r21, Y+17	; 0x11
    3052:	24 16       	cp	r2, r20
    3054:	35 06       	cpc	r3, r21
    3056:	4c f0       	brlt	.+18     	; 0x306a <vfprintf+0x324>
    3058:	b6 01       	movw	r22, r12
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	2a 8b       	std	Y+18, r18	; 0x12
    305e:	3b 8b       	std	Y+19, r19	; 0x13
    3060:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <fputc>
    3064:	2a 89       	ldd	r18, Y+18	; 0x12
    3066:	3b 89       	ldd	r19, Y+19	; 0x13
    3068:	cf cf       	rjmp	.-98     	; 0x3008 <vfprintf+0x2c2>
    306a:	24 14       	cp	r2, r4
    306c:	35 04       	cpc	r3, r5
    306e:	39 f4       	brne	.+14     	; 0x307e <vfprintf+0x338>
    3070:	9a 81       	ldd	r25, Y+2	; 0x02
    3072:	96 33       	cpi	r25, 0x36	; 54
    3074:	18 f4       	brcc	.+6      	; 0x307c <vfprintf+0x336>
    3076:	95 33       	cpi	r25, 0x35	; 53
    3078:	11 f4       	brne	.+4      	; 0x307e <vfprintf+0x338>
    307a:	04 ff       	sbrs	r16, 4
    307c:	81 e3       	ldi	r24, 0x31	; 49
    307e:	b6 01       	movw	r22, r12
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	4b c0       	rjmp	.+150    	; 0x311a <vfprintf+0x3d4>
    3084:	8a 81       	ldd	r24, Y+2	; 0x02
    3086:	81 33       	cpi	r24, 0x31	; 49
    3088:	09 f0       	breq	.+2      	; 0x308c <vfprintf+0x346>
    308a:	0f 7e       	andi	r16, 0xEF	; 239
    308c:	b6 01       	movw	r22, r12
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <fputc>
    3094:	11 11       	cpse	r17, r1
    3096:	05 c0       	rjmp	.+10     	; 0x30a2 <vfprintf+0x35c>
    3098:	34 fc       	sbrc	r3, 4
    309a:	18 c0       	rjmp	.+48     	; 0x30cc <vfprintf+0x386>
    309c:	85 e6       	ldi	r24, 0x65	; 101
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	17 c0       	rjmp	.+46     	; 0x30d0 <vfprintf+0x38a>
    30a2:	b6 01       	movw	r22, r12
    30a4:	8e e2       	ldi	r24, 0x2E	; 46
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <fputc>
    30ac:	82 e0       	ldi	r24, 0x02	; 2
    30ae:	ee 24       	eor	r14, r14
    30b0:	e3 94       	inc	r14
    30b2:	e8 0e       	add	r14, r24
    30b4:	f3 01       	movw	r30, r6
    30b6:	e8 0f       	add	r30, r24
    30b8:	f1 1d       	adc	r31, r1
    30ba:	80 81       	ld	r24, Z
    30bc:	b6 01       	movw	r22, r12
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <fputc>
    30c4:	11 50       	subi	r17, 0x01	; 1
    30c6:	8e 2d       	mov	r24, r14
    30c8:	91 f7       	brne	.-28     	; 0x30ae <vfprintf+0x368>
    30ca:	e6 cf       	rjmp	.-52     	; 0x3098 <vfprintf+0x352>
    30cc:	85 e4       	ldi	r24, 0x45	; 69
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	b6 01       	movw	r22, r12
    30d2:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <fputc>
    30d6:	57 fc       	sbrc	r5, 7
    30d8:	05 c0       	rjmp	.+10     	; 0x30e4 <vfprintf+0x39e>
    30da:	41 14       	cp	r4, r1
    30dc:	51 04       	cpc	r5, r1
    30de:	39 f4       	brne	.+14     	; 0x30ee <vfprintf+0x3a8>
    30e0:	04 ff       	sbrs	r16, 4
    30e2:	05 c0       	rjmp	.+10     	; 0x30ee <vfprintf+0x3a8>
    30e4:	51 94       	neg	r5
    30e6:	41 94       	neg	r4
    30e8:	51 08       	sbc	r5, r1
    30ea:	8d e2       	ldi	r24, 0x2D	; 45
    30ec:	01 c0       	rjmp	.+2      	; 0x30f0 <vfprintf+0x3aa>
    30ee:	8b e2       	ldi	r24, 0x2B	; 43
    30f0:	b6 01       	movw	r22, r12
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <fputc>
    30f8:	80 e3       	ldi	r24, 0x30	; 48
    30fa:	9a e0       	ldi	r25, 0x0A	; 10
    30fc:	49 16       	cp	r4, r25
    30fe:	51 04       	cpc	r5, r1
    3100:	2c f0       	brlt	.+10     	; 0x310c <vfprintf+0x3c6>
    3102:	8f 5f       	subi	r24, 0xFF	; 255
    3104:	5a e0       	ldi	r21, 0x0A	; 10
    3106:	45 1a       	sub	r4, r21
    3108:	51 08       	sbc	r5, r1
    310a:	f7 cf       	rjmp	.-18     	; 0x30fa <vfprintf+0x3b4>
    310c:	b6 01       	movw	r22, r12
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <fputc>
    3114:	b6 01       	movw	r22, r12
    3116:	c2 01       	movw	r24, r4
    3118:	c0 96       	adiw	r24, 0x30	; 48
    311a:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <fputc>
    311e:	57 c1       	rjmp	.+686    	; 0x33ce <vfprintf+0x688>
    3120:	83 36       	cpi	r24, 0x63	; 99
    3122:	31 f0       	breq	.+12     	; 0x3130 <vfprintf+0x3ea>
    3124:	83 37       	cpi	r24, 0x73	; 115
    3126:	79 f0       	breq	.+30     	; 0x3146 <vfprintf+0x400>
    3128:	83 35       	cpi	r24, 0x53	; 83
    312a:	09 f0       	breq	.+2      	; 0x312e <vfprintf+0x3e8>
    312c:	58 c0       	rjmp	.+176    	; 0x31de <vfprintf+0x498>
    312e:	21 c0       	rjmp	.+66     	; 0x3172 <vfprintf+0x42c>
    3130:	52 01       	movw	r10, r4
    3132:	e2 e0       	ldi	r30, 0x02	; 2
    3134:	ae 0e       	add	r10, r30
    3136:	b1 1c       	adc	r11, r1
    3138:	f2 01       	movw	r30, r4
    313a:	80 81       	ld	r24, Z
    313c:	89 83       	std	Y+1, r24	; 0x01
    313e:	01 e0       	ldi	r16, 0x01	; 1
    3140:	10 e0       	ldi	r17, 0x00	; 0
    3142:	23 01       	movw	r4, r6
    3144:	14 c0       	rjmp	.+40     	; 0x316e <vfprintf+0x428>
    3146:	52 01       	movw	r10, r4
    3148:	f2 e0       	ldi	r31, 0x02	; 2
    314a:	af 0e       	add	r10, r31
    314c:	b1 1c       	adc	r11, r1
    314e:	f2 01       	movw	r30, r4
    3150:	40 80       	ld	r4, Z
    3152:	51 80       	ldd	r5, Z+1	; 0x01
    3154:	26 ff       	sbrs	r18, 6
    3156:	03 c0       	rjmp	.+6      	; 0x315e <vfprintf+0x418>
    3158:	61 2f       	mov	r22, r17
    315a:	70 e0       	ldi	r23, 0x00	; 0
    315c:	02 c0       	rjmp	.+4      	; 0x3162 <vfprintf+0x41c>
    315e:	6f ef       	ldi	r22, 0xFF	; 255
    3160:	7f ef       	ldi	r23, 0xFF	; 255
    3162:	c2 01       	movw	r24, r4
    3164:	2a 8b       	std	Y+18, r18	; 0x12
    3166:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <strnlen>
    316a:	8c 01       	movw	r16, r24
    316c:	2a 89       	ldd	r18, Y+18	; 0x12
    316e:	2f 77       	andi	r18, 0x7F	; 127
    3170:	15 c0       	rjmp	.+42     	; 0x319c <vfprintf+0x456>
    3172:	52 01       	movw	r10, r4
    3174:	f2 e0       	ldi	r31, 0x02	; 2
    3176:	af 0e       	add	r10, r31
    3178:	b1 1c       	adc	r11, r1
    317a:	f2 01       	movw	r30, r4
    317c:	40 80       	ld	r4, Z
    317e:	51 80       	ldd	r5, Z+1	; 0x01
    3180:	26 ff       	sbrs	r18, 6
    3182:	03 c0       	rjmp	.+6      	; 0x318a <vfprintf+0x444>
    3184:	61 2f       	mov	r22, r17
    3186:	70 e0       	ldi	r23, 0x00	; 0
    3188:	02 c0       	rjmp	.+4      	; 0x318e <vfprintf+0x448>
    318a:	6f ef       	ldi	r22, 0xFF	; 255
    318c:	7f ef       	ldi	r23, 0xFF	; 255
    318e:	c2 01       	movw	r24, r4
    3190:	2a 8b       	std	Y+18, r18	; 0x12
    3192:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <strnlen_P>
    3196:	8c 01       	movw	r16, r24
    3198:	2a 89       	ldd	r18, Y+18	; 0x12
    319a:	20 68       	ori	r18, 0x80	; 128
    319c:	32 2e       	mov	r3, r18
    319e:	23 fd       	sbrc	r18, 3
    31a0:	1a c0       	rjmp	.+52     	; 0x31d6 <vfprintf+0x490>
    31a2:	8f 2d       	mov	r24, r15
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	08 17       	cp	r16, r24
    31a8:	19 07       	cpc	r17, r25
    31aa:	a8 f4       	brcc	.+42     	; 0x31d6 <vfprintf+0x490>
    31ac:	b6 01       	movw	r22, r12
    31ae:	80 e2       	ldi	r24, 0x20	; 32
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <fputc>
    31b6:	fa 94       	dec	r15
    31b8:	f4 cf       	rjmp	.-24     	; 0x31a2 <vfprintf+0x45c>
    31ba:	f2 01       	movw	r30, r4
    31bc:	37 fc       	sbrc	r3, 7
    31be:	85 91       	lpm	r24, Z+
    31c0:	37 fe       	sbrs	r3, 7
    31c2:	81 91       	ld	r24, Z+
    31c4:	2f 01       	movw	r4, r30
    31c6:	b6 01       	movw	r22, r12
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <fputc>
    31ce:	f1 10       	cpse	r15, r1
    31d0:	fa 94       	dec	r15
    31d2:	01 50       	subi	r16, 0x01	; 1
    31d4:	11 09       	sbc	r17, r1
    31d6:	01 15       	cp	r16, r1
    31d8:	11 05       	cpc	r17, r1
    31da:	79 f7       	brne	.-34     	; 0x31ba <vfprintf+0x474>
    31dc:	f8 c0       	rjmp	.+496    	; 0x33ce <vfprintf+0x688>
    31de:	84 36       	cpi	r24, 0x64	; 100
    31e0:	11 f0       	breq	.+4      	; 0x31e6 <vfprintf+0x4a0>
    31e2:	89 36       	cpi	r24, 0x69	; 105
    31e4:	59 f5       	brne	.+86     	; 0x323c <vfprintf+0x4f6>
    31e6:	52 01       	movw	r10, r4
    31e8:	27 ff       	sbrs	r18, 7
    31ea:	09 c0       	rjmp	.+18     	; 0x31fe <vfprintf+0x4b8>
    31ec:	f4 e0       	ldi	r31, 0x04	; 4
    31ee:	af 0e       	add	r10, r31
    31f0:	b1 1c       	adc	r11, r1
    31f2:	f2 01       	movw	r30, r4
    31f4:	60 81       	ld	r22, Z
    31f6:	71 81       	ldd	r23, Z+1	; 0x01
    31f8:	82 81       	ldd	r24, Z+2	; 0x02
    31fa:	93 81       	ldd	r25, Z+3	; 0x03
    31fc:	0a c0       	rjmp	.+20     	; 0x3212 <vfprintf+0x4cc>
    31fe:	f2 e0       	ldi	r31, 0x02	; 2
    3200:	af 0e       	add	r10, r31
    3202:	b1 1c       	adc	r11, r1
    3204:	f2 01       	movw	r30, r4
    3206:	60 81       	ld	r22, Z
    3208:	71 81       	ldd	r23, Z+1	; 0x01
    320a:	07 2e       	mov	r0, r23
    320c:	00 0c       	add	r0, r0
    320e:	88 0b       	sbc	r24, r24
    3210:	99 0b       	sbc	r25, r25
    3212:	2f 76       	andi	r18, 0x6F	; 111
    3214:	32 2e       	mov	r3, r18
    3216:	97 ff       	sbrs	r25, 7
    3218:	09 c0       	rjmp	.+18     	; 0x322c <vfprintf+0x4e6>
    321a:	90 95       	com	r25
    321c:	80 95       	com	r24
    321e:	70 95       	com	r23
    3220:	61 95       	neg	r22
    3222:	7f 4f       	sbci	r23, 0xFF	; 255
    3224:	8f 4f       	sbci	r24, 0xFF	; 255
    3226:	9f 4f       	sbci	r25, 0xFF	; 255
    3228:	20 68       	ori	r18, 0x80	; 128
    322a:	32 2e       	mov	r3, r18
    322c:	2a e0       	ldi	r18, 0x0A	; 10
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	a3 01       	movw	r20, r6
    3232:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <__ultoa_invert>
    3236:	e8 2e       	mov	r14, r24
    3238:	e6 18       	sub	r14, r6
    323a:	3f c0       	rjmp	.+126    	; 0x32ba <vfprintf+0x574>
    323c:	02 2f       	mov	r16, r18
    323e:	85 37       	cpi	r24, 0x75	; 117
    3240:	21 f4       	brne	.+8      	; 0x324a <vfprintf+0x504>
    3242:	0f 7e       	andi	r16, 0xEF	; 239
    3244:	2a e0       	ldi	r18, 0x0A	; 10
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	1d c0       	rjmp	.+58     	; 0x3284 <vfprintf+0x53e>
    324a:	09 7f       	andi	r16, 0xF9	; 249
    324c:	8f 36       	cpi	r24, 0x6F	; 111
    324e:	91 f0       	breq	.+36     	; 0x3274 <vfprintf+0x52e>
    3250:	18 f4       	brcc	.+6      	; 0x3258 <vfprintf+0x512>
    3252:	88 35       	cpi	r24, 0x58	; 88
    3254:	59 f0       	breq	.+22     	; 0x326c <vfprintf+0x526>
    3256:	c5 c0       	rjmp	.+394    	; 0x33e2 <vfprintf+0x69c>
    3258:	80 37       	cpi	r24, 0x70	; 112
    325a:	19 f0       	breq	.+6      	; 0x3262 <vfprintf+0x51c>
    325c:	88 37       	cpi	r24, 0x78	; 120
    325e:	11 f0       	breq	.+4      	; 0x3264 <vfprintf+0x51e>
    3260:	c0 c0       	rjmp	.+384    	; 0x33e2 <vfprintf+0x69c>
    3262:	00 61       	ori	r16, 0x10	; 16
    3264:	04 ff       	sbrs	r16, 4
    3266:	09 c0       	rjmp	.+18     	; 0x327a <vfprintf+0x534>
    3268:	04 60       	ori	r16, 0x04	; 4
    326a:	07 c0       	rjmp	.+14     	; 0x327a <vfprintf+0x534>
    326c:	24 ff       	sbrs	r18, 4
    326e:	08 c0       	rjmp	.+16     	; 0x3280 <vfprintf+0x53a>
    3270:	06 60       	ori	r16, 0x06	; 6
    3272:	06 c0       	rjmp	.+12     	; 0x3280 <vfprintf+0x53a>
    3274:	28 e0       	ldi	r18, 0x08	; 8
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	05 c0       	rjmp	.+10     	; 0x3284 <vfprintf+0x53e>
    327a:	20 e1       	ldi	r18, 0x10	; 16
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	02 c0       	rjmp	.+4      	; 0x3284 <vfprintf+0x53e>
    3280:	20 e1       	ldi	r18, 0x10	; 16
    3282:	32 e0       	ldi	r19, 0x02	; 2
    3284:	52 01       	movw	r10, r4
    3286:	07 ff       	sbrs	r16, 7
    3288:	09 c0       	rjmp	.+18     	; 0x329c <vfprintf+0x556>
    328a:	f4 e0       	ldi	r31, 0x04	; 4
    328c:	af 0e       	add	r10, r31
    328e:	b1 1c       	adc	r11, r1
    3290:	f2 01       	movw	r30, r4
    3292:	60 81       	ld	r22, Z
    3294:	71 81       	ldd	r23, Z+1	; 0x01
    3296:	82 81       	ldd	r24, Z+2	; 0x02
    3298:	93 81       	ldd	r25, Z+3	; 0x03
    329a:	08 c0       	rjmp	.+16     	; 0x32ac <vfprintf+0x566>
    329c:	f2 e0       	ldi	r31, 0x02	; 2
    329e:	af 0e       	add	r10, r31
    32a0:	b1 1c       	adc	r11, r1
    32a2:	f2 01       	movw	r30, r4
    32a4:	60 81       	ld	r22, Z
    32a6:	71 81       	ldd	r23, Z+1	; 0x01
    32a8:	80 e0       	ldi	r24, 0x00	; 0
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	a3 01       	movw	r20, r6
    32ae:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <__ultoa_invert>
    32b2:	e8 2e       	mov	r14, r24
    32b4:	e6 18       	sub	r14, r6
    32b6:	0f 77       	andi	r16, 0x7F	; 127
    32b8:	30 2e       	mov	r3, r16
    32ba:	36 fe       	sbrs	r3, 6
    32bc:	0b c0       	rjmp	.+22     	; 0x32d4 <vfprintf+0x58e>
    32be:	33 2d       	mov	r19, r3
    32c0:	3e 7f       	andi	r19, 0xFE	; 254
    32c2:	e1 16       	cp	r14, r17
    32c4:	50 f4       	brcc	.+20     	; 0x32da <vfprintf+0x594>
    32c6:	34 fe       	sbrs	r3, 4
    32c8:	0a c0       	rjmp	.+20     	; 0x32de <vfprintf+0x598>
    32ca:	32 fc       	sbrc	r3, 2
    32cc:	08 c0       	rjmp	.+16     	; 0x32de <vfprintf+0x598>
    32ce:	33 2d       	mov	r19, r3
    32d0:	3e 7e       	andi	r19, 0xEE	; 238
    32d2:	05 c0       	rjmp	.+10     	; 0x32de <vfprintf+0x598>
    32d4:	0e 2d       	mov	r16, r14
    32d6:	33 2d       	mov	r19, r3
    32d8:	03 c0       	rjmp	.+6      	; 0x32e0 <vfprintf+0x59a>
    32da:	0e 2d       	mov	r16, r14
    32dc:	01 c0       	rjmp	.+2      	; 0x32e0 <vfprintf+0x59a>
    32de:	01 2f       	mov	r16, r17
    32e0:	34 ff       	sbrs	r19, 4
    32e2:	0c c0       	rjmp	.+24     	; 0x32fc <vfprintf+0x5b6>
    32e4:	fe 01       	movw	r30, r28
    32e6:	ee 0d       	add	r30, r14
    32e8:	f1 1d       	adc	r31, r1
    32ea:	80 81       	ld	r24, Z
    32ec:	80 33       	cpi	r24, 0x30	; 48
    32ee:	11 f4       	brne	.+4      	; 0x32f4 <vfprintf+0x5ae>
    32f0:	39 7e       	andi	r19, 0xE9	; 233
    32f2:	08 c0       	rjmp	.+16     	; 0x3304 <vfprintf+0x5be>
    32f4:	32 ff       	sbrs	r19, 2
    32f6:	05 c0       	rjmp	.+10     	; 0x3302 <vfprintf+0x5bc>
    32f8:	0e 5f       	subi	r16, 0xFE	; 254
    32fa:	04 c0       	rjmp	.+8      	; 0x3304 <vfprintf+0x5be>
    32fc:	83 2f       	mov	r24, r19
    32fe:	86 78       	andi	r24, 0x86	; 134
    3300:	09 f0       	breq	.+2      	; 0x3304 <vfprintf+0x5be>
    3302:	0f 5f       	subi	r16, 0xFF	; 255
    3304:	33 fd       	sbrc	r19, 3
    3306:	13 c0       	rjmp	.+38     	; 0x332e <vfprintf+0x5e8>
    3308:	30 ff       	sbrs	r19, 0
    330a:	06 c0       	rjmp	.+12     	; 0x3318 <vfprintf+0x5d2>
    330c:	1e 2d       	mov	r17, r14
    330e:	0f 15       	cp	r16, r15
    3310:	18 f4       	brcc	.+6      	; 0x3318 <vfprintf+0x5d2>
    3312:	1f 0d       	add	r17, r15
    3314:	10 1b       	sub	r17, r16
    3316:	0f 2d       	mov	r16, r15
    3318:	0f 15       	cp	r16, r15
    331a:	68 f4       	brcc	.+26     	; 0x3336 <vfprintf+0x5f0>
    331c:	b6 01       	movw	r22, r12
    331e:	80 e2       	ldi	r24, 0x20	; 32
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	3b 8b       	std	Y+19, r19	; 0x13
    3324:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <fputc>
    3328:	0f 5f       	subi	r16, 0xFF	; 255
    332a:	3b 89       	ldd	r19, Y+19	; 0x13
    332c:	f5 cf       	rjmp	.-22     	; 0x3318 <vfprintf+0x5d2>
    332e:	0f 15       	cp	r16, r15
    3330:	10 f4       	brcc	.+4      	; 0x3336 <vfprintf+0x5f0>
    3332:	f0 1a       	sub	r15, r16
    3334:	01 c0       	rjmp	.+2      	; 0x3338 <vfprintf+0x5f2>
    3336:	f1 2c       	mov	r15, r1
    3338:	34 ff       	sbrs	r19, 4
    333a:	12 c0       	rjmp	.+36     	; 0x3360 <vfprintf+0x61a>
    333c:	b6 01       	movw	r22, r12
    333e:	80 e3       	ldi	r24, 0x30	; 48
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	3b 8b       	std	Y+19, r19	; 0x13
    3344:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <fputc>
    3348:	3b 89       	ldd	r19, Y+19	; 0x13
    334a:	32 ff       	sbrs	r19, 2
    334c:	17 c0       	rjmp	.+46     	; 0x337c <vfprintf+0x636>
    334e:	31 fd       	sbrc	r19, 1
    3350:	03 c0       	rjmp	.+6      	; 0x3358 <vfprintf+0x612>
    3352:	88 e7       	ldi	r24, 0x78	; 120
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	02 c0       	rjmp	.+4      	; 0x335c <vfprintf+0x616>
    3358:	88 e5       	ldi	r24, 0x58	; 88
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	b6 01       	movw	r22, r12
    335e:	0c c0       	rjmp	.+24     	; 0x3378 <vfprintf+0x632>
    3360:	83 2f       	mov	r24, r19
    3362:	86 78       	andi	r24, 0x86	; 134
    3364:	59 f0       	breq	.+22     	; 0x337c <vfprintf+0x636>
    3366:	31 ff       	sbrs	r19, 1
    3368:	02 c0       	rjmp	.+4      	; 0x336e <vfprintf+0x628>
    336a:	8b e2       	ldi	r24, 0x2B	; 43
    336c:	01 c0       	rjmp	.+2      	; 0x3370 <vfprintf+0x62a>
    336e:	80 e2       	ldi	r24, 0x20	; 32
    3370:	37 fd       	sbrc	r19, 7
    3372:	8d e2       	ldi	r24, 0x2D	; 45
    3374:	b6 01       	movw	r22, r12
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <fputc>
    337c:	e1 16       	cp	r14, r17
    337e:	38 f4       	brcc	.+14     	; 0x338e <vfprintf+0x648>
    3380:	b6 01       	movw	r22, r12
    3382:	80 e3       	ldi	r24, 0x30	; 48
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <fputc>
    338a:	11 50       	subi	r17, 0x01	; 1
    338c:	f7 cf       	rjmp	.-18     	; 0x337c <vfprintf+0x636>
    338e:	ea 94       	dec	r14
    3390:	f3 01       	movw	r30, r6
    3392:	ee 0d       	add	r30, r14
    3394:	f1 1d       	adc	r31, r1
    3396:	80 81       	ld	r24, Z
    3398:	b6 01       	movw	r22, r12
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <fputc>
    33a0:	e1 10       	cpse	r14, r1
    33a2:	f5 cf       	rjmp	.-22     	; 0x338e <vfprintf+0x648>
    33a4:	14 c0       	rjmp	.+40     	; 0x33ce <vfprintf+0x688>
    33a6:	f4 e0       	ldi	r31, 0x04	; 4
    33a8:	ff 15       	cp	r31, r15
    33aa:	58 f5       	brcc	.+86     	; 0x3402 <vfprintf+0x6bc>
    33ac:	84 e0       	ldi	r24, 0x04	; 4
    33ae:	f8 1a       	sub	r15, r24
    33b0:	33 fe       	sbrs	r3, 3
    33b2:	1e c0       	rjmp	.+60     	; 0x33f0 <vfprintf+0x6aa>
    33b4:	21 10       	cpse	r2, r1
    33b6:	26 c0       	rjmp	.+76     	; 0x3404 <vfprintf+0x6be>
    33b8:	03 ff       	sbrs	r16, 3
    33ba:	2a c0       	rjmp	.+84     	; 0x3410 <vfprintf+0x6ca>
    33bc:	02 ec       	ldi	r16, 0xC2	; 194
    33be:	11 e0       	ldi	r17, 0x01	; 1
    33c0:	f3 2d       	mov	r31, r3
    33c2:	f0 71       	andi	r31, 0x10	; 16
    33c4:	3f 2e       	mov	r3, r31
    33c6:	f8 01       	movw	r30, r16
    33c8:	84 91       	lpm	r24, Z
    33ca:	81 11       	cpse	r24, r1
    33cc:	24 c0       	rjmp	.+72     	; 0x3416 <vfprintf+0x6d0>
    33ce:	ff 20       	and	r15, r15
    33d0:	09 f4       	brne	.+2      	; 0x33d4 <vfprintf+0x68e>
    33d2:	e5 cc       	rjmp	.-1590   	; 0x2d9e <vfprintf+0x58>
    33d4:	b6 01       	movw	r22, r12
    33d6:	80 e2       	ldi	r24, 0x20	; 32
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <fputc>
    33de:	fa 94       	dec	r15
    33e0:	f6 cf       	rjmp	.-20     	; 0x33ce <vfprintf+0x688>
    33e2:	f6 01       	movw	r30, r12
    33e4:	86 81       	ldd	r24, Z+6	; 0x06
    33e6:	97 81       	ldd	r25, Z+7	; 0x07
    33e8:	26 c0       	rjmp	.+76     	; 0x3436 <vfprintf+0x6f0>
    33ea:	8f ef       	ldi	r24, 0xFF	; 255
    33ec:	9f ef       	ldi	r25, 0xFF	; 255
    33ee:	23 c0       	rjmp	.+70     	; 0x3436 <vfprintf+0x6f0>
    33f0:	b6 01       	movw	r22, r12
    33f2:	80 e2       	ldi	r24, 0x20	; 32
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <fputc>
    33fa:	fa 94       	dec	r15
    33fc:	f1 10       	cpse	r15, r1
    33fe:	f8 cf       	rjmp	.-16     	; 0x33f0 <vfprintf+0x6aa>
    3400:	d9 cf       	rjmp	.-78     	; 0x33b4 <vfprintf+0x66e>
    3402:	f1 2c       	mov	r15, r1
    3404:	b6 01       	movw	r22, r12
    3406:	82 2d       	mov	r24, r2
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <fputc>
    340e:	d4 cf       	rjmp	.-88     	; 0x33b8 <vfprintf+0x672>
    3410:	06 ec       	ldi	r16, 0xC6	; 198
    3412:	11 e0       	ldi	r17, 0x01	; 1
    3414:	d5 cf       	rjmp	.-86     	; 0x33c0 <vfprintf+0x67a>
    3416:	31 10       	cpse	r3, r1
    3418:	80 52       	subi	r24, 0x20	; 32
    341a:	b6 01       	movw	r22, r12
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <fputc>
    3422:	0f 5f       	subi	r16, 0xFF	; 255
    3424:	1f 4f       	sbci	r17, 0xFF	; 255
    3426:	cf cf       	rjmp	.-98     	; 0x33c6 <vfprintf+0x680>
    3428:	23 e0       	ldi	r18, 0x03	; 3
    342a:	2f 15       	cp	r18, r15
    342c:	10 f4       	brcc	.+4      	; 0x3432 <vfprintf+0x6ec>
    342e:	83 e0       	ldi	r24, 0x03	; 3
    3430:	be cf       	rjmp	.-132    	; 0x33ae <vfprintf+0x668>
    3432:	f1 2c       	mov	r15, r1
    3434:	c1 cf       	rjmp	.-126    	; 0x33b8 <vfprintf+0x672>
    3436:	63 96       	adiw	r28, 0x13	; 19
    3438:	e2 e1       	ldi	r30, 0x12	; 18
    343a:	0c 94 5f 1c 	jmp	0x38be	; 0x38be <__epilogue_restores__>

0000343e <__cmpsf2>:
    343e:	0e 94 09 1b 	call	0x3612	; 0x3612 <__fp_cmp>
    3442:	08 f4       	brcc	.+2      	; 0x3446 <__cmpsf2+0x8>
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	08 95       	ret

00003448 <__divsf3>:
    3448:	0e 94 38 1a 	call	0x3470	; 0x3470 <__divsf3x>
    344c:	0c 94 44 1b 	jmp	0x3688	; 0x3688 <__fp_round>
    3450:	0e 94 3d 1b 	call	0x367a	; 0x367a <__fp_pscB>
    3454:	58 f0       	brcs	.+22     	; 0x346c <__divsf3+0x24>
    3456:	0e 94 36 1b 	call	0x366c	; 0x366c <__fp_pscA>
    345a:	40 f0       	brcs	.+16     	; 0x346c <__divsf3+0x24>
    345c:	29 f4       	brne	.+10     	; 0x3468 <__divsf3+0x20>
    345e:	5f 3f       	cpi	r21, 0xFF	; 255
    3460:	29 f0       	breq	.+10     	; 0x346c <__divsf3+0x24>
    3462:	0c 94 2d 1b 	jmp	0x365a	; 0x365a <__fp_inf>
    3466:	51 11       	cpse	r21, r1
    3468:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__fp_szero>
    346c:	0c 94 33 1b 	jmp	0x3666	; 0x3666 <__fp_nan>

00003470 <__divsf3x>:
    3470:	0e 94 55 1b 	call	0x36aa	; 0x36aa <__fp_split3>
    3474:	68 f3       	brcs	.-38     	; 0x3450 <__divsf3+0x8>

00003476 <__divsf3_pse>:
    3476:	99 23       	and	r25, r25
    3478:	b1 f3       	breq	.-20     	; 0x3466 <__divsf3+0x1e>
    347a:	55 23       	and	r21, r21
    347c:	91 f3       	breq	.-28     	; 0x3462 <__divsf3+0x1a>
    347e:	95 1b       	sub	r25, r21
    3480:	55 0b       	sbc	r21, r21
    3482:	bb 27       	eor	r27, r27
    3484:	aa 27       	eor	r26, r26
    3486:	62 17       	cp	r22, r18
    3488:	73 07       	cpc	r23, r19
    348a:	84 07       	cpc	r24, r20
    348c:	38 f0       	brcs	.+14     	; 0x349c <__divsf3_pse+0x26>
    348e:	9f 5f       	subi	r25, 0xFF	; 255
    3490:	5f 4f       	sbci	r21, 0xFF	; 255
    3492:	22 0f       	add	r18, r18
    3494:	33 1f       	adc	r19, r19
    3496:	44 1f       	adc	r20, r20
    3498:	aa 1f       	adc	r26, r26
    349a:	a9 f3       	breq	.-22     	; 0x3486 <__divsf3_pse+0x10>
    349c:	35 d0       	rcall	.+106    	; 0x3508 <__divsf3_pse+0x92>
    349e:	0e 2e       	mov	r0, r30
    34a0:	3a f0       	brmi	.+14     	; 0x34b0 <__divsf3_pse+0x3a>
    34a2:	e0 e8       	ldi	r30, 0x80	; 128
    34a4:	32 d0       	rcall	.+100    	; 0x350a <__divsf3_pse+0x94>
    34a6:	91 50       	subi	r25, 0x01	; 1
    34a8:	50 40       	sbci	r21, 0x00	; 0
    34aa:	e6 95       	lsr	r30
    34ac:	00 1c       	adc	r0, r0
    34ae:	ca f7       	brpl	.-14     	; 0x34a2 <__divsf3_pse+0x2c>
    34b0:	2b d0       	rcall	.+86     	; 0x3508 <__divsf3_pse+0x92>
    34b2:	fe 2f       	mov	r31, r30
    34b4:	29 d0       	rcall	.+82     	; 0x3508 <__divsf3_pse+0x92>
    34b6:	66 0f       	add	r22, r22
    34b8:	77 1f       	adc	r23, r23
    34ba:	88 1f       	adc	r24, r24
    34bc:	bb 1f       	adc	r27, r27
    34be:	26 17       	cp	r18, r22
    34c0:	37 07       	cpc	r19, r23
    34c2:	48 07       	cpc	r20, r24
    34c4:	ab 07       	cpc	r26, r27
    34c6:	b0 e8       	ldi	r27, 0x80	; 128
    34c8:	09 f0       	breq	.+2      	; 0x34cc <__divsf3_pse+0x56>
    34ca:	bb 0b       	sbc	r27, r27
    34cc:	80 2d       	mov	r24, r0
    34ce:	bf 01       	movw	r22, r30
    34d0:	ff 27       	eor	r31, r31
    34d2:	93 58       	subi	r25, 0x83	; 131
    34d4:	5f 4f       	sbci	r21, 0xFF	; 255
    34d6:	3a f0       	brmi	.+14     	; 0x34e6 <__divsf3_pse+0x70>
    34d8:	9e 3f       	cpi	r25, 0xFE	; 254
    34da:	51 05       	cpc	r21, r1
    34dc:	78 f0       	brcs	.+30     	; 0x34fc <__divsf3_pse+0x86>
    34de:	0c 94 2d 1b 	jmp	0x365a	; 0x365a <__fp_inf>
    34e2:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__fp_szero>
    34e6:	5f 3f       	cpi	r21, 0xFF	; 255
    34e8:	e4 f3       	brlt	.-8      	; 0x34e2 <__divsf3_pse+0x6c>
    34ea:	98 3e       	cpi	r25, 0xE8	; 232
    34ec:	d4 f3       	brlt	.-12     	; 0x34e2 <__divsf3_pse+0x6c>
    34ee:	86 95       	lsr	r24
    34f0:	77 95       	ror	r23
    34f2:	67 95       	ror	r22
    34f4:	b7 95       	ror	r27
    34f6:	f7 95       	ror	r31
    34f8:	9f 5f       	subi	r25, 0xFF	; 255
    34fa:	c9 f7       	brne	.-14     	; 0x34ee <__divsf3_pse+0x78>
    34fc:	88 0f       	add	r24, r24
    34fe:	91 1d       	adc	r25, r1
    3500:	96 95       	lsr	r25
    3502:	87 95       	ror	r24
    3504:	97 f9       	bld	r25, 7
    3506:	08 95       	ret
    3508:	e1 e0       	ldi	r30, 0x01	; 1
    350a:	66 0f       	add	r22, r22
    350c:	77 1f       	adc	r23, r23
    350e:	88 1f       	adc	r24, r24
    3510:	bb 1f       	adc	r27, r27
    3512:	62 17       	cp	r22, r18
    3514:	73 07       	cpc	r23, r19
    3516:	84 07       	cpc	r24, r20
    3518:	ba 07       	cpc	r27, r26
    351a:	20 f0       	brcs	.+8      	; 0x3524 <__divsf3_pse+0xae>
    351c:	62 1b       	sub	r22, r18
    351e:	73 0b       	sbc	r23, r19
    3520:	84 0b       	sbc	r24, r20
    3522:	ba 0b       	sbc	r27, r26
    3524:	ee 1f       	adc	r30, r30
    3526:	88 f7       	brcc	.-30     	; 0x350a <__divsf3_pse+0x94>
    3528:	e0 95       	com	r30
    352a:	08 95       	ret

0000352c <__fixsfsi>:
    352c:	0e 94 9d 1a 	call	0x353a	; 0x353a <__fixunssfsi>
    3530:	68 94       	set
    3532:	b1 11       	cpse	r27, r1
    3534:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__fp_szero>
    3538:	08 95       	ret

0000353a <__fixunssfsi>:
    353a:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <__fp_splitA>
    353e:	88 f0       	brcs	.+34     	; 0x3562 <__fixunssfsi+0x28>
    3540:	9f 57       	subi	r25, 0x7F	; 127
    3542:	98 f0       	brcs	.+38     	; 0x356a <__fixunssfsi+0x30>
    3544:	b9 2f       	mov	r27, r25
    3546:	99 27       	eor	r25, r25
    3548:	b7 51       	subi	r27, 0x17	; 23
    354a:	b0 f0       	brcs	.+44     	; 0x3578 <__fixunssfsi+0x3e>
    354c:	e1 f0       	breq	.+56     	; 0x3586 <__fixunssfsi+0x4c>
    354e:	66 0f       	add	r22, r22
    3550:	77 1f       	adc	r23, r23
    3552:	88 1f       	adc	r24, r24
    3554:	99 1f       	adc	r25, r25
    3556:	1a f0       	brmi	.+6      	; 0x355e <__fixunssfsi+0x24>
    3558:	ba 95       	dec	r27
    355a:	c9 f7       	brne	.-14     	; 0x354e <__fixunssfsi+0x14>
    355c:	14 c0       	rjmp	.+40     	; 0x3586 <__fixunssfsi+0x4c>
    355e:	b1 30       	cpi	r27, 0x01	; 1
    3560:	91 f0       	breq	.+36     	; 0x3586 <__fixunssfsi+0x4c>
    3562:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__fp_zero>
    3566:	b1 e0       	ldi	r27, 0x01	; 1
    3568:	08 95       	ret
    356a:	0c 94 77 1b 	jmp	0x36ee	; 0x36ee <__fp_zero>
    356e:	67 2f       	mov	r22, r23
    3570:	78 2f       	mov	r23, r24
    3572:	88 27       	eor	r24, r24
    3574:	b8 5f       	subi	r27, 0xF8	; 248
    3576:	39 f0       	breq	.+14     	; 0x3586 <__fixunssfsi+0x4c>
    3578:	b9 3f       	cpi	r27, 0xF9	; 249
    357a:	cc f3       	brlt	.-14     	; 0x356e <__fixunssfsi+0x34>
    357c:	86 95       	lsr	r24
    357e:	77 95       	ror	r23
    3580:	67 95       	ror	r22
    3582:	b3 95       	inc	r27
    3584:	d9 f7       	brne	.-10     	; 0x357c <__fixunssfsi+0x42>
    3586:	3e f4       	brtc	.+14     	; 0x3596 <__fixunssfsi+0x5c>
    3588:	90 95       	com	r25
    358a:	80 95       	com	r24
    358c:	70 95       	com	r23
    358e:	61 95       	neg	r22
    3590:	7f 4f       	sbci	r23, 0xFF	; 255
    3592:	8f 4f       	sbci	r24, 0xFF	; 255
    3594:	9f 4f       	sbci	r25, 0xFF	; 255
    3596:	08 95       	ret

00003598 <__floatunsisf>:
    3598:	e8 94       	clt
    359a:	09 c0       	rjmp	.+18     	; 0x35ae <__floatsisf+0x12>

0000359c <__floatsisf>:
    359c:	97 fb       	bst	r25, 7
    359e:	3e f4       	brtc	.+14     	; 0x35ae <__floatsisf+0x12>
    35a0:	90 95       	com	r25
    35a2:	80 95       	com	r24
    35a4:	70 95       	com	r23
    35a6:	61 95       	neg	r22
    35a8:	7f 4f       	sbci	r23, 0xFF	; 255
    35aa:	8f 4f       	sbci	r24, 0xFF	; 255
    35ac:	9f 4f       	sbci	r25, 0xFF	; 255
    35ae:	99 23       	and	r25, r25
    35b0:	a9 f0       	breq	.+42     	; 0x35dc <__floatsisf+0x40>
    35b2:	f9 2f       	mov	r31, r25
    35b4:	96 e9       	ldi	r25, 0x96	; 150
    35b6:	bb 27       	eor	r27, r27
    35b8:	93 95       	inc	r25
    35ba:	f6 95       	lsr	r31
    35bc:	87 95       	ror	r24
    35be:	77 95       	ror	r23
    35c0:	67 95       	ror	r22
    35c2:	b7 95       	ror	r27
    35c4:	f1 11       	cpse	r31, r1
    35c6:	f8 cf       	rjmp	.-16     	; 0x35b8 <__floatsisf+0x1c>
    35c8:	fa f4       	brpl	.+62     	; 0x3608 <__floatsisf+0x6c>
    35ca:	bb 0f       	add	r27, r27
    35cc:	11 f4       	brne	.+4      	; 0x35d2 <__floatsisf+0x36>
    35ce:	60 ff       	sbrs	r22, 0
    35d0:	1b c0       	rjmp	.+54     	; 0x3608 <__floatsisf+0x6c>
    35d2:	6f 5f       	subi	r22, 0xFF	; 255
    35d4:	7f 4f       	sbci	r23, 0xFF	; 255
    35d6:	8f 4f       	sbci	r24, 0xFF	; 255
    35d8:	9f 4f       	sbci	r25, 0xFF	; 255
    35da:	16 c0       	rjmp	.+44     	; 0x3608 <__floatsisf+0x6c>
    35dc:	88 23       	and	r24, r24
    35de:	11 f0       	breq	.+4      	; 0x35e4 <__floatsisf+0x48>
    35e0:	96 e9       	ldi	r25, 0x96	; 150
    35e2:	11 c0       	rjmp	.+34     	; 0x3606 <__floatsisf+0x6a>
    35e4:	77 23       	and	r23, r23
    35e6:	21 f0       	breq	.+8      	; 0x35f0 <__floatsisf+0x54>
    35e8:	9e e8       	ldi	r25, 0x8E	; 142
    35ea:	87 2f       	mov	r24, r23
    35ec:	76 2f       	mov	r23, r22
    35ee:	05 c0       	rjmp	.+10     	; 0x35fa <__floatsisf+0x5e>
    35f0:	66 23       	and	r22, r22
    35f2:	71 f0       	breq	.+28     	; 0x3610 <__floatsisf+0x74>
    35f4:	96 e8       	ldi	r25, 0x86	; 134
    35f6:	86 2f       	mov	r24, r22
    35f8:	70 e0       	ldi	r23, 0x00	; 0
    35fa:	60 e0       	ldi	r22, 0x00	; 0
    35fc:	2a f0       	brmi	.+10     	; 0x3608 <__floatsisf+0x6c>
    35fe:	9a 95       	dec	r25
    3600:	66 0f       	add	r22, r22
    3602:	77 1f       	adc	r23, r23
    3604:	88 1f       	adc	r24, r24
    3606:	da f7       	brpl	.-10     	; 0x35fe <__floatsisf+0x62>
    3608:	88 0f       	add	r24, r24
    360a:	96 95       	lsr	r25
    360c:	87 95       	ror	r24
    360e:	97 f9       	bld	r25, 7
    3610:	08 95       	ret

00003612 <__fp_cmp>:
    3612:	99 0f       	add	r25, r25
    3614:	00 08       	sbc	r0, r0
    3616:	55 0f       	add	r21, r21
    3618:	aa 0b       	sbc	r26, r26
    361a:	e0 e8       	ldi	r30, 0x80	; 128
    361c:	fe ef       	ldi	r31, 0xFE	; 254
    361e:	16 16       	cp	r1, r22
    3620:	17 06       	cpc	r1, r23
    3622:	e8 07       	cpc	r30, r24
    3624:	f9 07       	cpc	r31, r25
    3626:	c0 f0       	brcs	.+48     	; 0x3658 <__fp_cmp+0x46>
    3628:	12 16       	cp	r1, r18
    362a:	13 06       	cpc	r1, r19
    362c:	e4 07       	cpc	r30, r20
    362e:	f5 07       	cpc	r31, r21
    3630:	98 f0       	brcs	.+38     	; 0x3658 <__fp_cmp+0x46>
    3632:	62 1b       	sub	r22, r18
    3634:	73 0b       	sbc	r23, r19
    3636:	84 0b       	sbc	r24, r20
    3638:	95 0b       	sbc	r25, r21
    363a:	39 f4       	brne	.+14     	; 0x364a <__fp_cmp+0x38>
    363c:	0a 26       	eor	r0, r26
    363e:	61 f0       	breq	.+24     	; 0x3658 <__fp_cmp+0x46>
    3640:	23 2b       	or	r18, r19
    3642:	24 2b       	or	r18, r20
    3644:	25 2b       	or	r18, r21
    3646:	21 f4       	brne	.+8      	; 0x3650 <__fp_cmp+0x3e>
    3648:	08 95       	ret
    364a:	0a 26       	eor	r0, r26
    364c:	09 f4       	brne	.+2      	; 0x3650 <__fp_cmp+0x3e>
    364e:	a1 40       	sbci	r26, 0x01	; 1
    3650:	a6 95       	lsr	r26
    3652:	8f ef       	ldi	r24, 0xFF	; 255
    3654:	81 1d       	adc	r24, r1
    3656:	81 1d       	adc	r24, r1
    3658:	08 95       	ret

0000365a <__fp_inf>:
    365a:	97 f9       	bld	r25, 7
    365c:	9f 67       	ori	r25, 0x7F	; 127
    365e:	80 e8       	ldi	r24, 0x80	; 128
    3660:	70 e0       	ldi	r23, 0x00	; 0
    3662:	60 e0       	ldi	r22, 0x00	; 0
    3664:	08 95       	ret

00003666 <__fp_nan>:
    3666:	9f ef       	ldi	r25, 0xFF	; 255
    3668:	80 ec       	ldi	r24, 0xC0	; 192
    366a:	08 95       	ret

0000366c <__fp_pscA>:
    366c:	00 24       	eor	r0, r0
    366e:	0a 94       	dec	r0
    3670:	16 16       	cp	r1, r22
    3672:	17 06       	cpc	r1, r23
    3674:	18 06       	cpc	r1, r24
    3676:	09 06       	cpc	r0, r25
    3678:	08 95       	ret

0000367a <__fp_pscB>:
    367a:	00 24       	eor	r0, r0
    367c:	0a 94       	dec	r0
    367e:	12 16       	cp	r1, r18
    3680:	13 06       	cpc	r1, r19
    3682:	14 06       	cpc	r1, r20
    3684:	05 06       	cpc	r0, r21
    3686:	08 95       	ret

00003688 <__fp_round>:
    3688:	09 2e       	mov	r0, r25
    368a:	03 94       	inc	r0
    368c:	00 0c       	add	r0, r0
    368e:	11 f4       	brne	.+4      	; 0x3694 <__fp_round+0xc>
    3690:	88 23       	and	r24, r24
    3692:	52 f0       	brmi	.+20     	; 0x36a8 <__fp_round+0x20>
    3694:	bb 0f       	add	r27, r27
    3696:	40 f4       	brcc	.+16     	; 0x36a8 <__fp_round+0x20>
    3698:	bf 2b       	or	r27, r31
    369a:	11 f4       	brne	.+4      	; 0x36a0 <__fp_round+0x18>
    369c:	60 ff       	sbrs	r22, 0
    369e:	04 c0       	rjmp	.+8      	; 0x36a8 <__fp_round+0x20>
    36a0:	6f 5f       	subi	r22, 0xFF	; 255
    36a2:	7f 4f       	sbci	r23, 0xFF	; 255
    36a4:	8f 4f       	sbci	r24, 0xFF	; 255
    36a6:	9f 4f       	sbci	r25, 0xFF	; 255
    36a8:	08 95       	ret

000036aa <__fp_split3>:
    36aa:	57 fd       	sbrc	r21, 7
    36ac:	90 58       	subi	r25, 0x80	; 128
    36ae:	44 0f       	add	r20, r20
    36b0:	55 1f       	adc	r21, r21
    36b2:	59 f0       	breq	.+22     	; 0x36ca <__fp_splitA+0x10>
    36b4:	5f 3f       	cpi	r21, 0xFF	; 255
    36b6:	71 f0       	breq	.+28     	; 0x36d4 <__fp_splitA+0x1a>
    36b8:	47 95       	ror	r20

000036ba <__fp_splitA>:
    36ba:	88 0f       	add	r24, r24
    36bc:	97 fb       	bst	r25, 7
    36be:	99 1f       	adc	r25, r25
    36c0:	61 f0       	breq	.+24     	; 0x36da <__fp_splitA+0x20>
    36c2:	9f 3f       	cpi	r25, 0xFF	; 255
    36c4:	79 f0       	breq	.+30     	; 0x36e4 <__fp_splitA+0x2a>
    36c6:	87 95       	ror	r24
    36c8:	08 95       	ret
    36ca:	12 16       	cp	r1, r18
    36cc:	13 06       	cpc	r1, r19
    36ce:	14 06       	cpc	r1, r20
    36d0:	55 1f       	adc	r21, r21
    36d2:	f2 cf       	rjmp	.-28     	; 0x36b8 <__fp_split3+0xe>
    36d4:	46 95       	lsr	r20
    36d6:	f1 df       	rcall	.-30     	; 0x36ba <__fp_splitA>
    36d8:	08 c0       	rjmp	.+16     	; 0x36ea <__fp_splitA+0x30>
    36da:	16 16       	cp	r1, r22
    36dc:	17 06       	cpc	r1, r23
    36de:	18 06       	cpc	r1, r24
    36e0:	99 1f       	adc	r25, r25
    36e2:	f1 cf       	rjmp	.-30     	; 0x36c6 <__fp_splitA+0xc>
    36e4:	86 95       	lsr	r24
    36e6:	71 05       	cpc	r23, r1
    36e8:	61 05       	cpc	r22, r1
    36ea:	08 94       	sec
    36ec:	08 95       	ret

000036ee <__fp_zero>:
    36ee:	e8 94       	clt

000036f0 <__fp_szero>:
    36f0:	bb 27       	eor	r27, r27
    36f2:	66 27       	eor	r22, r22
    36f4:	77 27       	eor	r23, r23
    36f6:	cb 01       	movw	r24, r22
    36f8:	97 f9       	bld	r25, 7
    36fa:	08 95       	ret

000036fc <__mulsf3>:
    36fc:	0e 94 91 1b 	call	0x3722	; 0x3722 <__mulsf3x>
    3700:	0c 94 44 1b 	jmp	0x3688	; 0x3688 <__fp_round>
    3704:	0e 94 36 1b 	call	0x366c	; 0x366c <__fp_pscA>
    3708:	38 f0       	brcs	.+14     	; 0x3718 <__mulsf3+0x1c>
    370a:	0e 94 3d 1b 	call	0x367a	; 0x367a <__fp_pscB>
    370e:	20 f0       	brcs	.+8      	; 0x3718 <__mulsf3+0x1c>
    3710:	95 23       	and	r25, r21
    3712:	11 f0       	breq	.+4      	; 0x3718 <__mulsf3+0x1c>
    3714:	0c 94 2d 1b 	jmp	0x365a	; 0x365a <__fp_inf>
    3718:	0c 94 33 1b 	jmp	0x3666	; 0x3666 <__fp_nan>
    371c:	11 24       	eor	r1, r1
    371e:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__fp_szero>

00003722 <__mulsf3x>:
    3722:	0e 94 55 1b 	call	0x36aa	; 0x36aa <__fp_split3>
    3726:	70 f3       	brcs	.-36     	; 0x3704 <__mulsf3+0x8>

00003728 <__mulsf3_pse>:
    3728:	95 9f       	mul	r25, r21
    372a:	c1 f3       	breq	.-16     	; 0x371c <__mulsf3+0x20>
    372c:	95 0f       	add	r25, r21
    372e:	50 e0       	ldi	r21, 0x00	; 0
    3730:	55 1f       	adc	r21, r21
    3732:	62 9f       	mul	r22, r18
    3734:	f0 01       	movw	r30, r0
    3736:	72 9f       	mul	r23, r18
    3738:	bb 27       	eor	r27, r27
    373a:	f0 0d       	add	r31, r0
    373c:	b1 1d       	adc	r27, r1
    373e:	63 9f       	mul	r22, r19
    3740:	aa 27       	eor	r26, r26
    3742:	f0 0d       	add	r31, r0
    3744:	b1 1d       	adc	r27, r1
    3746:	aa 1f       	adc	r26, r26
    3748:	64 9f       	mul	r22, r20
    374a:	66 27       	eor	r22, r22
    374c:	b0 0d       	add	r27, r0
    374e:	a1 1d       	adc	r26, r1
    3750:	66 1f       	adc	r22, r22
    3752:	82 9f       	mul	r24, r18
    3754:	22 27       	eor	r18, r18
    3756:	b0 0d       	add	r27, r0
    3758:	a1 1d       	adc	r26, r1
    375a:	62 1f       	adc	r22, r18
    375c:	73 9f       	mul	r23, r19
    375e:	b0 0d       	add	r27, r0
    3760:	a1 1d       	adc	r26, r1
    3762:	62 1f       	adc	r22, r18
    3764:	83 9f       	mul	r24, r19
    3766:	a0 0d       	add	r26, r0
    3768:	61 1d       	adc	r22, r1
    376a:	22 1f       	adc	r18, r18
    376c:	74 9f       	mul	r23, r20
    376e:	33 27       	eor	r19, r19
    3770:	a0 0d       	add	r26, r0
    3772:	61 1d       	adc	r22, r1
    3774:	23 1f       	adc	r18, r19
    3776:	84 9f       	mul	r24, r20
    3778:	60 0d       	add	r22, r0
    377a:	21 1d       	adc	r18, r1
    377c:	82 2f       	mov	r24, r18
    377e:	76 2f       	mov	r23, r22
    3780:	6a 2f       	mov	r22, r26
    3782:	11 24       	eor	r1, r1
    3784:	9f 57       	subi	r25, 0x7F	; 127
    3786:	50 40       	sbci	r21, 0x00	; 0
    3788:	9a f0       	brmi	.+38     	; 0x37b0 <__mulsf3_pse+0x88>
    378a:	f1 f0       	breq	.+60     	; 0x37c8 <__mulsf3_pse+0xa0>
    378c:	88 23       	and	r24, r24
    378e:	4a f0       	brmi	.+18     	; 0x37a2 <__mulsf3_pse+0x7a>
    3790:	ee 0f       	add	r30, r30
    3792:	ff 1f       	adc	r31, r31
    3794:	bb 1f       	adc	r27, r27
    3796:	66 1f       	adc	r22, r22
    3798:	77 1f       	adc	r23, r23
    379a:	88 1f       	adc	r24, r24
    379c:	91 50       	subi	r25, 0x01	; 1
    379e:	50 40       	sbci	r21, 0x00	; 0
    37a0:	a9 f7       	brne	.-22     	; 0x378c <__mulsf3_pse+0x64>
    37a2:	9e 3f       	cpi	r25, 0xFE	; 254
    37a4:	51 05       	cpc	r21, r1
    37a6:	80 f0       	brcs	.+32     	; 0x37c8 <__mulsf3_pse+0xa0>
    37a8:	0c 94 2d 1b 	jmp	0x365a	; 0x365a <__fp_inf>
    37ac:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__fp_szero>
    37b0:	5f 3f       	cpi	r21, 0xFF	; 255
    37b2:	e4 f3       	brlt	.-8      	; 0x37ac <__mulsf3_pse+0x84>
    37b4:	98 3e       	cpi	r25, 0xE8	; 232
    37b6:	d4 f3       	brlt	.-12     	; 0x37ac <__mulsf3_pse+0x84>
    37b8:	86 95       	lsr	r24
    37ba:	77 95       	ror	r23
    37bc:	67 95       	ror	r22
    37be:	b7 95       	ror	r27
    37c0:	f7 95       	ror	r31
    37c2:	e7 95       	ror	r30
    37c4:	9f 5f       	subi	r25, 0xFF	; 255
    37c6:	c1 f7       	brne	.-16     	; 0x37b8 <__mulsf3_pse+0x90>
    37c8:	fe 2b       	or	r31, r30
    37ca:	88 0f       	add	r24, r24
    37cc:	91 1d       	adc	r25, r1
    37ce:	96 95       	lsr	r25
    37d0:	87 95       	ror	r24
    37d2:	97 f9       	bld	r25, 7
    37d4:	08 95       	ret

000037d6 <__udivmodhi4>:
    37d6:	aa 1b       	sub	r26, r26
    37d8:	bb 1b       	sub	r27, r27
    37da:	51 e1       	ldi	r21, 0x11	; 17
    37dc:	07 c0       	rjmp	.+14     	; 0x37ec <__udivmodhi4_ep>

000037de <__udivmodhi4_loop>:
    37de:	aa 1f       	adc	r26, r26
    37e0:	bb 1f       	adc	r27, r27
    37e2:	a6 17       	cp	r26, r22
    37e4:	b7 07       	cpc	r27, r23
    37e6:	10 f0       	brcs	.+4      	; 0x37ec <__udivmodhi4_ep>
    37e8:	a6 1b       	sub	r26, r22
    37ea:	b7 0b       	sbc	r27, r23

000037ec <__udivmodhi4_ep>:
    37ec:	88 1f       	adc	r24, r24
    37ee:	99 1f       	adc	r25, r25
    37f0:	5a 95       	dec	r21
    37f2:	a9 f7       	brne	.-22     	; 0x37de <__udivmodhi4_loop>
    37f4:	80 95       	com	r24
    37f6:	90 95       	com	r25
    37f8:	bc 01       	movw	r22, r24
    37fa:	cd 01       	movw	r24, r26
    37fc:	08 95       	ret

000037fe <__divmodhi4>:
    37fe:	97 fb       	bst	r25, 7
    3800:	07 2e       	mov	r0, r23
    3802:	16 f4       	brtc	.+4      	; 0x3808 <__divmodhi4+0xa>
    3804:	00 94       	com	r0
    3806:	07 d0       	rcall	.+14     	; 0x3816 <__divmodhi4_neg1>
    3808:	77 fd       	sbrc	r23, 7
    380a:	09 d0       	rcall	.+18     	; 0x381e <__divmodhi4_neg2>
    380c:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__udivmodhi4>
    3810:	07 fc       	sbrc	r0, 7
    3812:	05 d0       	rcall	.+10     	; 0x381e <__divmodhi4_neg2>
    3814:	3e f4       	brtc	.+14     	; 0x3824 <__divmodhi4_exit>

00003816 <__divmodhi4_neg1>:
    3816:	90 95       	com	r25
    3818:	81 95       	neg	r24
    381a:	9f 4f       	sbci	r25, 0xFF	; 255
    381c:	08 95       	ret

0000381e <__divmodhi4_neg2>:
    381e:	70 95       	com	r23
    3820:	61 95       	neg	r22
    3822:	7f 4f       	sbci	r23, 0xFF	; 255

00003824 <__divmodhi4_exit>:
    3824:	08 95       	ret

00003826 <__divmodsi4>:
    3826:	05 2e       	mov	r0, r21
    3828:	97 fb       	bst	r25, 7
    382a:	1e f4       	brtc	.+6      	; 0x3832 <__divmodsi4+0xc>
    382c:	00 94       	com	r0
    382e:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__negsi2>
    3832:	57 fd       	sbrc	r21, 7
    3834:	07 d0       	rcall	.+14     	; 0x3844 <__divmodsi4_neg2>
    3836:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <__udivmodsi4>
    383a:	07 fc       	sbrc	r0, 7
    383c:	03 d0       	rcall	.+6      	; 0x3844 <__divmodsi4_neg2>
    383e:	4e f4       	brtc	.+18     	; 0x3852 <__divmodsi4_exit>
    3840:	0c 94 2a 1c 	jmp	0x3854	; 0x3854 <__negsi2>

00003844 <__divmodsi4_neg2>:
    3844:	50 95       	com	r21
    3846:	40 95       	com	r20
    3848:	30 95       	com	r19
    384a:	21 95       	neg	r18
    384c:	3f 4f       	sbci	r19, 0xFF	; 255
    384e:	4f 4f       	sbci	r20, 0xFF	; 255
    3850:	5f 4f       	sbci	r21, 0xFF	; 255

00003852 <__divmodsi4_exit>:
    3852:	08 95       	ret

00003854 <__negsi2>:
    3854:	90 95       	com	r25
    3856:	80 95       	com	r24
    3858:	70 95       	com	r23
    385a:	61 95       	neg	r22
    385c:	7f 4f       	sbci	r23, 0xFF	; 255
    385e:	8f 4f       	sbci	r24, 0xFF	; 255
    3860:	9f 4f       	sbci	r25, 0xFF	; 255
    3862:	08 95       	ret

00003864 <__tablejump2__>:
    3864:	ee 0f       	add	r30, r30
    3866:	ff 1f       	adc	r31, r31
    3868:	05 90       	lpm	r0, Z+
    386a:	f4 91       	lpm	r31, Z
    386c:	e0 2d       	mov	r30, r0
    386e:	09 94       	ijmp

00003870 <__muluhisi3>:
    3870:	0e 94 9c 1c 	call	0x3938	; 0x3938 <__umulhisi3>
    3874:	a5 9f       	mul	r26, r21
    3876:	90 0d       	add	r25, r0
    3878:	b4 9f       	mul	r27, r20
    387a:	90 0d       	add	r25, r0
    387c:	a4 9f       	mul	r26, r20
    387e:	80 0d       	add	r24, r0
    3880:	91 1d       	adc	r25, r1
    3882:	11 24       	eor	r1, r1
    3884:	08 95       	ret

00003886 <__prologue_saves__>:
    3886:	2f 92       	push	r2
    3888:	3f 92       	push	r3
    388a:	4f 92       	push	r4
    388c:	5f 92       	push	r5
    388e:	6f 92       	push	r6
    3890:	7f 92       	push	r7
    3892:	8f 92       	push	r8
    3894:	9f 92       	push	r9
    3896:	af 92       	push	r10
    3898:	bf 92       	push	r11
    389a:	cf 92       	push	r12
    389c:	df 92       	push	r13
    389e:	ef 92       	push	r14
    38a0:	ff 92       	push	r15
    38a2:	0f 93       	push	r16
    38a4:	1f 93       	push	r17
    38a6:	cf 93       	push	r28
    38a8:	df 93       	push	r29
    38aa:	cd b7       	in	r28, 0x3d	; 61
    38ac:	de b7       	in	r29, 0x3e	; 62
    38ae:	ca 1b       	sub	r28, r26
    38b0:	db 0b       	sbc	r29, r27
    38b2:	0f b6       	in	r0, 0x3f	; 63
    38b4:	f8 94       	cli
    38b6:	de bf       	out	0x3e, r29	; 62
    38b8:	0f be       	out	0x3f, r0	; 63
    38ba:	cd bf       	out	0x3d, r28	; 61
    38bc:	09 94       	ijmp

000038be <__epilogue_restores__>:
    38be:	2a 88       	ldd	r2, Y+18	; 0x12
    38c0:	39 88       	ldd	r3, Y+17	; 0x11
    38c2:	48 88       	ldd	r4, Y+16	; 0x10
    38c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    38c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    38c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    38ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    38cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    38ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    38d0:	b9 84       	ldd	r11, Y+9	; 0x09
    38d2:	c8 84       	ldd	r12, Y+8	; 0x08
    38d4:	df 80       	ldd	r13, Y+7	; 0x07
    38d6:	ee 80       	ldd	r14, Y+6	; 0x06
    38d8:	fd 80       	ldd	r15, Y+5	; 0x05
    38da:	0c 81       	ldd	r16, Y+4	; 0x04
    38dc:	1b 81       	ldd	r17, Y+3	; 0x03
    38de:	aa 81       	ldd	r26, Y+2	; 0x02
    38e0:	b9 81       	ldd	r27, Y+1	; 0x01
    38e2:	ce 0f       	add	r28, r30
    38e4:	d1 1d       	adc	r29, r1
    38e6:	0f b6       	in	r0, 0x3f	; 63
    38e8:	f8 94       	cli
    38ea:	de bf       	out	0x3e, r29	; 62
    38ec:	0f be       	out	0x3f, r0	; 63
    38ee:	cd bf       	out	0x3d, r28	; 61
    38f0:	ed 01       	movw	r28, r26
    38f2:	08 95       	ret

000038f4 <__udivmodsi4>:
    38f4:	a1 e2       	ldi	r26, 0x21	; 33
    38f6:	1a 2e       	mov	r1, r26
    38f8:	aa 1b       	sub	r26, r26
    38fa:	bb 1b       	sub	r27, r27
    38fc:	fd 01       	movw	r30, r26
    38fe:	0d c0       	rjmp	.+26     	; 0x391a <__udivmodsi4_ep>

00003900 <__udivmodsi4_loop>:
    3900:	aa 1f       	adc	r26, r26
    3902:	bb 1f       	adc	r27, r27
    3904:	ee 1f       	adc	r30, r30
    3906:	ff 1f       	adc	r31, r31
    3908:	a2 17       	cp	r26, r18
    390a:	b3 07       	cpc	r27, r19
    390c:	e4 07       	cpc	r30, r20
    390e:	f5 07       	cpc	r31, r21
    3910:	20 f0       	brcs	.+8      	; 0x391a <__udivmodsi4_ep>
    3912:	a2 1b       	sub	r26, r18
    3914:	b3 0b       	sbc	r27, r19
    3916:	e4 0b       	sbc	r30, r20
    3918:	f5 0b       	sbc	r31, r21

0000391a <__udivmodsi4_ep>:
    391a:	66 1f       	adc	r22, r22
    391c:	77 1f       	adc	r23, r23
    391e:	88 1f       	adc	r24, r24
    3920:	99 1f       	adc	r25, r25
    3922:	1a 94       	dec	r1
    3924:	69 f7       	brne	.-38     	; 0x3900 <__udivmodsi4_loop>
    3926:	60 95       	com	r22
    3928:	70 95       	com	r23
    392a:	80 95       	com	r24
    392c:	90 95       	com	r25
    392e:	9b 01       	movw	r18, r22
    3930:	ac 01       	movw	r20, r24
    3932:	bd 01       	movw	r22, r26
    3934:	cf 01       	movw	r24, r30
    3936:	08 95       	ret

00003938 <__umulhisi3>:
    3938:	a2 9f       	mul	r26, r18
    393a:	b0 01       	movw	r22, r0
    393c:	b3 9f       	mul	r27, r19
    393e:	c0 01       	movw	r24, r0
    3940:	a3 9f       	mul	r26, r19
    3942:	70 0d       	add	r23, r0
    3944:	81 1d       	adc	r24, r1
    3946:	11 24       	eor	r1, r1
    3948:	91 1d       	adc	r25, r1
    394a:	b2 9f       	mul	r27, r18
    394c:	70 0d       	add	r23, r0
    394e:	81 1d       	adc	r24, r1
    3950:	11 24       	eor	r1, r1
    3952:	91 1d       	adc	r25, r1
    3954:	08 95       	ret

00003956 <__ftoa_engine>:
    3956:	28 30       	cpi	r18, 0x08	; 8
    3958:	08 f0       	brcs	.+2      	; 0x395c <__ftoa_engine+0x6>
    395a:	27 e0       	ldi	r18, 0x07	; 7
    395c:	33 27       	eor	r19, r19
    395e:	da 01       	movw	r26, r20
    3960:	99 0f       	add	r25, r25
    3962:	31 1d       	adc	r19, r1
    3964:	87 fd       	sbrc	r24, 7
    3966:	91 60       	ori	r25, 0x01	; 1
    3968:	00 96       	adiw	r24, 0x00	; 0
    396a:	61 05       	cpc	r22, r1
    396c:	71 05       	cpc	r23, r1
    396e:	39 f4       	brne	.+14     	; 0x397e <__ftoa_engine+0x28>
    3970:	32 60       	ori	r19, 0x02	; 2
    3972:	2e 5f       	subi	r18, 0xFE	; 254
    3974:	3d 93       	st	X+, r19
    3976:	30 e3       	ldi	r19, 0x30	; 48
    3978:	2a 95       	dec	r18
    397a:	e1 f7       	brne	.-8      	; 0x3974 <__ftoa_engine+0x1e>
    397c:	08 95       	ret
    397e:	9f 3f       	cpi	r25, 0xFF	; 255
    3980:	30 f0       	brcs	.+12     	; 0x398e <__ftoa_engine+0x38>
    3982:	80 38       	cpi	r24, 0x80	; 128
    3984:	71 05       	cpc	r23, r1
    3986:	61 05       	cpc	r22, r1
    3988:	09 f0       	breq	.+2      	; 0x398c <__ftoa_engine+0x36>
    398a:	3c 5f       	subi	r19, 0xFC	; 252
    398c:	3c 5f       	subi	r19, 0xFC	; 252
    398e:	3d 93       	st	X+, r19
    3990:	91 30       	cpi	r25, 0x01	; 1
    3992:	08 f0       	brcs	.+2      	; 0x3996 <__ftoa_engine+0x40>
    3994:	80 68       	ori	r24, 0x80	; 128
    3996:	91 1d       	adc	r25, r1
    3998:	df 93       	push	r29
    399a:	cf 93       	push	r28
    399c:	1f 93       	push	r17
    399e:	0f 93       	push	r16
    39a0:	ff 92       	push	r15
    39a2:	ef 92       	push	r14
    39a4:	19 2f       	mov	r17, r25
    39a6:	98 7f       	andi	r25, 0xF8	; 248
    39a8:	96 95       	lsr	r25
    39aa:	e9 2f       	mov	r30, r25
    39ac:	96 95       	lsr	r25
    39ae:	96 95       	lsr	r25
    39b0:	e9 0f       	add	r30, r25
    39b2:	ff 27       	eor	r31, r31
    39b4:	ec 5d       	subi	r30, 0xDC	; 220
    39b6:	fd 4f       	sbci	r31, 0xFD	; 253
    39b8:	99 27       	eor	r25, r25
    39ba:	33 27       	eor	r19, r19
    39bc:	ee 24       	eor	r14, r14
    39be:	ff 24       	eor	r15, r15
    39c0:	a7 01       	movw	r20, r14
    39c2:	e7 01       	movw	r28, r14
    39c4:	05 90       	lpm	r0, Z+
    39c6:	08 94       	sec
    39c8:	07 94       	ror	r0
    39ca:	28 f4       	brcc	.+10     	; 0x39d6 <__ftoa_engine+0x80>
    39cc:	36 0f       	add	r19, r22
    39ce:	e7 1e       	adc	r14, r23
    39d0:	f8 1e       	adc	r15, r24
    39d2:	49 1f       	adc	r20, r25
    39d4:	51 1d       	adc	r21, r1
    39d6:	66 0f       	add	r22, r22
    39d8:	77 1f       	adc	r23, r23
    39da:	88 1f       	adc	r24, r24
    39dc:	99 1f       	adc	r25, r25
    39de:	06 94       	lsr	r0
    39e0:	a1 f7       	brne	.-24     	; 0x39ca <__ftoa_engine+0x74>
    39e2:	05 90       	lpm	r0, Z+
    39e4:	07 94       	ror	r0
    39e6:	28 f4       	brcc	.+10     	; 0x39f2 <__ftoa_engine+0x9c>
    39e8:	e7 0e       	add	r14, r23
    39ea:	f8 1e       	adc	r15, r24
    39ec:	49 1f       	adc	r20, r25
    39ee:	56 1f       	adc	r21, r22
    39f0:	c1 1d       	adc	r28, r1
    39f2:	77 0f       	add	r23, r23
    39f4:	88 1f       	adc	r24, r24
    39f6:	99 1f       	adc	r25, r25
    39f8:	66 1f       	adc	r22, r22
    39fa:	06 94       	lsr	r0
    39fc:	a1 f7       	brne	.-24     	; 0x39e6 <__ftoa_engine+0x90>
    39fe:	05 90       	lpm	r0, Z+
    3a00:	07 94       	ror	r0
    3a02:	28 f4       	brcc	.+10     	; 0x3a0e <__ftoa_engine+0xb8>
    3a04:	f8 0e       	add	r15, r24
    3a06:	49 1f       	adc	r20, r25
    3a08:	56 1f       	adc	r21, r22
    3a0a:	c7 1f       	adc	r28, r23
    3a0c:	d1 1d       	adc	r29, r1
    3a0e:	88 0f       	add	r24, r24
    3a10:	99 1f       	adc	r25, r25
    3a12:	66 1f       	adc	r22, r22
    3a14:	77 1f       	adc	r23, r23
    3a16:	06 94       	lsr	r0
    3a18:	a1 f7       	brne	.-24     	; 0x3a02 <__ftoa_engine+0xac>
    3a1a:	05 90       	lpm	r0, Z+
    3a1c:	07 94       	ror	r0
    3a1e:	20 f4       	brcc	.+8      	; 0x3a28 <__ftoa_engine+0xd2>
    3a20:	49 0f       	add	r20, r25
    3a22:	56 1f       	adc	r21, r22
    3a24:	c7 1f       	adc	r28, r23
    3a26:	d8 1f       	adc	r29, r24
    3a28:	99 0f       	add	r25, r25
    3a2a:	66 1f       	adc	r22, r22
    3a2c:	77 1f       	adc	r23, r23
    3a2e:	88 1f       	adc	r24, r24
    3a30:	06 94       	lsr	r0
    3a32:	a9 f7       	brne	.-22     	; 0x3a1e <__ftoa_engine+0xc8>
    3a34:	84 91       	lpm	r24, Z
    3a36:	10 95       	com	r17
    3a38:	17 70       	andi	r17, 0x07	; 7
    3a3a:	41 f0       	breq	.+16     	; 0x3a4c <__ftoa_engine+0xf6>
    3a3c:	d6 95       	lsr	r29
    3a3e:	c7 95       	ror	r28
    3a40:	57 95       	ror	r21
    3a42:	47 95       	ror	r20
    3a44:	f7 94       	ror	r15
    3a46:	e7 94       	ror	r14
    3a48:	1a 95       	dec	r17
    3a4a:	c1 f7       	brne	.-16     	; 0x3a3c <__ftoa_engine+0xe6>
    3a4c:	ea ec       	ldi	r30, 0xCA	; 202
    3a4e:	f1 e0       	ldi	r31, 0x01	; 1
    3a50:	68 94       	set
    3a52:	15 90       	lpm	r1, Z+
    3a54:	15 91       	lpm	r17, Z+
    3a56:	35 91       	lpm	r19, Z+
    3a58:	65 91       	lpm	r22, Z+
    3a5a:	95 91       	lpm	r25, Z+
    3a5c:	05 90       	lpm	r0, Z+
    3a5e:	7f e2       	ldi	r23, 0x2F	; 47
    3a60:	73 95       	inc	r23
    3a62:	e1 18       	sub	r14, r1
    3a64:	f1 0a       	sbc	r15, r17
    3a66:	43 0b       	sbc	r20, r19
    3a68:	56 0b       	sbc	r21, r22
    3a6a:	c9 0b       	sbc	r28, r25
    3a6c:	d0 09       	sbc	r29, r0
    3a6e:	c0 f7       	brcc	.-16     	; 0x3a60 <__ftoa_engine+0x10a>
    3a70:	e1 0c       	add	r14, r1
    3a72:	f1 1e       	adc	r15, r17
    3a74:	43 1f       	adc	r20, r19
    3a76:	56 1f       	adc	r21, r22
    3a78:	c9 1f       	adc	r28, r25
    3a7a:	d0 1d       	adc	r29, r0
    3a7c:	7e f4       	brtc	.+30     	; 0x3a9c <__ftoa_engine+0x146>
    3a7e:	70 33       	cpi	r23, 0x30	; 48
    3a80:	11 f4       	brne	.+4      	; 0x3a86 <__ftoa_engine+0x130>
    3a82:	8a 95       	dec	r24
    3a84:	e6 cf       	rjmp	.-52     	; 0x3a52 <__ftoa_engine+0xfc>
    3a86:	e8 94       	clt
    3a88:	01 50       	subi	r16, 0x01	; 1
    3a8a:	30 f0       	brcs	.+12     	; 0x3a98 <__ftoa_engine+0x142>
    3a8c:	08 0f       	add	r16, r24
    3a8e:	0a f4       	brpl	.+2      	; 0x3a92 <__ftoa_engine+0x13c>
    3a90:	00 27       	eor	r16, r16
    3a92:	02 17       	cp	r16, r18
    3a94:	08 f4       	brcc	.+2      	; 0x3a98 <__ftoa_engine+0x142>
    3a96:	20 2f       	mov	r18, r16
    3a98:	23 95       	inc	r18
    3a9a:	02 2f       	mov	r16, r18
    3a9c:	7a 33       	cpi	r23, 0x3A	; 58
    3a9e:	28 f0       	brcs	.+10     	; 0x3aaa <__ftoa_engine+0x154>
    3aa0:	79 e3       	ldi	r23, 0x39	; 57
    3aa2:	7d 93       	st	X+, r23
    3aa4:	2a 95       	dec	r18
    3aa6:	e9 f7       	brne	.-6      	; 0x3aa2 <__ftoa_engine+0x14c>
    3aa8:	10 c0       	rjmp	.+32     	; 0x3aca <__ftoa_engine+0x174>
    3aaa:	7d 93       	st	X+, r23
    3aac:	2a 95       	dec	r18
    3aae:	89 f6       	brne	.-94     	; 0x3a52 <__ftoa_engine+0xfc>
    3ab0:	06 94       	lsr	r0
    3ab2:	97 95       	ror	r25
    3ab4:	67 95       	ror	r22
    3ab6:	37 95       	ror	r19
    3ab8:	17 95       	ror	r17
    3aba:	17 94       	ror	r1
    3abc:	e1 18       	sub	r14, r1
    3abe:	f1 0a       	sbc	r15, r17
    3ac0:	43 0b       	sbc	r20, r19
    3ac2:	56 0b       	sbc	r21, r22
    3ac4:	c9 0b       	sbc	r28, r25
    3ac6:	d0 09       	sbc	r29, r0
    3ac8:	98 f0       	brcs	.+38     	; 0x3af0 <__ftoa_engine+0x19a>
    3aca:	23 95       	inc	r18
    3acc:	7e 91       	ld	r23, -X
    3ace:	73 95       	inc	r23
    3ad0:	7a 33       	cpi	r23, 0x3A	; 58
    3ad2:	08 f0       	brcs	.+2      	; 0x3ad6 <__ftoa_engine+0x180>
    3ad4:	70 e3       	ldi	r23, 0x30	; 48
    3ad6:	7c 93       	st	X, r23
    3ad8:	20 13       	cpse	r18, r16
    3ada:	b8 f7       	brcc	.-18     	; 0x3aca <__ftoa_engine+0x174>
    3adc:	7e 91       	ld	r23, -X
    3ade:	70 61       	ori	r23, 0x10	; 16
    3ae0:	7d 93       	st	X+, r23
    3ae2:	30 f0       	brcs	.+12     	; 0x3af0 <__ftoa_engine+0x19a>
    3ae4:	83 95       	inc	r24
    3ae6:	71 e3       	ldi	r23, 0x31	; 49
    3ae8:	7d 93       	st	X+, r23
    3aea:	70 e3       	ldi	r23, 0x30	; 48
    3aec:	2a 95       	dec	r18
    3aee:	e1 f7       	brne	.-8      	; 0x3ae8 <__ftoa_engine+0x192>
    3af0:	11 24       	eor	r1, r1
    3af2:	ef 90       	pop	r14
    3af4:	ff 90       	pop	r15
    3af6:	0f 91       	pop	r16
    3af8:	1f 91       	pop	r17
    3afa:	cf 91       	pop	r28
    3afc:	df 91       	pop	r29
    3afe:	99 27       	eor	r25, r25
    3b00:	87 fd       	sbrc	r24, 7
    3b02:	90 95       	com	r25
    3b04:	08 95       	ret

00003b06 <strnlen_P>:
    3b06:	fc 01       	movw	r30, r24
    3b08:	05 90       	lpm	r0, Z+
    3b0a:	61 50       	subi	r22, 0x01	; 1
    3b0c:	70 40       	sbci	r23, 0x00	; 0
    3b0e:	01 10       	cpse	r0, r1
    3b10:	d8 f7       	brcc	.-10     	; 0x3b08 <strnlen_P+0x2>
    3b12:	80 95       	com	r24
    3b14:	90 95       	com	r25
    3b16:	8e 0f       	add	r24, r30
    3b18:	9f 1f       	adc	r25, r31
    3b1a:	08 95       	ret

00003b1c <strnlen>:
    3b1c:	fc 01       	movw	r30, r24
    3b1e:	61 50       	subi	r22, 0x01	; 1
    3b20:	70 40       	sbci	r23, 0x00	; 0
    3b22:	01 90       	ld	r0, Z+
    3b24:	01 10       	cpse	r0, r1
    3b26:	d8 f7       	brcc	.-10     	; 0x3b1e <strnlen+0x2>
    3b28:	80 95       	com	r24
    3b2a:	90 95       	com	r25
    3b2c:	8e 0f       	add	r24, r30
    3b2e:	9f 1f       	adc	r25, r31
    3b30:	08 95       	ret

00003b32 <fputc>:
    3b32:	0f 93       	push	r16
    3b34:	1f 93       	push	r17
    3b36:	cf 93       	push	r28
    3b38:	df 93       	push	r29
    3b3a:	fb 01       	movw	r30, r22
    3b3c:	23 81       	ldd	r18, Z+3	; 0x03
    3b3e:	21 fd       	sbrc	r18, 1
    3b40:	03 c0       	rjmp	.+6      	; 0x3b48 <fputc+0x16>
    3b42:	8f ef       	ldi	r24, 0xFF	; 255
    3b44:	9f ef       	ldi	r25, 0xFF	; 255
    3b46:	28 c0       	rjmp	.+80     	; 0x3b98 <fputc+0x66>
    3b48:	22 ff       	sbrs	r18, 2
    3b4a:	16 c0       	rjmp	.+44     	; 0x3b78 <fputc+0x46>
    3b4c:	46 81       	ldd	r20, Z+6	; 0x06
    3b4e:	57 81       	ldd	r21, Z+7	; 0x07
    3b50:	24 81       	ldd	r18, Z+4	; 0x04
    3b52:	35 81       	ldd	r19, Z+5	; 0x05
    3b54:	42 17       	cp	r20, r18
    3b56:	53 07       	cpc	r21, r19
    3b58:	44 f4       	brge	.+16     	; 0x3b6a <fputc+0x38>
    3b5a:	a0 81       	ld	r26, Z
    3b5c:	b1 81       	ldd	r27, Z+1	; 0x01
    3b5e:	9d 01       	movw	r18, r26
    3b60:	2f 5f       	subi	r18, 0xFF	; 255
    3b62:	3f 4f       	sbci	r19, 0xFF	; 255
    3b64:	31 83       	std	Z+1, r19	; 0x01
    3b66:	20 83       	st	Z, r18
    3b68:	8c 93       	st	X, r24
    3b6a:	26 81       	ldd	r18, Z+6	; 0x06
    3b6c:	37 81       	ldd	r19, Z+7	; 0x07
    3b6e:	2f 5f       	subi	r18, 0xFF	; 255
    3b70:	3f 4f       	sbci	r19, 0xFF	; 255
    3b72:	37 83       	std	Z+7, r19	; 0x07
    3b74:	26 83       	std	Z+6, r18	; 0x06
    3b76:	10 c0       	rjmp	.+32     	; 0x3b98 <fputc+0x66>
    3b78:	eb 01       	movw	r28, r22
    3b7a:	09 2f       	mov	r16, r25
    3b7c:	18 2f       	mov	r17, r24
    3b7e:	00 84       	ldd	r0, Z+8	; 0x08
    3b80:	f1 85       	ldd	r31, Z+9	; 0x09
    3b82:	e0 2d       	mov	r30, r0
    3b84:	09 95       	icall
    3b86:	89 2b       	or	r24, r25
    3b88:	e1 f6       	brne	.-72     	; 0x3b42 <fputc+0x10>
    3b8a:	8e 81       	ldd	r24, Y+6	; 0x06
    3b8c:	9f 81       	ldd	r25, Y+7	; 0x07
    3b8e:	01 96       	adiw	r24, 0x01	; 1
    3b90:	9f 83       	std	Y+7, r25	; 0x07
    3b92:	8e 83       	std	Y+6, r24	; 0x06
    3b94:	81 2f       	mov	r24, r17
    3b96:	90 2f       	mov	r25, r16
    3b98:	df 91       	pop	r29
    3b9a:	cf 91       	pop	r28
    3b9c:	1f 91       	pop	r17
    3b9e:	0f 91       	pop	r16
    3ba0:	08 95       	ret

00003ba2 <__ultoa_invert>:
    3ba2:	fa 01       	movw	r30, r20
    3ba4:	aa 27       	eor	r26, r26
    3ba6:	28 30       	cpi	r18, 0x08	; 8
    3ba8:	51 f1       	breq	.+84     	; 0x3bfe <__ultoa_invert+0x5c>
    3baa:	20 31       	cpi	r18, 0x10	; 16
    3bac:	81 f1       	breq	.+96     	; 0x3c0e <__ultoa_invert+0x6c>
    3bae:	e8 94       	clt
    3bb0:	6f 93       	push	r22
    3bb2:	6e 7f       	andi	r22, 0xFE	; 254
    3bb4:	6e 5f       	subi	r22, 0xFE	; 254
    3bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    3bb8:	8f 4f       	sbci	r24, 0xFF	; 255
    3bba:	9f 4f       	sbci	r25, 0xFF	; 255
    3bbc:	af 4f       	sbci	r26, 0xFF	; 255
    3bbe:	b1 e0       	ldi	r27, 0x01	; 1
    3bc0:	3e d0       	rcall	.+124    	; 0x3c3e <__ultoa_invert+0x9c>
    3bc2:	b4 e0       	ldi	r27, 0x04	; 4
    3bc4:	3c d0       	rcall	.+120    	; 0x3c3e <__ultoa_invert+0x9c>
    3bc6:	67 0f       	add	r22, r23
    3bc8:	78 1f       	adc	r23, r24
    3bca:	89 1f       	adc	r24, r25
    3bcc:	9a 1f       	adc	r25, r26
    3bce:	a1 1d       	adc	r26, r1
    3bd0:	68 0f       	add	r22, r24
    3bd2:	79 1f       	adc	r23, r25
    3bd4:	8a 1f       	adc	r24, r26
    3bd6:	91 1d       	adc	r25, r1
    3bd8:	a1 1d       	adc	r26, r1
    3bda:	6a 0f       	add	r22, r26
    3bdc:	71 1d       	adc	r23, r1
    3bde:	81 1d       	adc	r24, r1
    3be0:	91 1d       	adc	r25, r1
    3be2:	a1 1d       	adc	r26, r1
    3be4:	20 d0       	rcall	.+64     	; 0x3c26 <__ultoa_invert+0x84>
    3be6:	09 f4       	brne	.+2      	; 0x3bea <__ultoa_invert+0x48>
    3be8:	68 94       	set
    3bea:	3f 91       	pop	r19
    3bec:	2a e0       	ldi	r18, 0x0A	; 10
    3bee:	26 9f       	mul	r18, r22
    3bf0:	11 24       	eor	r1, r1
    3bf2:	30 19       	sub	r19, r0
    3bf4:	30 5d       	subi	r19, 0xD0	; 208
    3bf6:	31 93       	st	Z+, r19
    3bf8:	de f6       	brtc	.-74     	; 0x3bb0 <__ultoa_invert+0xe>
    3bfa:	cf 01       	movw	r24, r30
    3bfc:	08 95       	ret
    3bfe:	46 2f       	mov	r20, r22
    3c00:	47 70       	andi	r20, 0x07	; 7
    3c02:	40 5d       	subi	r20, 0xD0	; 208
    3c04:	41 93       	st	Z+, r20
    3c06:	b3 e0       	ldi	r27, 0x03	; 3
    3c08:	0f d0       	rcall	.+30     	; 0x3c28 <__ultoa_invert+0x86>
    3c0a:	c9 f7       	brne	.-14     	; 0x3bfe <__ultoa_invert+0x5c>
    3c0c:	f6 cf       	rjmp	.-20     	; 0x3bfa <__ultoa_invert+0x58>
    3c0e:	46 2f       	mov	r20, r22
    3c10:	4f 70       	andi	r20, 0x0F	; 15
    3c12:	40 5d       	subi	r20, 0xD0	; 208
    3c14:	4a 33       	cpi	r20, 0x3A	; 58
    3c16:	18 f0       	brcs	.+6      	; 0x3c1e <__ultoa_invert+0x7c>
    3c18:	49 5d       	subi	r20, 0xD9	; 217
    3c1a:	31 fd       	sbrc	r19, 1
    3c1c:	40 52       	subi	r20, 0x20	; 32
    3c1e:	41 93       	st	Z+, r20
    3c20:	02 d0       	rcall	.+4      	; 0x3c26 <__ultoa_invert+0x84>
    3c22:	a9 f7       	brne	.-22     	; 0x3c0e <__ultoa_invert+0x6c>
    3c24:	ea cf       	rjmp	.-44     	; 0x3bfa <__ultoa_invert+0x58>
    3c26:	b4 e0       	ldi	r27, 0x04	; 4
    3c28:	a6 95       	lsr	r26
    3c2a:	97 95       	ror	r25
    3c2c:	87 95       	ror	r24
    3c2e:	77 95       	ror	r23
    3c30:	67 95       	ror	r22
    3c32:	ba 95       	dec	r27
    3c34:	c9 f7       	brne	.-14     	; 0x3c28 <__ultoa_invert+0x86>
    3c36:	00 97       	sbiw	r24, 0x00	; 0
    3c38:	61 05       	cpc	r22, r1
    3c3a:	71 05       	cpc	r23, r1
    3c3c:	08 95       	ret
    3c3e:	9b 01       	movw	r18, r22
    3c40:	ac 01       	movw	r20, r24
    3c42:	0a 2e       	mov	r0, r26
    3c44:	06 94       	lsr	r0
    3c46:	57 95       	ror	r21
    3c48:	47 95       	ror	r20
    3c4a:	37 95       	ror	r19
    3c4c:	27 95       	ror	r18
    3c4e:	ba 95       	dec	r27
    3c50:	c9 f7       	brne	.-14     	; 0x3c44 <__ultoa_invert+0xa2>
    3c52:	62 0f       	add	r22, r18
    3c54:	73 1f       	adc	r23, r19
    3c56:	84 1f       	adc	r24, r20
    3c58:	95 1f       	adc	r25, r21
    3c5a:	a0 1d       	adc	r26, r0
    3c5c:	08 95       	ret

00003c5e <_exit>:
    3c5e:	f8 94       	cli

00003c60 <__stop_program>:
    3c60:	ff cf       	rjmp	.-2      	; 0x3c60 <__stop_program>
